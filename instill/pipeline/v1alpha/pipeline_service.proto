syntax = "proto3";

package instill.pipeline.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";

import "instill/pipeline/v1alpha/pipeline.proto";

// HealthCheckRequest represents a request to health check a service
message HealthCheckRequest {
  // Service name to check for its readiness status
  optional string service = 1 [ (google.api.field_behavior) = OPTIONAL ];
}

// HealthCheckResponse represents a response for a service heath status
message HealthCheckResponse {
  // ServingStatus enumerates the status of a queried service
  enum ServingStatus {
    // Serving status: UNSPECIFIED
    SERVING_STATUS_UNSPECIFIED = 0;
    // Serving status: SERVING
    SERVING_STATUS_SERVING = 1;
    // Serving status: NOT SERVING
    SERVING_STATUS_NOT_SERVING = 2;
  }

  // Status is the instance of the enum type ServingStatus
  ServingStatus status = 1;
}

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional HealthCheckRequest health_check_request = 1
      [ (google.api.field_behavior) = OPTIONAL ];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  HealthCheckResponse health_check_response = 1;
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional HealthCheckRequest health_check_request = 1
      [ (google.api.field_behavior) = OPTIONAL ];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  HealthCheckResponse health_check_response = 1;
}

// Pipeline service responds to incoming pipeline requests.
service PipelineService {

  // Liveness method receives a LivenessRequest message and returns a
  // LivenessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/pipeline"} ]
    };
  }

  // Readiness method receives a ReadinessRequest message and returns a
  // ReadinessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
    };
  }

  // CreatePipeline method receives a CreatePipelineRequest message and returns
  // a CreatePipelineResponse message.
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/pipelines"
      body : "pipeline"
    };
    option (google.api.method_signature) = "pipeline";
  }

  // ListPipeline method receives a ListPipelineRequest message and returns a
  // ListPipelineResponse message.
  rpc ListPipeline(ListPipelineRequest) returns (ListPipelineResponse) {
    option (google.api.http) = {
      get : "/v1alpha/pipelines"
    };
  }

  // GetPipeline method receives a GetPipelineRequest message and returns a
  // GetPipelineResponse message.
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=pipelines/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // UpdatePipeline method receives a UpdatePipelineRequest message and returns
  // a UpdatePipelineResponse message.
  rpc UpdatePipeline(UpdatePipelineRequest) returns (UpdatePipelineResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{pipeline.name=pipelines/*}"
      body : "pipeline"
    };
    option (google.api.method_signature) = "pipeline,update_mask";
  }

  // DeletePipeline method receives a DeletePipelineRequest message and returns
  // a DeletePipelineResponse message.
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=pipelines/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Activate a pipeline.
  // The `state` of the pipeline after activating is `ACTIVE`.
  // ActivatePipeline` can be called on Pipelines in the state `INACTIVE`;
  // Pipelines in a different state (including `ACTIVE`) returns an error.
  rpc ActivatePipeline(ActivatePipelineRequest)
      returns (ActivatePipelineResponse) {
    option (google.api.http) = {
      post : "/v1beta1/{name=pipelines/*}:activate"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Deactivate a pipeline.
  // The `state` of the pipeline after inactivating is `INACTIVE`.
  // DeactivatePipeline` can be called on Pipelines in the state `ACTIVE`;
  // Pipelines in a different state (including `INACTIVE`) returns an error.
  rpc DeactivatePipeline(DeactivatePipelineRequest)
      returns (DeactivatePipelineResponse) {
    option (google.api.http) = {
      post : "/v1beta1/{name=pipelines/*}:deactivate"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // RenamePipeline method receives a RenamePipelineRequest message and returns
  // a RenamePipelineResponse message.
  rpc RenamePipeline(RenamePipelineRequest) returns (RenamePipelineResponse) {
    option (google.api.http) = {
      post : "/v1beta1/{name=pipelines/*}:rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_pipeline_id";
  }

  // TriggerPipeline method receives a TriggerPipelineRequest message and
  // returns a TriggerPipelineResponse.
  rpc TriggerPipeline(TriggerPipelineRequest)
      returns (TriggerPipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=pipelines/*}:trigger"
      body : "*"
    };
    option (google.api.method_signature) = "name,inputs";
  }

  // TriggerPipelineBinaryFileUpload method receives a
  // TriggerPipelineBinaryFileUploadRequest message and returns a
  // TriggerPipelineBinaryFileUploadResponse message.
  rpc TriggerPipelineBinaryFileUpload(
      stream TriggerPipelineBinaryFileUploadRequest)
      returns (TriggerPipelineBinaryFileUploadResponse) {}
}
