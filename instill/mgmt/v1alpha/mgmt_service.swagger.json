{
  "swagger": "2.0",
  "info": {
    "title": "instill/mgmt/v1alpha/mgmt_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "UserService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/health/mgmt": {
      "get": {
        "summary": "Liveness method receives a LivenessRequest message and returns a\nLivenessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "UserService_Liveness2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmgmtv1alphaLivenessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "health_check_request.service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1alpha/__liveness": {
      "get": {
        "summary": "Liveness method receives a LivenessRequest message and returns a\nLivenessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "UserService_Liveness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmgmtv1alphaLivenessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "health_check_request.service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1alpha/__readiness": {
      "get": {
        "summary": "Readiness method receives a ReadinessRequest message and returns a\nReadinessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "UserService_Readiness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmgmtv1alphaReadinessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "health_check_request.service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1alpha/users": {
      "get": {
        "summary": "ListUser method receives a ListUserRequest message and returns a\nListUserResponse message.",
        "operationId": "UserService_ListUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "Page size: the maximum number of resources to return. The service may\nreturn fewer than this value. If unspecified, at most 10 users will be\nreturned. The maximum value is 100; values above 100 will be coereced to\n100.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "post": {
        "summary": "CreateUser receives a CreateUserRequest message and returns a\naGetUserResponse",
        "operationId": "UserService_CreateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaCreateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The user to be created\n\nThe user's `name` field is used to identify the user to create.\nFormat: users/{user}",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1alpha/{name}": {
      "get": {
        "summary": "GetUser method receives a GetUserRequest message and returns\na GetUserResponse message.",
        "operationId": "UserService_GetUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name of a user. For example:\n\"users/instill\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+"
          }
        ],
        "tags": [
          "UserService"
        ]
      },
      "delete": {
        "summary": "DeleteUser method receives a DeleteUserRequest message and returns a\nDeleteUserResponse",
        "operationId": "UserService_DeleteUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the user to be deleted,\nfor example: \"users/local-user\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    },
    "/v1alpha/{user.name}": {
      "patch": {
        "summary": "UpdateUser method receives a UpdateUserRequest message and returns\na UpdateUserResponse",
        "operationId": "UserService_UpdateUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUpdateUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "user.name",
            "description": "Resource name. It must have the format of \"users/*\".\nFor example: \"users/local-user\".",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "users/[^/]+"
          },
          {
            "name": "body",
            "description": "The user to update\n\nThe user's `name` field is used to identify the user to update.\nFormat: users/{user}",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          },
          {
            "name": "update_mask",
            "description": "Update mask for a user instance.",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "UserService"
        ]
      }
    }
  },
  "definitions": {
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "instillmgmtv1alphaHealthCheckRequest": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "title": "Service name to check for its readiness status"
        }
      },
      "title": "HealthCheckRequest represents a request to health check a service"
    },
    "instillmgmtv1alphaHealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/instillmgmtv1alphaHealthCheckResponseServingStatus",
          "title": "Status is the instance of the enum type ServingStatus"
        }
      },
      "title": "HealthCheckResponse represents a response for a service heath status"
    },
    "instillmgmtv1alphaHealthCheckResponseServingStatus": {
      "type": "string",
      "enum": [
        "SERVING_STATUS_UNSPECIFIED",
        "SERVING_STATUS_SERVING",
        "SERVING_STATUS_NOT_SERVING"
      ],
      "default": "SERVING_STATUS_UNSPECIFIED",
      "description": "- SERVING_STATUS_UNSPECIFIED: Serving status: UNSPECIFIED\n - SERVING_STATUS_SERVING: Serving status: SERVING\n - SERVING_STATUS_NOT_SERVING: Serving status: NOT SERVING",
      "title": "ServingStatus enumerates the status of a queried service"
    },
    "instillmgmtv1alphaLivenessResponse": {
      "type": "object",
      "properties": {
        "health_check_response": {
          "$ref": "#/definitions/instillmgmtv1alphaHealthCheckResponse",
          "title": "HealthCheckResponse message"
        }
      },
      "title": "LivenessResponse represents a response for a service liveness status"
    },
    "instillmgmtv1alphaReadinessResponse": {
      "type": "object",
      "properties": {
        "health_check_response": {
          "$ref": "#/definitions/instillmgmtv1alphaHealthCheckResponse",
          "title": "HealthCheckResponse message"
        }
      },
      "title": "ReadinessResponse represents a response for a service readiness status"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "v1alphaCreateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1alphaUser",
          "title": "A user instance"
        }
      },
      "title": "CreateUserResponse represents a response for a user response"
    },
    "v1alphaDeleteUserResponse": {
      "type": "object",
      "title": "DeleteUserResponse represents an empty response"
    },
    "v1alphaGetUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1alphaUser",
          "title": "A user instance"
        }
      },
      "title": "GetUserResponse represents a response for a user instance"
    },
    "v1alphaListUserResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaUser"
          },
          "title": "A list of users"
        },
        "next_page_token": {
          "type": "string",
          "title": "Next page token"
        },
        "total_size": {
          "type": "integer",
          "format": "int32",
          "title": "Total count of users"
        }
      },
      "title": "ListUserResponse represents a response for a list of users"
    },
    "v1alphaOwnerType": {
      "type": "string",
      "enum": [
        "OWNER_TYPE_UNSPECIFIED",
        "OWNER_TYPE_USER",
        "OWNER_TYPE_ORGANIZATION"
      ],
      "default": "OWNER_TYPE_UNSPECIFIED",
      "description": "- OWNER_TYPE_UNSPECIFIED: OwnerType: UNSPECIFIED\n - OWNER_TYPE_USER: OwnerType: USER\n - OWNER_TYPE_ORGANIZATION: OwnerType: ORGANIZATION",
      "title": "OwnerType enumerates the owner type of any resource"
    },
    "v1alphaUpdateUserResponse": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/v1alphaUser",
          "title": "A user instance"
        }
      },
      "title": "UpdateUserResponse represents a response for a user instance"
    },
    "v1alphaUser": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Resource name. It must have the format of \"users/*\".\nFor example: \"users/local-user\".",
          "readOnly": true
        },
        "uid": {
          "type": "string",
          "title": "User ID in UUIDv4",
          "readOnly": true
        },
        "email": {
          "type": "string",
          "title": "User email"
        },
        "id": {
          "type": "string",
          "description": "Resource ID (the last segment of the resource name), also the user login\nusername. This conforms to RFC-1034, which restricts to letters, numbers,\nand hyphen, with the first character a letter, the last a letter or a\nnumber, and a 63 character maximum."
        },
        "company_name": {
          "type": "string",
          "title": "User company name"
        },
        "role": {
          "type": "string",
          "title": "User role\nAllowed roles:\n[ \"manager\", \"ai-researcher\", \"ai-engineer\", \"data-engineer\",\n\"data-scientist\",\n  \"analytics-engineer\", \"hobbyist\"]"
        },
        "usage_data_collection": {
          "type": "boolean",
          "title": "User usage data collection",
          "required": [
            "usage_data_collection"
          ]
        },
        "newsletter_subscription": {
          "type": "boolean",
          "title": "User newsletter subscription",
          "required": [
            "newsletter_subscription"
          ]
        },
        "type": {
          "$ref": "#/definitions/v1alphaOwnerType",
          "title": "Owner type: fixed to `OWNER_TYPE_USER`"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "title": "User creation time",
          "readOnly": true
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "title": "User update time",
          "readOnly": true
        }
      },
      "title": "User represents the content of a user",
      "required": [
        "usage_data_collection",
        "newsletter_subscription"
      ]
    }
  }
}
