{
  "swagger": "2.0",
  "info": {
    "title": "instill/model/v1alpha/model_service.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "ModelService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1alpha/__liveness": {
      "get": {
        "summary": "Liveness method receives a LivenessRequest message and returns a\nLivenessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "ModelService_Liveness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmodelv1alphaLivenessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "health_check_request.service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/__readiness": {
      "get": {
        "summary": "Readiness method receives a ReadinessRequest message and returns a\nReadinessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "ModelService_Readiness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmodelv1alphaReadinessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "health_check_request.service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/health/model": {
      "get": {
        "summary": "Liveness method receives a LivenessRequest message and returns a\nLivenessResponse message.\nSee https://github.com/grpc/grpc/blob/master/doc/health-checking.md",
        "operationId": "ModelService_Liveness2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/instillmodelv1alphaLivenessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "health_check_request.service",
            "description": "Service name to check for its readiness status.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/model-definitions": {
      "get": {
        "summary": "ListModelDefinition method receives a ListModelDefinitionRequest message\nand returns a ListModelDefinitionResponse",
        "operationId": "ModelService_ListModelDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListModelDefinitionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "Page size: the maximum number of resources to return. The service may\nreturn fewer than this value. If unspecified, at most 10 users will be\nreturned. The maximum value is 100; values above 100 will be coereced to\n100.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page_token",
            "description": "Page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "Definition view (default is VIEW_BASIC).\n\n - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.\n - VIEW_BASIC: View: BASIC, server response only include basic information of the resource\n - VIEW_FULL: View: FULL, full representation of the resource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "VIEW_UNSPECIFIED",
              "VIEW_BASIC",
              "VIEW_FULL"
            ],
            "default": "VIEW_UNSPECIFIED"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/models": {
      "get": {
        "summary": "ListModel method receives a ListModelRequest message and returns a\nListModelResponse",
        "operationId": "ModelService_ListModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "page_size",
            "description": "Page size: the maximum number of resources to return. The service may\nreturn fewer than this value. If unspecified, at most 10 users will be\nreturned. The maximum value is 100; values above 100 will be coereced to\n100.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page_token",
            "description": "Page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "Definition view (default is VIEW_BASIC).\n\n - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.\n - VIEW_BASIC: View: BASIC, server response only include basic information of the resource\n - VIEW_FULL: View: FULL, full representation of the resource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "VIEW_UNSPECIFIED",
              "VIEW_BASIC",
              "VIEW_FULL"
            ],
            "default": "VIEW_UNSPECIFIED"
          }
        ],
        "tags": [
          "ModelService"
        ]
      },
      "post": {
        "summary": "CreateModel method receives a CreateModelRequest message and returns a\nCreateModelResponse",
        "operationId": "ModelService_CreateModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaCreateModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The model to be created\n\nThe model `name` field is used to identify the model to create.\nFormat: models/{model}",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaModel"
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{model.name}": {
      "patch": {
        "summary": "UpdateModel method receives a UpdateModelRequest message and returns a\nUpdateModelResponse",
        "operationId": "ModelService_UpdateModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUpdateModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "model.name",
            "description": "Resource name. It must have the format of \"models/{model}\".\nFor example: \"models/yolov4\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          },
          {
            "name": "body",
            "description": "The model to update\n\nThe model `name` field is used to identify the model to update.\nFormat: models/{model}",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaModel"
            }
          },
          {
            "name": "update_mask",
            "description": "Mask of fields to update.",
            "in": "query",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name_1}": {
      "get": {
        "summary": "GetModel method receives a GetModelRequest message and returns a\nGetModelResponse",
        "operationId": "ModelService_GetModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name_1",
            "description": "Resource name of the model.\nFor example \"models/{model}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name_2}": {
      "get": {
        "summary": "GetModelInstance method receives a GetModelInstanceRequest message and\nreturns a GetModelInstanceResponse",
        "operationId": "ModelService_GetModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name_2",
            "description": "Resource name of the model instance.\nFor example \"models/{model}/instances/{instance}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+/instances/[^/]+"
          }
        ],
        "tags": [
          "ModelService"
        ]
      },
      "delete": {
        "summary": "DeleteModel method receives a DeleteModelRequest message and returns a\nDeleteModelResponse",
        "operationId": "ModelService_DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name of the model.\nFor example \"models/{model}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name_3}": {
      "get": {
        "summary": "GetModelInstanceCard method receives a GetModelInstanceCardRequest message\nand returns a GetModelInstanceCardResponse",
        "operationId": "ModelService_GetModelInstanceCard",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetModelInstanceCardResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name_3",
            "description": "Resource name of the model instance card.\nFor example \"models/{model}/instances/{instance}/readme\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+/instances/[^/]+/readme"
          }
        ],
        "tags": [
          "ModelService"
        ]
      },
      "delete": {
        "summary": "DeleteModel method receives a DeleteModelRequest message and returns a\nDeleteModelResponse",
        "operationId": "ModelService_DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name of the model.\nFor example \"models/{model}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name}": {
      "get": {
        "summary": "GetModelDefinition method receives a GetModelDefinitionRequest message and\nreturns a GetModelDefinitionResponse",
        "operationId": "ModelService_GetModelDefinition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaGetModelDefinitionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name of the model definition.\nFor example \"model-definitions/{uuid}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "model-definitions/[^/]+"
          }
        ],
        "tags": [
          "ModelService"
        ]
      },
      "delete": {
        "summary": "DeleteModel method receives a DeleteModelRequest message and returns a\nDeleteModelResponse",
        "operationId": "ModelService_DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name of the model.\nFor example \"models/{model}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name}:deploy": {
      "post": {
        "summary": "DeployModelInstance deploy a model instance to online state\nTODO: should use [Long-running operations](https://google.aip.dev/151)",
        "operationId": "ModelService_DeployModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaDeployModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name for the model instance to be deployed.\nFormat: models/{model}/instances/{instance}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+/instances/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "DeployModelInstanceRequest represents a request to deploy a model instance to\nonline state"
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name}:rename": {
      "post": {
        "summary": "RenameModel method rename a model",
        "operationId": "ModelService_RenameModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaRenameModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name for the model to be renamed.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "new_model_id": {
                  "type": "string",
                  "title": "New ID of this model",
                  "required": [
                    "new_model_id"
                  ]
                }
              },
              "title": "RenameModelRequest represents a request to rename a model",
              "required": [
                "new_model_id"
              ]
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name}:trigger": {
      "post": {
        "summary": "/////////////////////////////////////////////////////",
        "description": "TriggerModelInstance method receives a TriggerModelInstanceRequest message and\nreturns a TriggerModelInstanceResponse message.",
        "operationId": "ModelService_TriggerModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaTriggerModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "The resource name of the model instance to trigger.\nFor example \"models/{model}/instances/{instance}\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+/instances/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "inputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/instillmodelv1alphaInput"
                  },
                  "title": "Input to trigger the model instance",
                  "required": [
                    "inputs"
                  ]
                }
              },
              "title": "TriggerModelInstanceRequest represents a request to trigger a model instance",
              "required": [
                "inputs"
              ]
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{name}:undeploy": {
      "post": {
        "summary": "UndeployModelInstance undeploy a model instance to offline state\nTODO: should use [Long-running operations](https://google.aip.dev/151)",
        "operationId": "ModelService_UndeployModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUndeployModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Resource name for the model instance to be undeployed.\nFormat: models/{model}/instances/{instance}",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+/instances/[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "title": "UndeployModelInstanceRequest represents a request to undeploy a model\ninstance to offline state"
            }
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    },
    "/v1alpha/{parent}/instances": {
      "get": {
        "summary": "ListModelInstance method receives a ListModelInstanceRequest message and\nreturns a ListModelInstanceResponse",
        "operationId": "ModelService_ListModelInstance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListModelInstanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "The name of the model whose instances we'd like to list.\ne.g., \"models/yolov4\"",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "models/[^/]+"
          },
          {
            "name": "page_size",
            "description": "Page size: the maximum number of resources to return. The service may\nreturn fewer than this value. If unspecified, at most 10 users will be\nreturned. The maximum value is 100; values above 100 will be coereced to\n100.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "page_token",
            "description": "Page token.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "view",
            "description": "Definition view (default is VIEW_BASIC).\n\n - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.\n - VIEW_BASIC: View: BASIC, server response only include basic information of the resource\n - VIEW_FULL: View: FULL, full representation of the resource",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "VIEW_UNSPECIFIED",
              "VIEW_BASIC",
              "VIEW_FULL"
            ],
            "default": "VIEW_UNSPECIFIED"
          }
        ],
        "tags": [
          "ModelService"
        ]
      }
    }
  },
  "definitions": {
    "ModelInstanceTask": {
      "type": "string",
      "enum": [
        "TASK_UNSPECIFIED",
        "TASK_CLASSIFICATION",
        "TASK_DETECTION"
      ],
      "default": "TASK_UNSPECIFIED",
      "description": "- TASK_UNSPECIFIED: Task: UNSPECIFIED\n - TASK_CLASSIFICATION: Task: CLASSIFICATION\n - TASK_DETECTION: Task: DETECTION",
      "title": "Task enumerates the task type of a model instance"
    },
    "ModelVisibility": {
      "type": "string",
      "enum": [
        "VISIBILITY_UNSPECIFIED",
        "VISIBILITY_PRIVATE",
        "VISIBILITY_PUBLIC"
      ],
      "default": "VISIBILITY_UNSPECIFIED",
      "description": "- VISIBILITY_UNSPECIFIED: Visibility: UNSPECIFIED, equivalent to PRIVATE.\n - VISIBILITY_PRIVATE: Visibility: PRIVATE\n - VISIBILITY_PUBLIC: Visibility: PUBLIC",
      "title": "Model visibility including public or private"
    },
    "instillmodelv1alphaHealthCheckRequest": {
      "type": "object",
      "properties": {
        "service": {
          "type": "string",
          "title": "Service name to check for its readiness status"
        }
      },
      "title": "HealthCheckRequest represents a request to health check a service"
    },
    "instillmodelv1alphaHealthCheckResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/instillmodelv1alphaHealthCheckResponseServingStatus",
          "title": "Status is the instance of the enum type ServingStatus"
        }
      },
      "title": "HealthCheckResponse represents a response for a service heath status"
    },
    "instillmodelv1alphaHealthCheckResponseServingStatus": {
      "type": "string",
      "enum": [
        "SERVING_STATUS_UNSPECIFIED",
        "SERVING_STATUS_SERVING",
        "SERVING_STATUS_NOT_SERVING"
      ],
      "default": "SERVING_STATUS_UNSPECIFIED",
      "description": "- SERVING_STATUS_UNSPECIFIED: Serving status: UNSPECIFIED\n - SERVING_STATUS_SERVING: Serving status: SERVING\n - SERVING_STATUS_NOT_SERVING: Serving status: NOT SERVING",
      "title": "ServingStatus enumerates the status of a queried service"
    },
    "instillmodelv1alphaInput": {
      "type": "object",
      "properties": {
        "image_url": {
          "type": "string",
          "title": "Image type URL"
        },
        "image_base64": {
          "type": "string",
          "title": "Image type base64"
        }
      },
      "title": "Input represents the input to trigger a model instance"
    },
    "instillmodelv1alphaLivenessResponse": {
      "type": "object",
      "properties": {
        "health_check_response": {
          "$ref": "#/definitions/instillmodelv1alphaHealthCheckResponse",
          "title": "HealthCheckResponse message"
        }
      },
      "title": "LivenessResponse represents a response for a service liveness status"
    },
    "instillmodelv1alphaReadinessResponse": {
      "type": "object",
      "properties": {
        "health_check_response": {
          "$ref": "#/definitions/instillmodelv1alphaHealthCheckResponse",
          "title": "HealthCheckResponse message"
        }
      },
      "title": "ReadinessResponse represents a response for a service readiness status"
    },
    "instillmodelv1alphaView": {
      "type": "string",
      "enum": [
        "VIEW_UNSPECIFIED",
        "VIEW_BASIC",
        "VIEW_FULL"
      ],
      "default": "VIEW_UNSPECIFIED",
      "description": "View represents a view of any resource. The resource view is implemented by\nadding a parameter to the method request which allows the client to specify\nwhich view of the resource it wants to receive in the response.\n\n - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.\n - VIEW_BASIC: View: BASIC, server response only include basic information of the resource\n - VIEW_FULL: View: FULL, full representation of the resource"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1alphaCreateModelBinaryFileUploadResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModel",
          "title": "The created model"
        }
      },
      "title": "CreateModelBinaryFileUploadResponse represents a response for a model\ninstance"
    },
    "v1alphaCreateModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModel",
          "title": "The created model"
        }
      },
      "title": "CreateModelResponse represents a response for a model"
    },
    "v1alphaDeleteModelResponse": {
      "type": "object",
      "title": "DeleteModelResponse represents an empty response"
    },
    "v1alphaDeployModelInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1alphaModelInstance",
          "title": "Deployed model instance"
        }
      },
      "title": "DeployModelInstanceResponse represents a response for a deployed model\ninstance\nTODO: should use [Long-running operations](https://google.aip.dev/151)"
    },
    "v1alphaGetModelDefinitionResponse": {
      "type": "object",
      "properties": {
        "model_definition": {
          "$ref": "#/definitions/v1alphaModelDefinition",
          "title": "A model definition instance"
        }
      },
      "title": "GetModelDefinitionResponse represents a response for a model definition"
    },
    "v1alphaGetModelInstanceCardResponse": {
      "type": "object",
      "properties": {
        "readme": {
          "$ref": "#/definitions/v1alphaModelInstanceCard",
          "title": "Retrieved model instance card"
        }
      },
      "title": "GetModelInstanceCardResponse represents a response to fetch a model\ninstance's README card"
    },
    "v1alphaGetModelInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1alphaModelInstance",
          "title": "Retrieved model instance"
        }
      },
      "title": "GetModelInstanceResponse represents a response for a model instance"
    },
    "v1alphaGetModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModel",
          "title": "The retrieved model"
        }
      },
      "title": "GetModelResponse represents a response for a model"
    },
    "v1alphaListModelDefinitionResponse": {
      "type": "object",
      "properties": {
        "model_definitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaModelDefinition"
          },
          "title": "a list of ModelDefinition instances"
        },
        "next_page_token": {
          "type": "string",
          "title": "Next page token"
        },
        "total_size": {
          "type": "string",
          "format": "int64",
          "title": "Total count of model definitions"
        }
      },
      "title": "ListModelDefinitionResponse represents a response to list all supported model\ndefinitions"
    },
    "v1alphaListModelInstanceResponse": {
      "type": "object",
      "properties": {
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaModelInstance"
          },
          "title": "a list of Model instances"
        },
        "next_page_token": {
          "type": "string",
          "title": "Next page token"
        },
        "total_size": {
          "type": "string",
          "format": "int64",
          "title": "Total count of model instances"
        }
      },
      "title": "ListModelInstanceResponse represents a response for a list of model instances"
    },
    "v1alphaListModelResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaModel"
          },
          "title": "a list of Models"
        },
        "next_page_token": {
          "type": "string",
          "title": "Next page token"
        },
        "total_size": {
          "type": "string",
          "format": "int64",
          "title": "Total count of models"
        }
      },
      "title": "ListModelResponse represents a response for a list of models"
    },
    "v1alphaModel": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Resource name. It must have the format of \"models/{model}\".\nFor example: \"models/yolov4\"",
          "readOnly": true
        },
        "uid": {
          "type": "string",
          "title": "Model ID in UUIDv4",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "Resource ID (the last segment of the resource name) used to construct the\nresource name. This conforms to RFC-1034, which restricts to letters,\nnumbers, and hyphen, with the first character a letter, the last a letter\nor a number, and a 63 character maximum."
        },
        "description": {
          "type": "string",
          "title": "Model description"
        },
        "model_definition": {
          "type": "string",
          "title": "Model definition resource name"
        },
        "configuration": {
          "type": "object",
          "title": "Model configuration represents the configuration JSON object that has been\nvalidated using the `model_spec` JSON schema of a ModelDefinition"
        },
        "visibility": {
          "$ref": "#/definitions/ModelVisibility",
          "title": "Model visibility including public or private"
        },
        "user": {
          "type": "string",
          "description": "The resource name of a user, e.g., \"users/local-user\".",
          "readOnly": true
        },
        "org": {
          "type": "string",
          "title": "The resource name of an organization",
          "readOnly": true
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "title": "Model create time",
          "readOnly": true
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "title": "Model update time",
          "readOnly": true
        }
      },
      "title": "Model represents a model"
    },
    "v1alphaModelDefinition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "ModelDefinition resource name. It must have the format of\n\"model-definitions/{model-definition}\"",
          "readOnly": true
        },
        "uid": {
          "type": "string",
          "title": "ModelDefinition ID in UUIDv4",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "ModelDefinition resource ID (the last segment of the resource name) used to\nconstruct the resource name.",
          "readOnly": true
        },
        "title": {
          "type": "string",
          "title": "ModelDefinition display official title",
          "readOnly": true
        },
        "documentation_url": {
          "type": "string",
          "title": "ModelDefinition documentation url",
          "readOnly": true
        },
        "icon": {
          "type": "string",
          "title": "ModelDefinition icon",
          "readOnly": true
        },
        "model_spec": {
          "type": "object",
          "description": "ModelDefinition model specification represents the JSON schema used to\nvalidate the JSON configurations of a model created from a specific model\nsource. Must be a valid JSON that includes what fields are needed to\ncreate/display a model.",
          "readOnly": true
        },
        "model_instance_spec": {
          "type": "object",
          "description": "ModelDefinition model instance specification represents the JSON schema\nused to validate the JSON configurations of a model instance from a\nspecific model source. Must be a valid JSON that includes what fields are\nneeded to display a model instance.",
          "required": [
            "model_instance_spec"
          ]
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "title": "ModelDefinition create time",
          "readOnly": true
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "title": "ModelDefinition update time",
          "readOnly": true
        }
      },
      "title": "/////////////////////////////////////////////////////////////////\nModelDefinition represents the definition of a model",
      "required": [
        "model_instance_spec"
      ]
    },
    "v1alphaModelInstance": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Resource name. It must have the format of\n\"models/{model}/instances/{instance}\"",
          "readOnly": true
        },
        "uid": {
          "type": "string",
          "title": "Model instance ID in UUIDv4",
          "readOnly": true
        },
        "id": {
          "type": "string",
          "description": "Model instance ID (the last segment of the resource name), used to\nconstruct the resource name. This conforms to RFC-1034, which restricts to\nletters, numbers, and hyphen, with the first character a letter, the last a\nletter or a number, and a 63 character maximum.",
          "readOnly": true
        },
        "state": {
          "$ref": "#/definitions/v1alphaModelInstanceState",
          "title": "Model instance state"
        },
        "task": {
          "$ref": "#/definitions/ModelInstanceTask",
          "title": "Model instance task"
        },
        "model_definition": {
          "type": "string",
          "title": "Model definition resource name",
          "readOnly": true
        },
        "configuration": {
          "type": "object",
          "title": "Model instance configuration represents the JSON configuration that has\nbeen validated using the `model_instance_spec` JSON schema of a\nModelDefinition",
          "readOnly": true
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "title": "Model instance create time",
          "readOnly": true
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "title": "Model instance update time",
          "readOnly": true
        }
      },
      "title": "ModelVersion represents one deployable instance of a model"
    },
    "v1alphaModelInstanceCard": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Resource name. It must have the format of\n\"models/{model}/instances/{instance}/readme\"",
          "readOnly": true
        },
        "size": {
          "type": "integer",
          "format": "int32",
          "title": "Size of the file",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "description": "Type of the resource. Fixed to \"file\".",
          "readOnly": true
        },
        "contents": {
          "type": "string",
          "format": "byte",
          "title": "Contents of the README file in bytes and base64 format",
          "readOnly": true
        },
        "encoding": {
          "type": "string",
          "description": "Encoding type of the contents. Fixed to \"base64\".",
          "readOnly": true
        }
      },
      "description": "ModelInstanceCard represents the README card for a model instance. There\nexists one one and exactly one README card per model instance."
    },
    "v1alphaModelInstanceState": {
      "type": "string",
      "enum": [
        "STATE_UNSPECIFIED",
        "STATE_OFFLINE",
        "STATE_ONLINE",
        "STATE_ERROR"
      ],
      "default": "STATE_UNSPECIFIED",
      "description": "- STATE_UNSPECIFIED: State: UNSPECIFIED\n - STATE_OFFLINE: State: OFFLINE\n - STATE_ONLINE: State: ONLINE\n - STATE_ERROR: State: ERROR",
      "title": "State enumerates the lifecycling state of a model instance"
    },
    "v1alphaRenameModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModel",
          "title": "Renamed model"
        }
      },
      "title": "RenameModelResponse represents a response for a model"
    },
    "v1alphaTriggerModelInstanceBinaryFileUploadResponse": {
      "type": "object",
      "properties": {
        "output": {
          "type": "object",
          "title": "Output from a model"
        }
      },
      "title": "TriggerModelInstanceBinaryFileUploadResponse represents a response for the\noutput for triggering a model instance"
    },
    "v1alphaTriggerModelInstanceResponse": {
      "type": "object",
      "properties": {
        "output": {
          "type": "object",
          "title": "Output from a model"
        }
      },
      "title": "TriggerModelInstanceResponse represents a response for the output for\ntriggering a model instance"
    },
    "v1alphaUndeployModelInstanceResponse": {
      "type": "object",
      "properties": {
        "instance": {
          "$ref": "#/definitions/v1alphaModelInstance",
          "title": "Undeployed model instance"
        }
      },
      "title": "UndeployModelInstanceResponse represents a response for a undeployed model\ninstance\nTODO: should use [Long-running operations](https://google.aip.dev/151)"
    },
    "v1alphaUpdateModelResponse": {
      "type": "object",
      "properties": {
        "model": {
          "$ref": "#/definitions/v1alphaModel",
          "title": "The updated model"
        }
      },
      "title": "UpdateModelResponse represents a response for a model"
    }
  }
}
