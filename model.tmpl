from typing import Dict

from google.protobuf import field_mask_pb2

# common
import instill.protogen.common.healthcheck.v1beta.healthcheck_pb2 as healthcheck
import instill.protogen.model.model.v1alpha.model_definition_pb2 as model_definition_interface

# model
import instill.protogen.model.model.v1alpha.model_pb2 as model_interface
import instill.protogen.model.model.v1alpha.model_public_service_pb2_grpc as model_service
from instill.clients.base import Client, RequestFactory
from instill.clients.constant import DEFAULT_INSTANCE
from instill.clients.instance import InstillInstance
from instill.configuration import global_config
from instill.utils.error_handler import grpc_handler


class ModelClient(Client):

{{ range . }}
    @grpc_handler
    def {{ .Method | toSnakeCase }}(
        self,
        {{ range .InputTypes }}{{ .Name | customizeFieldName }}: {{ .Type | typeConvert }},
        {{ end }}async_enabled: bool = False,
    ) -> model_interface.{{ .OutputTypeName }}:
        if async_enabled:
            return RequestFactory(
                method=self.hosts[self.instance].async_client.{{ .Method }},
                request=model_interface.{{ .InputTypeName }}(
                    name=f"{self.namespace}/models/{model_name}"
                ),
                metadata=self.hosts[self.instance].metadata,
            ).send_async()

        return RequestFactory(
            method=self.hosts[self.instance].client.{{ .Method }},
            request=model_interface.{{ .InputTypeName }}(
                name=f"{self.namespace}/models/{model_name}"
            ),
            metadata=self.hosts[self.instance].metadata,
        ).send_sync()
{{ end }}

'''
    @grpc_handler
    def watch_model(
        self,
        model_name: str,
        async_enabled: bool = False,
    ) -> model_interface.WatchUserModelResponse:
        if async_enabled:
            return RequestFactory(
                method=self.hosts[self.instance].async_client.WatchUserModel,
                request=model_interface.WatchUserModelRequest(
                    name=f"{self.namespace}/models/{model_name}"
                ),
                metadata=self.hosts[self.instance].metadata,
            ).send_async()

        return RequestFactory(
            method=self.hosts[self.instance].client.WatchUserModel,
            request=model_interface.WatchUserModelRequest(
                name=f"{self.namespace}/models/{model_name}"
            ),
            metadata=self.hosts[self.instance].metadata,
        ).send_sync()
'''