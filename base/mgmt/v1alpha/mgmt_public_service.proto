syntax = "proto3";

package base.mgmt.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "base/mgmt/v1alpha/mgmt.proto";
import "base/mgmt/v1alpha/metric.proto";

// Mgmt service responds to external access
service MgmtPublicService {
  option (google.api.default_host) = "api.instill.tech";

  // Liveness method receives a LivenessRequest message and returns a
  // LivenessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/mgmt"} ]
    };
  }

  // Readiness method receives a ReadinessRequest message and returns a
  // ReadinessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
      additional_bindings : [ {get : "/v1alpha/ready/mgmt"} ]
    };
  }

  // QueryAuthenticatedUser method receives a QueryAuthenticatedUserRequest
  // message and returns a QueryAuthenticatedUserResponse message.
  rpc QueryAuthenticatedUser(QueryAuthenticatedUserRequest)
      returns (QueryAuthenticatedUserResponse) {
    option (google.api.http) = {
      get : "/v1alpha/users/me"
    };
  }

  // PatchAuthenticatedUser method receives a PatchAuthenticatedUserRequest
  // message and returns a PatchAuthenticatedUserResponse message.
  rpc PatchAuthenticatedUser(PatchAuthenticatedUserRequest)
      returns (PatchAuthenticatedUserResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/users/me"
      body : "user"
    };
    option (google.api.method_signature) = "user,update_mask";
  }

  // ExistUsername method receives a ExistUsernameRequest message and returns a
  // ExistUsernameResponse
  rpc ExistUsername(ExistUsernameRequest) returns (ExistUsernameResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=users/*}/exist"
    };
    option (google.api.method_signature) = "name";
  }

  // CreateToken method receives a CreateTokenRequest message and returns
  // a CreateTokenResponse message.
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
    option (google.api.http) = {
      post : "/v1alpha/tokens"
      body : "token"
    };
    option (google.api.method_signature) = "token";
  }

  // ListTokens method receives a ListTokensRequest message and returns a
  // ListTokensResponse message.
  rpc ListTokens(ListTokensRequest) returns (ListTokensResponse) {
    option (google.api.http) = {
      get : "/v1alpha/tokens"
    };
  }

  // GetToken method receives a GetTokenRequest message and returns a
  // GetTokenResponse message.
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=tokens/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // DeleteToken method receives a DeleteTokenRequest message and returns
  // a DeleteTokenResponse message.
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=tokens/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // ListPipelineTriggerRecords method receives a ListPipelineTriggerRecordsRequest message and returns a
  // ListPipelineTriggerRecordsResponse message.
  rpc ListPipelineTriggerRecords(ListPipelineTriggerRecordsRequest) returns (ListPipelineTriggerRecordsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/metrics/vdp/pipeline/triggers"
    };
  }
}
