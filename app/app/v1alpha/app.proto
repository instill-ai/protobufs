syntax = "proto3";

package app.app.v1alpha;

import "common/healthcheck/v1beta/healthcheck.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

/*
   This API is under development and, therefore, some of its entities and
   endpoints are not implemented yet. This section aims to give context about
   the current interface and how it fits in the App vision.

   # App

   The App domain is responsible of ready-to-use AI applications.
*/

// App represents a app.
message App {
  // The app id.
  string app_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The app description.
  string description = 2 [(google.api.field_behavior) = OPTIONAL];
  // The creation time of the app.
  google.protobuf.Timestamp create_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The last update time of the app.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The owner/namespace of the app.
  string owner_uid = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The app tags.
  repeated string tags = 6 [(google.api.field_behavior) = OPTIONAL];
  // metadata for the app.
  oneof metadata {
    // The AI assistant app metadata.
    AIAssistantAppMetadata ai_assistant_app = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  }
  // The app type.
  AppType app_type = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // app uid
  string app_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creator uid
  string creator_uid = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// AIAssistantAppMetadata represents the metadata for the AI assistant app.
message AIAssistantAppMetadata {
  // The AI assistant app catalog uid.
  string catalog_uid = 1 [(google.api.field_behavior) = REQUIRED];
  // The AI assistant app top k.
  int32 top_k = 2 [(google.api.field_behavior) = REQUIRED];
  // The AI assistant app conversation uid.
  string conversation_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// AppType represents the type of the app.
enum AppType {
  // AppType is not specified.
  APP_TYPE_UNSPECIFIED = 0;
  // AppType is a AI assistant app.
  APP_TYPE_AI_ASSISTANT = 1;
}

// CreateAppRequest represents a request to create a app.
message CreateAppRequest {
  // The app's owner(namespaces).
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The app id.
  // the app id should be lowercase without any space or special character besides the hyphen,
  // it can not start with number or hyphen, and should be less than 32 characters.
  string id = 2 [(google.api.field_behavior) = REQUIRED];
  // The app description.
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  // The app tags.
  repeated string tags = 4 [(google.api.field_behavior) = OPTIONAL];
}

// CreateAppResponse represents a response for creating a app.
message CreateAppResponse {
  // The created app.
  App app = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Request message for ListApps
message ListAppsRequest {
  // User ID for which to list the apps
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetAppsResponse represents a response for getting all apps from users.
message ListAppsResponse {
  // The apps container.
  repeated App apps = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateAppRequest represents a request to update a app.
message UpdateAppRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The app id needs to follow the kebab case format.
  string new_app_id = 3 [(google.api.field_behavior) = OPTIONAL];
  // The app description.
  string new_description = 4 [(google.api.field_behavior) = OPTIONAL];
  // The app tags.
  repeated string new_tags = 5 [(google.api.field_behavior) = OPTIONAL];
  // last AI assistant app catalog uid
  string last_ai_assistant_app_catalog_uid = 6 [(google.api.field_behavior) = OPTIONAL];
  // last AI assistant app top k
  int32 last_ai_assistant_app_top_k = 7 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateAppResponse represents a response for updating a app.
message UpdateAppResponse {
  // The updated app.
  App app = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteAppRequest represents a request to delete a app.
message DeleteAppRequest {
  // The owner's id. i.e. namespace.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The app id.
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteAppResponse represents a response for deleting a app.
message DeleteAppResponse {}

// UpdateAIAssistantAppPlaygroundRequest represents a request to update an AI
// assistant app playground.
// After the update, the app's metadata will be updated with the last AI
// assistant app uses catalog UID, top k, and conversation UID.
message UpdateAIAssistantAppPlaygroundRequest {
  // The namespace id.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The app id.
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The last AI app uses catalog uid.
  string last_ai_app_catalog_uid = 3 [(google.api.field_behavior) = OPTIONAL];
  // The last AI app uses top k.
  int32 last_ai_app_top_k = 4 [(google.api.field_behavior) = OPTIONAL];
  // The last AI app uses conversation uid.
  string last_ai_app_conversation_uid = 5 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateAIAssistantAppPlaygroundResponse represents a response for updating a
// AI assistant app playground.
message UpdateAIAssistantAppPlaygroundResponse {}


// RestartPlaygroundConversationRequest represents a request to restart a playground conversation.
message RestartPlaygroundConversationRequest {
  // The namespace id.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The app id.
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// RestartPlaygroundConversationResponse represents a response for restarting a playground conversation.
message RestartPlaygroundConversationResponse {
  // Conversation uid
  string conversation_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Conversation id. this is generated by the server.
  string conversation_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetPlaygroundConversationRequest represents a request to get a playground conversation.
message GetPlaygroundConversationRequest {
  // The namespace id.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The app id.
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetPlaygroundConversationResponse represents a response for getting a playground conversation.
message GetPlaygroundConversationResponse {
  // The conversation uid.
  string conversation_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The conversation id.
  string conversation_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}
