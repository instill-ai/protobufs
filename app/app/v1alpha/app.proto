syntax = "proto3";

package app.app.v1alpha;

import "common/healthcheck/v1beta/healthcheck.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

/*

   This API is under development and, therefore, some of its entities and
   endpoints are not implemented yet. This section aims to give context about the
   current interface and how it fits in the App vision.

   # App

   The App domain is responsible of storing data that will later be used for
   processing unstructured data. App will support the following types of
   data:

   - Repositories
   - Objects
   - Vectors

   ## Repositories

   An implementation of the [OCI Distribution Specification](https://github.com/opencontainers/distribution-spec?tab=readme-ov-file)
   is used to manage versioned content. The main use for repositories is storing
   container images that can be used to deploy AI models or VDP pipelines.

   The ID of a repository has 2 segments, the owner (an Instill user or
   organization) and the content ID (the AI model or pipeline ID), e.g.
   `curious-wombat/llava-34b`.

   ## Objects

   Raw data is stored in binary blobs. Object storage allows users to upload data
   (e.g. images, audio) that can be used by pipelines or to store the results or a
   pipeline trigger.

   ## Vectors

   Vector embeddings have their own storage, which allows fast retrieval and similarity search.

*/



// App represents a catalog.
message App {
  // The catalog id.
  string app_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog name.
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  // The catalog description.
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  // The creation time of the catalog.
  string create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The last update time of the catalog.
  string update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The owner/namespace of the catalog.
  string owner_name = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The catalog tags.
  repeated string tags = 8 [(google.api.field_behavior) = OPTIONAL];
}

// CreateAppRequest represents a request to create a catalog.
message CreateAppRequest {
  // The catalog's owner(namespaces).
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog name.
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  // The catalog description.
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  // The catalog tags.
  repeated string tags = 4 [(google.api.field_behavior) = OPTIONAL];
}

// CreateAppResponse represents a response for creating a catalog.
message CreateAppResponse {
  // The created catalog.
  App catalog = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Request message for ListApps
message ListAppsRequest {
  // User ID for which to list the catalogs
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetAppsResponse represents a response for getting all catalogs from users.
message ListAppsResponse {
  // The catalogs container.
  repeated App catalogs = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateAppRequest represents a request to update a catalog.
message UpdateAppRequest {
  // The catalog id.
  string app_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog description.
  string description = 2 [(google.api.field_behavior) = OPTIONAL];
  // The catalog tags.
  repeated string tags = 3 [(google.api.field_behavior) = OPTIONAL];
  // The catalog owner(namespace).
  string namespace_id = 4 [(google.api.field_behavior) = REQUIRED];
}

// UpdateAppResponse represents a response for updating a catalog.
message UpdateAppResponse {
  // The updated catalog.
  App catalog = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteAppRequest represents a request to delete a catalog.
message DeleteAppRequest {
  // The owner's id. i.e. namespace.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog id.
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteAppResponse represents a response for deleting a catalog.
message DeleteAppResponse {
  // The catalog identifier.
  App catalog = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// file embedding process status
enum FileProcessStatus {
  // UNSPECIFIED
  FILE_PROCESS_STATUS_UNSPECIFIED = 0;
  // NOTSTARTED
  FILE_PROCESS_STATUS_NOTSTARTED = 1;
  // file is waiting for embedding process
  FILE_PROCESS_STATUS_WAITING = 2;
  // file is converting
  FILE_PROCESS_STATUS_CONVERTING = 3;
  // file is chunking
  FILE_PROCESS_STATUS_CHUNKING = 4;
  // file is embedding
  FILE_PROCESS_STATUS_EMBEDDING = 5;
  // completed
  FILE_PROCESS_STATUS_COMPLETED = 6;
  // failed
  FILE_PROCESS_STATUS_FAILED = 7;
}

// file type
enum FileType {
  // unspecified
  FILE_TYPE_UNSPECIFIED = 0;
  // text
  FILE_TYPE_TEXT = 1;
  // PDF
  FILE_TYPE_PDF = 2;
  //MARKDOWN
  FILE_TYPE_MARKDOWN = 3;
  // PNG(not supported yet)
  FILE_TYPE_PNG = 4;
  // JPEG(not supported yet)
  FILE_TYPE_JPEG = 5;
  // JPG(not supported yet)
  FILE_TYPE_JPG = 6;
  // HTML
  FILE_TYPE_HTML = 7;
  // DOCX
  FILE_TYPE_DOCX = 8;
  // DOC
  FILE_TYPE_DOC = 9;
  // PPT
  FILE_TYPE_PPT = 10;
  // PPTX
  FILE_TYPE_PPTX = 11;
  // XLS(not supported yet)
  FILE_TYPE_XLS = 12;
  // XLSX
  FILE_TYPE_XLSX = 13;
}

// file
message File {
  // file uid
  string file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file name
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  // file type
  FileType type = 3 [(google.api.field_behavior) = REQUIRED];
  // file process status
  FileProcessStatus process_status = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file process message
  string process_outcome = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // retrievable(this is reserved for future use)
  bool retrievable = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content(this is reserved for future use)
  string content = 7 [(google.api.field_behavior) = OPTIONAL];
  // owner/namespace uid
  string owner_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creator uid from authn token
  string creator_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // catalog uid
  string catalog_uid = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // create time
  google.protobuf.Timestamp create_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time
  google.protobuf.Timestamp update_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  // delete time
  google.protobuf.Timestamp delete_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file size in bytes
  int64 size = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total chunks
  int32 total_chunks = 15 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total tokens
  int32 total_tokens = 16 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// upload file request
message UploadAppFileRequest {
  // owner/namespace uid
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // file
  File file = 3;
}

// upload file response
message UploadAppFileResponse {
  // file
  File file = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// delete file request
message DeleteAppFileRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// delete file response
message DeleteAppFileResponse {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Process App File Request
message ProcessAppFilesRequest {
  // The file uid.
  repeated string file_uids = 1 [(google.api.field_behavior) = REQUIRED];
}

// Process App File Response
message ProcessAppFilesResponse {
  // The file uid.
  repeated File files = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// list file filter
// todo: support more parameters
message ListAppFilesFilter {
  // The file uids.
  repeated string file_uids = 2 [(google.api.field_behavior) = OPTIONAL];
}

// list files request
message ListAppFilesRequest {
  // The owner/namespace uid id.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog id.
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The page size (default:10; max 100).
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // The next page token(default from first file's token).
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // The filter.
  ListAppFilesFilter filter = 5 [(google.api.field_behavior) = OPTIONAL];
}

// list files response
message ListAppFilesResponse {
  // The list of files.
  repeated File files = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The total number of files.
  int32 total_size = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The requested page size.
  int32 page_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The filter.
  ListAppFilesFilter filter = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}
