syntax = "proto3";

package app.app.v1alpha;

// App definitions
import "app/app/v1alpha/app.proto";
import "app/app/v1alpha/conversation.proto";
// Google API
import "google/api/annotations.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";

// AppPublicService exposes the public endpoints that allow clients to
// manage apps.
service AppPublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public App endpoints"};

  // Check if the app server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__liveness"
      additional_bindings: [
        {get: "/v1alpha/health/app"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the app server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__readiness"
      additional_bindings: [
        {get: "/v1alpha/ready/app"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Create an app
  //
  // Creates an app.
  rpc CreateApp(CreateAppRequest) returns (CreateAppResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/apps"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // List all apps info
  //
  // Returns a paginated list of apps.
  rpc ListApps(ListAppsRequest) returns (ListAppsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/apps"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Update a app info
  //
  // Updates the information of an app.
  rpc UpdateApp(UpdateAppRequest) returns (UpdateAppResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Delete a app
  //
  // Deletes an app.
  rpc DeleteApp(DeleteAppRequest) returns (DeleteAppResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Create a conversation
  //
  // Creates a conversation.
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // List conversations
  //
  // Returns a paginated list of conversations.
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Update a conversation
  //
  // Updates a conversation.
  rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations/{conversation_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Delete a conversation
  //
  // Deletes a conversation.
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations/{conversation_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Create a message
  //
  // Creates a message.
  rpc CreateMessage(CreateMessageRequest) returns (CreateMessageResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations/{conversation_id}/messages"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // List messages
  //
  // Returns a paginated list of messages.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations/{conversation_id}/messages"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Update a message
  //
  // Updates a message.
  rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations/{conversation_id}/messages/{message_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Delete a message
  //
  // Deletes a message.
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/conversations/{conversation_id}/messages/{message_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Get Playground Conversation
  //
  // Returns the latest conversation of auth user(e.g. login user and api key user).
  rpc GetPlaygroundConversation(GetPlaygroundConversationRequest) returns (GetPlaygroundConversationResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/ai_assistant_playground/conversation"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Restart Playground Conversation
  //
  // Creates a new conversation and uses the auth user UID as creator UID and
  // auto-generates a new conversation ID on the behalf of auth user.
  rpc RestartPlaygroundConversation(RestartPlaygroundConversationRequest) returns (RestartPlaygroundConversationResponse) {
    option (google.api.http) = {post: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/ai_assistant_playground/restart"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }

  // Chat
  //
  // Chat sends a message asynchronously and streams back the response.
  // This method is intended for real-time conversation with a chatbot
  // and the response needs to be processed incrementally.
  rpc Chat(ChatRequest) returns (ChatResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/apps/{app_id}/chat"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "üçé App"};
  }
}
