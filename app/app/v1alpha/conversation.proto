syntax = "proto3";

package app.app.v1alpha;

// agent definitions
import "app/app/v1alpha/agent.proto";
// Artifact definitions
import "artifact/artifact/v1alpha/chunk.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// Conversation represents a chat conversation
message Conversation {
  // unique identifier of the conversation created by the system
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // namespace id
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 3 [(google.api.field_behavior) = REQUIRED];
  // conversation id/name
  string id = 4 [(google.api.field_behavior) = REQUIRED];
  // last used catalog uid
  optional string last_used_catalog_uid = 5 [(google.api.field_behavior) = OPTIONAL];
  // last used top k
  optional uint32 last_used_top_k = 6 [(google.api.field_behavior) = OPTIONAL];
  // creation time of the conversation
  google.protobuf.Timestamp create_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the conversation
  google.protobuf.Timestamp update_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Chat represents a chat
message Chat {
  // unique identifier of the conversation created by the system
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // namespace id
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // last used catalog uid
  optional string last_used_catalog_uid = 4 [(google.api.field_behavior) = OPTIONAL];
  // last used top k
  optional uint32 last_used_top_k = 5 [(google.api.field_behavior) = OPTIONAL];
  // creation time of the chat
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the chat
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // agent metadata
  AIAgentAppMetadata ai_agent_metadata = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // temp catalog id automatically created for ai agent app
  optional string temp_catalog_id = 9 [(google.api.field_behavior) = OPTIONAL];
  // conversation display name
  string chat_display_name = 10 [(google.api.field_behavior) = OPTIONAL];
  // breakpoint. allow to continue the chat from breakpoint
  string breakpoint = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatWith enum
// enum ChatWith {
//   // unspecified
//   CHAT_WITH_UNSPECIFIED = 0;
//   // chat with ai assistant(default)
//   CHAT_WITH_AI_ASSISTANT = 1;
//   // chat with ai agent
//   CHAT_WITH_AI_AGENT = 2;
// }

// type of the citations message
enum CitationsType {
  // Unspecified citation type
  CITATIONS_TYPE_UNSPECIFIED = 0;
  // Chunk-based citation
  CITATIONS_TYPE_CHUNK = 1;
  // URL-based citation
  CITATIONS_TYPE_URL = 2;
}

// Citation message
message Citation {
  // Type of citation
  CitationsType type = 1;
  // Name of the citation
  string name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // URL of the citation (only applicable for URL-type citations)
  optional string url = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Chunk UID (only applicable for chunk-type citations)
  optional string chunk_uid = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File UID (only applicable for chunk-type citations)
  optional string file_uid = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Message represents a single message in a conversation
message Message {
  // message type
  enum MessageType {
    // unspecified
    MESSAGE_TYPE_UNSPECIFIED = 0;
    // text
    MESSAGE_TYPE_TEXT = 1;
  }
  // message uid
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // app uid(deprecated)
  string app_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // conversation uid
  string conversation_uid = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message content
  string content = 4 [(google.api.field_behavior) = REQUIRED];
  // message role e.g., "user" or "assistant" or "agent"
  string role = 5 [(google.api.field_behavior) = REQUIRED];
  // message type
  MessageType type = 6 [(google.api.field_behavior) = REQUIRED];
  // creation time of the message
  google.protobuf.Timestamp create_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the message
  google.protobuf.Timestamp update_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender uid(only for user messages)
  string msg_sender_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // standalone question(only for user messages)
  string standalone_question = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // citations(only for agent messages)
  repeated Citation citations = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateConversationRequest is used to create a new conversation
message CreateConversationRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id. only allow kebab case
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// CreateConversationResponse returns the created conversation
message CreateConversationResponse {
  // conversation
  Conversation conversation = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateChatRequest is used to create a new chat
message CreateChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat display name
  string chat_display_name = 2 [(google.api.field_behavior) = OPTIONAL];
  // agent settings
  AIAgentSettings ai_agent_settings = 4 [(google.api.field_behavior) = OPTIONAL];
}

// CreateChatResponse returns the created chat
message CreateChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListConversationsRequest is used to list conversations
message ListConversationsRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // page token
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // conversation_uid this is optional, if provided, only the conversation with the given conversation_uid will be returned
  // first check conversation_uid, then check conversation_id, then check if_all
  string conversation_uid = 5 [(google.api.field_behavior) = OPTIONAL];
  // conversation_id this is optional, if provided, only the conversation with the given conversation_id will be returned
  string conversation_id = 6 [(google.api.field_behavior) = OPTIONAL];
  // If true, all conversations will be returned. This has higher priority over conversation_id, page_size, and page_token.
  bool if_all = 7 [(google.api.field_behavior) = OPTIONAL];
}

// ListConversationsResponse returns a list of conversations
message ListConversationsResponse {
  // conversations
  repeated Conversation conversations = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListChatsRequest is used to list chats
message ListChatsRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
  // page token
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
  // if true, all chats will be returned. This has higher priority over page_size and page_token.
  bool if_all = 4 [(google.api.field_behavior) = OPTIONAL];
  // chat_uid this is optional, if provided, only the chat with the given chat_uid will be returned
  // first check chat_uid then check if_all
  string chat_uid = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListChatsResponse returns a list of chats
message ListChatsResponse {
  // chats
  repeated Chat chats = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateConversationRequest is used to update a conversation
message UpdateConversationRequest {
  // namespace id
  string namespace_id = 1;
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
  // new conversation id
  optional string new_conversation_id = 4 [(google.api.field_behavior) = OPTIONAL];
  // last used catalog uid(only for ai assistant app)
  optional string last_used_catalog_uid = 5 [(google.api.field_behavior) = OPTIONAL];
  // last used top k(only for ai assistant app)
  optional uint32 last_used_top_k = 6 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateConversationResponse returns the updated conversation
message UpdateConversationResponse {
  // conversation
  Conversation conversation = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateChatRequest is used to update a chat
message UpdateChatRequest {
  // namespace id
  string namespace_id = 1;
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // chat display name
  string chat_display_name = 3 [(google.api.field_behavior) = OPTIONAL];
  // ai agent settings
  AIAgentSettings ai_agent_settings = 4 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateChatResponse returns the updated chat
message UpdateChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteConversationRequest is used to delete a conversation
message DeleteConversationRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// DeleteConversationResponse is empty as no content needs to be returned
message DeleteConversationResponse {}

// DeleteChatRequest is used to delete a chat
message DeleteChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteChatResponse is empty as no content needs to be returned
message DeleteChatResponse {}

// CreateMessageRequest is used to create a new message
message CreateMessageRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
  // message content
  string content = 4 [(google.api.field_behavior) = REQUIRED];
  // message role
  string role = 5 [(google.api.field_behavior) = REQUIRED];
  // message type
  Message.MessageType type = 6 [(google.api.field_behavior) = REQUIRED];
}

// CreateMessageResponse returns the created message
message CreateMessageResponse {
  // message
  Message message = 1;
}

// MessageSenderProfile describes the public data of a message sender.
// refer to core.mgmt.v1beta.UserProfile for more details.
message MessageSenderProfile {
  // sender uid
  string msg_sender_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // sender id
  string msg_sender_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Display name.
  optional string display_name = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Avatar url. this url might be expired or not exist.
  optional string avatar = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListMessagesRequest is used to list messages in a conversation
message ListMessagesRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
  // latest k messages
  int32 latest_k = 4 [(google.api.field_behavior) = OPTIONAL];
  // page size
  int32 page_size = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // page token
  string page_token = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // include system messages
  bool include_system_messages = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // If true, all messages will be returned. This has higher priority over latest_k, page_size, and page_token.
  bool if_all = 8 [(google.api.field_behavior) = OPTIONAL];
  // message_uid this is optional, if provided, only the message with the given message_uid will be returned
  string message_uid = 9 [(google.api.field_behavior) = OPTIONAL];
}

// ListMessagesResponse returns a list of messages
message ListMessagesResponse {
  // messages
  repeated Message messages = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender profiles
  repeated MessageSenderProfile sender_profiles = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateMessageRequest is used to update a message
message UpdateMessageRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
  // message uid
  string message_uid = 4 [(google.api.field_behavior) = REQUIRED];
  // new message content
  string content = 5 [(google.api.field_behavior) = REQUIRED];
}

// UpdateMessageResponse returns the updated message
message UpdateMessageResponse {
  // message
  Message message = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteMessageRequest is used to delete a message
message DeleteMessageRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // app id
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation id
  string conversation_id = 3 [(google.api.field_behavior) = REQUIRED];
  // message uid
  string message_uid = 4 [(google.api.field_behavior) = REQUIRED];
}

// DeleteMessageResponse is empty as no content needs to be returned
message DeleteMessageResponse {}

// ListChatMessagesRequest is used to list messages in a chat
message ListChatMessagesRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // page token
  string page_token = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // If true, all messages will be returned. This has higher priority over page_size and page_token.
  bool if_all = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListChatMessagesResponse returns a list of messages
message ListChatMessagesResponse {
  // messages
  repeated Message messages = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatRequest represents a request to send a message
// to a chatbot synchronously and streams back the results.
message ChatRequest {
  // Namespace ID
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // App ID
  string app_id = 2 [(google.api.field_behavior) = REQUIRED];
  // Catalog ID
  string catalog_id = 3 [(google.api.field_behavior) = REQUIRED];
  // Conversation UID
  string conversation_uid = 4 [(google.api.field_behavior) = REQUIRED];
  // User message
  string message = 5 [(google.api.field_behavior) = REQUIRED];
  // top k, defaults to 5
  optional uint32 top_k = 6;
  // LLM model name, defaults to `gpt-4o`
  optional string llm_model = 7;
  // Instruction for the model to follow, defaults to `Please answer user question accurately and in the same language as the Follow-up Question.`
  optional string user_instruction = 8;
}

// ChatResponse contains the chatbot response.
message ChatResponse {
  // Conversation responses.
  repeated google.protobuf.Struct outputs = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Reference chunks
  repeated artifact.artifact.v1alpha.SimilarityChunk chunks = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}
