syntax = "proto3";

package app.app.v1alpha;

// Google API
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

// Agent represents a agent.
message Agent {
  // agent uid
  string agent_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // agent display name
  string display_name = 2 [(google.api.field_behavior) = REQUIRED];
  // agent description
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  // namespace uid
  string namespace_uid = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // agent tags
  repeated string tags = 5 [(google.api.field_behavior) = OPTIONAL];
  // agent metadata
  AIAgentAppMetadata ai_agent_metadata = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creator uid
  string creator_uid = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creation time
  google.protobuf.Timestamp create_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // last update time
  google.protobuf.Timestamp update_time = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// AIAgentAppMetadata represents the metadata for the AI agent app.
message AIAgentAppMetadata {
  // instructions
  string instructions = 1 [(google.api.field_behavior) = OPTIONAL];
  // tools(pipelines)
  repeated Tool tools = 2 [(google.api.field_behavior) = OPTIONAL];
  // catalog uids
  repeated string catalog_uids = 3 [(google.api.field_behavior) = OPTIONAL];
  // AI agent app top k
  int32 chunk_top_k = 4 [(google.api.field_behavior) = OPTIONAL];
  // AI agent chunk weight
  float chunk_weight = 5 [(google.api.field_behavior) = OPTIONAL];
  // connection key(used connection id in recipe) and value(connection uid from namespace).
  map<string, string> connections = 6 [(google.api.field_behavior) = OPTIONAL];
}

// AIAgentSettings represents the settings for the AI agent.
message AIAgentSettings {
  // instructions
  string instructions = 1 [(google.api.field_behavior) = OPTIONAL];
  // catalog uids
  repeated string catalog_uids = 2 [(google.api.field_behavior) = OPTIONAL];
  // connection key(used connection id in recipe) and value(connection uid from namespace).
  map<string, string> connections = 3 [(google.api.field_behavior) = OPTIONAL];
  // tool ids (pipeline ids) that this agent can use. e.g. "preset/web-search", "preset/google-search"
  repeated string tool_ids = 4 [(google.api.field_behavior) = OPTIONAL];
}

// tool definitions
message Tool {
  // The pipeline id of the tool. e.g. "preset/xxx-search"
  string pipeline_id = 1 [(google.api.field_behavior) = OPTIONAL];
  // The tool name.
  optional string name = 2 [(google.api.field_behavior) = OPTIONAL];
  // The tool connection key(used connection id in recipe) and value(connection uid from namespace).
  map<string, string> connections = 3 [(google.api.field_behavior) = OPTIONAL];
  // The tool description.
  string description = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateAgentRequest represents a request to create a agent.
message CreateAgentRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // agent display name
  string display_name = 2 [(google.api.field_behavior) = OPTIONAL];
  // agent description
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  // agent tags
  repeated string tags = 4 [(google.api.field_behavior) = OPTIONAL];
  // agent metadata
  AIAgentSettings ai_agent_settings = 5 [(google.api.field_behavior) = OPTIONAL];
}

// CreateAgentResponse represents a response for creating a agent.
message CreateAgentResponse {
  // created agent
  Agent agent = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListAgentsRequest represents a request to list agents.
message ListAgentsRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListAgentsResponse represents a response for listing agents.
message ListAgentsResponse {
  // agents
  repeated Agent agents = 1;
}

// UpdateAgentRequest represents a request to update a agent.
message UpdateAgentRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // agent uid
  string agent_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // agent display name
  string display_name = 3 [(google.api.field_behavior) = OPTIONAL];
  // agent description
  string description = 4 [(google.api.field_behavior) = OPTIONAL];
  // agent tags
  repeated string tags = 5 [(google.api.field_behavior) = OPTIONAL];
  // agent settings
  AIAgentSettings ai_agent_settings = 6 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateAgentResponse represents a response for updating a agent.
message UpdateAgentResponse {
  // updated agent
  Agent agent = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteAgentRequest represents a request to delete a agent.
message DeleteAgentRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // agent uid
  string agent_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteAgentResponse represents a response for deleting a agent.
message DeleteAgentResponse {}

// ListToolsRequest represents a request to list tools.
message ListToolsRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListToolsResponse represents a response for listing tools.
message ListToolsResponse {
  // tools
  repeated Tool tools = 1;
}
