syntax = "proto3";

package artifact.artifact.v1alpha;

// Artifact definitions
import "artifact/artifact/v1alpha/artifact.proto";
import "artifact/artifact/v1alpha/chunk.proto";
import "artifact/artifact/v1alpha/file_catalog.proto";
import "artifact/artifact/v1alpha/qa.proto";
// Google API
import "google/api/annotations.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";

// ArtifactPublicService exposes the public endpoints that allow clients to
// manage artifacts.
service ArtifactPublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public Artifact endpoints"};

  // Check if the artifact server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__liveness"
      additional_bindings: [
        {get: "/v1alpha/health/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the artifact server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__readiness"
      additional_bindings: [
        {get: "/v1alpha/ready/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // TODO improve public endpoint definitions with title and description.

  // Create a catalog
  rpc CreateCatalog(CreateCatalogRequest) returns (CreateCatalogResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Get all catalogs info
  rpc ListCatalogs(ListCatalogsRequest) returns (ListCatalogsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Update a catalog info
  rpc UpdateCatalog(UpdateCatalogRequest) returns (UpdateCatalogResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Delete a catalog
  rpc DeleteCatalog(DeleteCatalogRequest) returns (DeleteCatalogResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Create a file
  rpc UploadCatalogFile(UploadCatalogFileRequest) returns (UploadCatalogFileResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files"
      body: "file"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Delete a file
  rpc DeleteCatalogFile(DeleteCatalogFileRequest) returns (DeleteCatalogFileResponse) {
    option (google.api.http) = {delete: "/v1alpha/catalogs/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Process catalog files
  rpc ProcessCatalogFiles(ProcessCatalogFilesRequest) returns (ProcessCatalogFilesResponse) {
    option (google.api.http) = {
      post: "/v1alpha/catalogs/files/processAsync"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Catalog"
      parameters: {
        headers: {
          name: "Instill-Requester-Uid"
          description: "Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to"
          type: STRING
        }
      }
    };
  }

  // List catalog files
  rpc ListCatalogFiles(ListCatalogFilesRequest) returns (ListCatalogFilesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // List catalog chunks
  rpc ListChunks(ListChunksRequest) returns (ListChunksResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/chunks"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Get catalog single-source-of-truth file
  rpc GetSourceFile(GetSourceFileRequest) returns (GetSourceFileResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files/{file_uid}/source"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Update catalog chunk
  rpc UpdateChunk(UpdateChunkRequest) returns (UpdateChunkResponse) {
    option (google.api.http) = {
      post: "/v1alpha/chunks/{chunk_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Retrieve similar chunks
  rpc SimilarityChunksSearch(SimilarityChunksSearchRequest) returns (SimilarityChunksSearchResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/chunks/retrieve"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Catalog"
      parameters: {
        headers: {
          name: "Instill-Requester-Uid"
          description: "Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to"
          type: STRING
        }
      }
    };
  }

  // Ask a question
  rpc QuestionAnswering(QuestionAnsweringRequest) returns (QuestionAnsweringResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/ask"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Catalog"
      parameters: {
        headers: {
          name: "Instill-Requester-Uid"
          description: "Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to"
          type: STRING
        }
      }
    };
  }

  // Get file catalog
  rpc GetFileCatalog(GetFileCatalogRequest) returns (GetFileCatalogResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // List Catalog Runs
  rpc ListCatalogRuns(ListCatalogRunsRequest) returns (ListCatalogRunsResponse) {
    option (google.api.http) = {get: "/v1beta/namespaces/{namespace_id}/catalogs/{catalog_id}/runs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
}
