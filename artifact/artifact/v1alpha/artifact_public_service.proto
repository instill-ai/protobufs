syntax = "proto3";

package artifact.artifact.v1alpha;

// Artifact definitions
import "artifact/artifact/v1alpha/artifact.proto";
import "artifact/artifact/v1alpha/chunk.proto";
import "artifact/artifact/v1alpha/file_catalog.proto";
import "artifact/artifact/v1alpha/qa.proto";
import "artifact/artifact/v1alpha/conversation.proto";

// Google API
import "google/api/annotations.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";

// ArtifactPublicService exposes the public endpoints that allow clients to
// manage artifacts.
service ArtifactPublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public Artifact endpoints"};

  // Check if the artifact server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__liveness"
      additional_bindings: [
        {get: "/v1alpha/health/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the artifact server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__readiness"
      additional_bindings: [
        {get: "/v1alpha/ready/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Create a catalog
  rpc CreateCatalog(CreateCatalogRequest) returns (CreateCatalogResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Get all catalogs info
  rpc ListCatalogs(ListCatalogsRequest) returns (ListCatalogsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Update a catalog info
  rpc UpdateCatalog(UpdateCatalogRequest) returns (UpdateCatalogResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Delete a catalog
  rpc DeleteCatalog(DeleteCatalogRequest) returns (DeleteCatalogResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Create a file
  rpc UploadCatalogFile(UploadCatalogFileRequest) returns (UploadCatalogFileResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files"
      body: "file"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Delete a file
  rpc DeleteCatalogFile(DeleteCatalogFileRequest) returns (DeleteCatalogFileResponse) {
    option (google.api.http) = {delete: "/v1alpha/catalogs/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // process file
  rpc ProcessCatalogFiles(ProcessCatalogFilesRequest) returns (ProcessCatalogFilesResponse) {
    option (google.api.http) = {
      post: "/v1alpha/catalogs/files/processAsync"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // list files
  rpc ListCatalogFiles(ListCatalogFilesRequest) returns (ListCatalogFilesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // List chunks
  rpc ListChunks(ListChunksRequest) returns (ListChunksResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/chunks"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Get source file
  rpc GetSourceFile(GetSourceFileRequest) returns (GetSourceFileResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files/{file_uid}/source"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Update chunk
  rpc UpdateChunk(UpdateChunkRequest) returns (UpdateChunkResponse) {
    option (google.api.http) = {
      post: "/v1alpha/chunks/{chunk_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Similarity chunks search
  rpc SimilarityChunksSearch(SimilarityChunksSearchRequest) returns (SimilarityChunksSearchResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/chunks/retrieve"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Question Answering
  rpc QuestionAnswering(QuestionAnsweringRequest) returns (QuestionAnsweringResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/ask"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // Get file catalog
  rpc GetFileCatalog(GetFileCatalogRequest) returns (GetFileCatalogResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/file-catalog"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

  // CreateConversation
  rpc CreateConversation(CreateConversationRequest) returns (CreateConversationResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // ListConversations
  rpc ListConversations(ListConversationsRequest) returns (ListConversationsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // UpdateConversation
  rpc UpdateConversation(UpdateConversationRequest) returns (UpdateConversationResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations/{conversation_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // DeleteConversation
  rpc DeleteConversation(DeleteConversationRequest) returns (DeleteConversationResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations/{conversation_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // CreateMessage
  rpc CreateMessage(CreateMessageRequest) returns (CreateMessageResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations/{conversation_id}/messages"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // ListMessages
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations/{conversation_id}/messages"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // UpdateMessage
  rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations/{conversation_id}/messages/{message_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }
  // DeleteMessage
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/conversations/{conversation_id}/messages/{message_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "Catalog"};
  }

}
