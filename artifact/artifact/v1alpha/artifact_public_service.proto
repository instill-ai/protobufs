syntax = "proto3";

package artifact.artifact.v1alpha;

// Artifact definitions
import "artifact/artifact/v1alpha/artifact.proto";
// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";

// ArtifactPublicService exposes the public endpoints that allow clients to
// manage artifacts.
service ArtifactPublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public Artifact endpoints"};

  // Check if the artifact server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__liveness"
      additional_bindings: [
        {get: "/v1alpha/health/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the artifact server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__readiness"
      additional_bindings: [
        {get: "/v1alpha/ready/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Create a knowledge base
  rpc CreateKnowledgeBase(CreateKnowledgeBaseRequest) returns (CreateKnowledgeBaseResponse) {
    option (google.api.http) = {
      post: "/v1alpha/owners/{owner_id}/knowledge-bases"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // Get all knowledge bases info
  rpc ListKnowledgeBases(ListKnowledgeBasesRequest) returns (ListKnowledgeBasesResponse) {
    option (google.api.http) = {get: "/v1alpha/owners/{owner_id}/knowledge-bases"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // Update a knowledge base info
  rpc UpdateKnowledgeBase(UpdateKnowledgeBaseRequest) returns (UpdateKnowledgeBaseResponse) {
    option (google.api.http) = {
      put: "/v1alpha/owners/{owner_id}/knowledge-bases/{kb_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // Delete a knowledge base
  rpc DeleteKnowledgeBase(DeleteKnowledgeBaseRequest) returns (DeleteKnowledgeBaseResponse) {
    option (google.api.http) = {delete: "/v1alpha/owners/{owner_id}/knowledge-bases/{kb_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // Create a file
  rpc UploadKnowledgeBaseFile(UploadKnowledgeBaseFileRequest) returns (UploadKnowledgeBaseFileResponse) {
    option (google.api.http) = {
      post: "/v1alpha/owners/{owner_id}/knowledge-bases/{kb_id}/files"
      body: "file"
    };
    option (google.api.method_signature) = "owner_id,kb_id,file";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // Delete a file
  rpc DeleteKnowledgeBaseFile(DeleteKnowledgeBaseFileRequest) returns (DeleteKnowledgeBaseFileResponse) {
    option (google.api.http) = {delete: "/v1alpha/knowledge-bases/files"};
    option (google.api.method_signature) = "file_uid";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // process file
  rpc ProcessKnowledgeBaseFiles(ProcessKnowledgeBaseFilesRequest) returns (ProcessKnowledgeBaseFilesResponse) {
    option (google.api.http) = {
      post: "/v1alpha/knowledge-bases/files/processAsync"
      body: "*"
    };
    option (google.api.method_signature) = "file_uids";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }

  // list files
  rpc ListKnowledgeBaseFiles(ListKnowledgeBaseFilesRequest) returns (ListKnowledgeBaseFilesResponse) {
    option (google.api.http) = {get: "/v1alpha/owners/{owner_id}/knowledge-bases/{kb_id}/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {tags: "KnowledgeBase"};
  }
}
