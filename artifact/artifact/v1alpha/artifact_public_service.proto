syntax = "proto3";

package artifact.artifact.v1alpha;

// Artifact definitions
import "artifact/artifact/v1alpha/artifact.proto";
import "artifact/artifact/v1alpha/chunk.proto";
import "artifact/artifact/v1alpha/file_catalog.proto";
import "artifact/artifact/v1alpha/object.proto";
import "artifact/artifact/v1alpha/qa.proto";
// Google API
import "google/api/annotations.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";

// ArtifactPublicService exposes the public endpoints that allow clients to
// manage artifacts.
service ArtifactPublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public Artifact endpoints"};

  // Check if the artifact server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__liveness"
      additional_bindings: [
        {get: "/v1alpha/health/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the artifact server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__readiness"
      additional_bindings: [
        {get: "/v1alpha/ready/artifact"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Create a catalog
  //
  // Creates a catalog.
  rpc CreateCatalog(CreateCatalogRequest) returns (CreateCatalogResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get all catalogs info
  //
  // Returns a paginated list of catalogs.
  rpc ListCatalogs(ListCatalogsRequest) returns (ListCatalogsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update a catalog info
  //
  // Updates the information of a catalog.
  rpc UpdateCatalog(UpdateCatalogRequest) returns (UpdateCatalogResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete a catalog
  //
  // Deletes a catalog.
  rpc DeleteCatalog(DeleteCatalogRequest) returns (DeleteCatalogResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Create a file
  //
  // Creates a file.
  rpc UploadCatalogFile(UploadCatalogFileRequest) returns (UploadCatalogFileResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files"
      body: "file"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete a file
  //
  // Deletes a file.
  rpc DeleteCatalogFile(DeleteCatalogFileRequest) returns (DeleteCatalogFileResponse) {
    option (google.api.http) = {delete: "/v1alpha/catalogs/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Process catalog files
  //
  // Processes catalog files.
  rpc ProcessCatalogFiles(ProcessCatalogFilesRequest) returns (ProcessCatalogFilesResponse) {
    option (google.api.http) = {
      post: "/v1alpha/catalogs/files/processAsync"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
      parameters: {
        headers: {
          name: "Instill-Requester-Uid"
          description:
            "Indicates the authenticated namespace is making the "
            "request on behalf of another entity, typically an "
            "organization they belong to"
          type: STRING
        }
      }
    };
  }

  // List catalog files
  //
  // Returns a paginated list of catalog files.
  rpc ListCatalogFiles(ListCatalogFilesRequest) returns (ListCatalogFilesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get catalog file
  //
  // Gets the file of a catalog.
  rpc GetCatalogFile(GetCatalogFileRequest) returns (GetCatalogFileResponse) {
    option (google.api.http) = {get:
        "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files/"
        "{file_uid}"
};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List catalog chunks
  //
  // Returns a paginated list of catalog chunks.
  rpc ListChunks(ListChunksRequest) returns (ListChunksResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/chunks"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Search catalog chunks
  //
  // Returns a paginated list of catalog chunks based on search criteria.
  rpc SearchChunks(SearchChunksRequest) returns (SearchChunksResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/chunks"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "beta"}
      }
    };
  }

  // Get catalog single-source-of-truth file
  //
  // Gets the single-source-of-truth file of a catalog.
  rpc GetSourceFile(GetSourceFileRequest) returns (GetSourceFileResponse) {
    option (google.api.http) = {get:
        "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files/"
        "{file_uid}/source"
};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get summary from a catalog file
  //
  // Gets summary from a catalog file
  rpc GetFileSummary(GetFileSummaryRequest) returns (GetFileSummaryResponse) {
    option (google.api.http) = {get:
        "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/files/"
        "{file_uid}/summary"
};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Search single-source-of-truth files
  //
  // Searches the single-source-of-truth files of a catalog.
  rpc SearchSourceFiles(SearchSourceFilesRequest) returns (SearchSourceFilesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/source-files"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "beta"}
      }
    };
  }

  // Update catalog chunk
  //
  // Updates a catalog chunk.
  rpc UpdateChunk(UpdateChunkRequest) returns (UpdateChunkResponse) {
    option (google.api.http) = {
      post: "/v1alpha/chunks/{chunk_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Retrieve similar chunks
  //
  // Returns the top-K most similar chunks to a text prompt.
  rpc SimilarityChunksSearch(SimilarityChunksSearchRequest) returns (SimilarityChunksSearchResponse) {
    option (google.api.http) = {
      post:
        "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/chunks/"
        "retrieve"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
      parameters: {
        headers: {
          name: "Instill-Requester-Uid"
          description:
            "Indicates the authenticated namespace is making the "
            "request on behalf of another entity, typically an "
            "organization they belong to"
          type: STRING
        }
      }
    };
  }

  // Answer a question
  //
  // Provides the response to the prompted question, returning contextual
  // information like the chunks used to build the answer.
  rpc QuestionAnswering(QuestionAnsweringRequest) returns (QuestionAnsweringResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/ask"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
      parameters: {
        headers: {
          name: "Instill-Requester-Uid"
          description:
            "Indicates the authenticated namespace is making the "
            "request on behalf of another entity, typically an "
            "organization they belong to"
          type: STRING
        }
      }
    };
  }

  // Get the catalog file.
  //
  // Returns a view of the file within the catalog, with the text and chunks it
  // generated after being processed.
  rpc GetFileCatalog(GetFileCatalogRequest) returns (GetFileCatalogResponse) {
    // TODO use a more meaningful method name and path, e.g.:
    //   - name: GetConversionOutputsForCatalogFile
    //   - path: v1alpha/files/{file_uid}/conversion-outputs
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List Catalog Runs
  //
  // Returns a paginated list of catalog runs.
  rpc ListCatalogRuns(ListCatalogRunsRequest) returns (ListCatalogRunsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/runs"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get Object Upload URL
  //
  // Returns the upload URL of an object.
  rpc GetObjectUploadURL(GetObjectUploadURLRequest) returns (GetObjectUploadURLResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/object-upload-url"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get Object Download URL
  //
  // Returns the download URL of an object.
  rpc GetObjectDownloadURL(GetObjectDownloadURLRequest) returns (GetObjectDownloadURLResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/object-download-url"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Move file to another catalog
  //
  // Moves a file to another catalog.
  rpc MoveFileToCatalog(MoveFileToCatalogRequest) returns (MoveFileToCatalogResponse) {
    option (google.api.http) = {
      post:
        "/v1alpha/namespaces/{namespace_id}/catalogs/{catalog_id}/"
        "files:move"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Artifact"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }
}
