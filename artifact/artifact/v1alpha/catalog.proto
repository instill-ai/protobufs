syntax = "proto3";

package artifact.artifact.v1alpha;

// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// A Catalog is a unified AI-ready format that serves as a knowledge base,
// processing files and preparing them for Retrieval-Augmented Generation
// (RAG).
message Catalog {
  // Catalog Type. e.g. "persistent" or "ephemeral"
  enum CatalogType {
    // UNSPECIFIED
    CATALOG_TYPE_UNSPECIFIED = 0;
    // PERSISTENT
    CATALOG_TYPE_PERSISTENT = 1;
    // EPHEMERAL
    CATALOG_TYPE_EPHEMERAL = 2;
  }

  // Catalog resource ID (used in `name` as the last segment). This conforms
  // to RFC-1034, which restricts to letters, numbers, and hyphen, with the
  // first character a letter, the last a letter or a number, and a 63
  // character maximum.
  string id = 18 [(google.api.field_behavior) = IMMUTABLE];
  // ID of the namespace owning the catalog.
  string namespace_id = 19 [(google.api.field_behavior) = REQUIRED];
  // The name and unique identifier of the catalog.
  // - Format: `namespaces/{namespace.id}/catalogs/{catalog.id}`.
  string name = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Type (by default, persistent).
  CatalogType type = 20 [(google.api.field_behavior) = OPTIONAL];
  // Catalog description.
  string description = 4 [(google.api.field_behavior) = OPTIONAL];
  // Creation timestamp.
  google.protobuf.Timestamp create_time = 5;
  // Timestamp of the last update
  google.protobuf.Timestamp update_time = 6;
  // Tags.
  repeated string tags = 8 [(google.api.field_behavior) = OPTIONAL];
  // Pipelines used for converting documents (i.e., files with pdf, doc[x] or
  // ppt[x] extension) to Markdown. The strings in the list identify the
  // pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipes MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipelines will be executed in order until one produces a successful,
  // non-empty result.
  //
  // If no pipelines are provided, a default pipeline will be used. For
  // non-document catalog files, the conversion pipeline is deterministic (such
  // files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  repeated string converting_pipelines = 9 [(google.api.field_behavior) = OPTIONAL];
  // Pipelines used for text splitting within the catalog.
  repeated string splitting_pipelines = 10 [(google.api.field_behavior) = OPTIONAL];
  // Pipelines used for text embedding within the catalog.
  repeated string embedding_pipelines = 11 [(google.api.field_behavior) = OPTIONAL];
  // Pipelines used for summarization within the catalog.
  repeated string summarizing_pipelines = 16 [(google.api.field_behavior) = OPTIONAL];
  // File count.
  uint32 total_files = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Token count.
  uint32 total_tokens = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Current storage use, in bytes.
  uint64 used_storage = 15 [(google.api.field_behavior) = OUTPUT_ONLY];

  /* Deprecated fields, maintained until clients no longer use them. */

  // Catalog UID.
  // Deprecated. Use resource ID instead.
  string catalog_uid = 1 [deprecated = true];
  // Catalog ID.
  // Deprecated. Use id instead.
  string catalog_id = 2 [deprecated = true];
  // The owner/namespace of the catalog.
  // Deprecated. Use namespace_id instead.
  string owner_name = 7 [deprecated = true];
  // The downstream apps
  repeated string downstream_apps = 12 [deprecated = true];
}

// CreateCatalogRequest represents a request to create a catalog.
message CreateCatalogRequest {
  // The namespace that will own the catalog.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The properties of the catalog to be created.
  Catalog catalog = 2 [(google.api.field_behavior) = REQUIRED];
}

// CreateCatalogResponse contains the created catalog.
message CreateCatalogResponse {
  // The created catalog.
  Catalog catalog = 1;
}

// Request message for ListCatalogs(not include the ephemeral catalogs)
message ListCatalogsRequest {
  // User ID for which to list the catalogs
  string namespace_id = 1;
}

// GetCatalogsResponse represents a response for getting all catalogs from users.
message ListCatalogsResponse {
  // The catalogs container.
  repeated Catalog catalogs = 1;
}

// UpdateCatalogRequest represents a request to update a catalog.
message UpdateCatalogRequest {
  // The catalog id.
  string catalog_id = 1;
  // The catalog description.
  string description = 2;
  // The catalog tags.
  repeated string tags = 3;
  // The catalog owner(namespace).
  string namespace_id = 4;
  // Pipelines used for converting documents (i.e., files with pdf, doc[x] or
  // ppt[x] extension) to Markdown. The strings in the list identify the
  // pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipes MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipelines will be executed in order until one produces a successful,
  // non-empty result.
  //
  // If no pipelines are provided, a default pipeline will be used. For
  // non-document catalog files, the conversion pipeline is deterministic (such
  // files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  repeated string converting_pipelines = 5;
}

// UpdateCatalogResponse represents a response for updating a catalog.
message UpdateCatalogResponse {
  // The updated catalog.
  Catalog catalog = 1;
}

// DeleteCatalogRequest represents a request to delete a catalog.
message DeleteCatalogRequest {
  // The owner's id. i.e. namespace.
  string namespace_id = 1;
  // The catalog id.
  string catalog_id = 2;
}

// DeleteCatalogResponse represents a response for deleting a catalog.
message DeleteCatalogResponse {
  // The catalog identifier.
  Catalog catalog = 1;
}

/* Deprecated */

// CreateNamespaceCatalogRequest represents a request to create a catalog.
// This method is deprecated and CreateCatalog should be used instead.
message CreateNamespaceCatalogRequest {
  // The catalog's owner(namespaces).
  string namespace_id = 1;
  // The catalog name.
  string name = 2;
  // The catalog description.
  string description = 3;
  // The catalog tags.
  repeated string tags = 4;
  // The catalog type. default is PERSISTENT
  Catalog.CatalogType type = 5;
  // Pipelines used for converting documents (i.e., files with pdf, doc[x] or
  // ppt[x] extension) to Markdown. The strings in the list identify the
  // pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipes MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipelines will be executed in order until one produces a successful,
  // non-empty result.
  //
  // If no pipelines are provided, a default pipeline will be used. For
  // non-document catalog files, the conversion pipeline is deterministic (such
  // files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  repeated string converting_pipelines = 6;
}

// CreateNamespaceCatalogResponse represents a response for creating a catalog.
// This method is deprecated and CreateCatalog should be used instead.
message CreateNamespaceCatalogResponse {
  // The created catalog.
  Catalog catalog = 1;
}
