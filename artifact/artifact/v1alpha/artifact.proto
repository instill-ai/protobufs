syntax = "proto3";

package artifact.artifact.v1alpha;

import "common/healthcheck/v1beta/healthcheck.proto";
import "common/run/v1alpha/run.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// KnowledgeBaseRunAction describes the actions a user has over a knowledge base.
enum KnowledgeBaseRunAction {
  // Unspecified.
  KNOWLEDGE_BASE_RUN_ACTION_UNSPECIFIED = 0;
  // Create knowledge base.
  KNOWLEDGE_BASE_RUN_ACTION_CREATE = 1;
  // Update knowledge base.
  KNOWLEDGE_BASE_RUN_ACTION_UPDATE = 2;
  // Delete knowledge base.
  KNOWLEDGE_BASE_RUN_ACTION_DELETE = 3;
  // Upload knowledge base file.
  KNOWLEDGE_BASE_RUN_ACTION_CREATE_FILE = 4;
  // Process knowledge base file.
  KNOWLEDGE_BASE_RUN_ACTION_PROCESS_FILE = 5;
  // Delete knowledge base file.
  KNOWLEDGE_BASE_RUN_ACTION_DELETE_FILE = 6;
}

// KnowledgeBaseRun represents a single execution of a knowledge base action.
message KnowledgeBaseRun {
  // Unique identifier for each run.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // knowledge base uid
  string knowledge_base_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The file uids.
  repeated string file_uids = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Action of the knowledge base run.
  KnowledgeBaseRunAction action = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Current status of the run.
  common.run.v1alpha.RunStatus status = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Origin of the run.
  common.run.v1alpha.RunSource source = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time taken to complete the run in milliseconds.
  optional int32 total_duration = 7 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Runner ID. (User UID)
  optional string runner_id = 8 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Namespace ID.
  optional string namespace_id = 9 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Run request payload.
  optional google.protobuf.Struct payload = 11 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Time when the run started execution.
  google.protobuf.Timestamp start_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the run completed.
  optional google.protobuf.Timestamp complete_time = 15 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Error message if the run failed.
  optional string error = 16 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Credits used of internal accounting metric.
  optional float credit_amount = 17 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];
}

// ListKnowledgeBaseRunsResponse is the response message for ListKnowledgeBaseRuns.
message ListKnowledgeBaseRunsResponse {
  // The list of runs.
  repeated KnowledgeBaseRun knowledge_base_runs = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The total number of runs matching the request.
  int32 total_size = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The current page number.
  int32 page = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The number of items per page.
  int32 page_size = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListKnowledgeBaseRunsRequest is the request message for ListKnowledgeBaseRuns.
message ListKnowledgeBaseRunsRequest {
  // The ID of the owner of the knowledge base.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The ID of the knowledge base for which the runs will be listed.
  string knowledge_base_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The page number to retrieve.
  int32 page = 3 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of items per page to return. The default and cap values
  // are 10 and 100, respectively.
  int32 page_size = 4 [(google.api.field_behavior) = OPTIONAL];

  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
  // expression.
  // - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
  optional string filter = 6 [(google.api.field_behavior) = OPTIONAL];
  // Order by field, with options for ordering by `id`, `create_time` or `update_time`.
  // Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
  optional string order_by = 7 [(google.api.field_behavior) = OPTIONAL];
}
