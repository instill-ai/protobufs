syntax = "proto3";

package artifact.artifact.v1alpha;

import "common/healthcheck/v1beta/healthcheck.proto";
// Google API
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

/*

   This API is under development and, therefore, some of its entitites and
   entpoints are not implemented yet. This section aims to give context about the
   current interface and how it fits in the Artifact vision.

   # Artifact

   The Artifact domain is responsible of storing data that will later be used for
   processing unstructured data. Artifact will support the following types of
   data:

   - Repositories
   - Objects
   - Vectors

   ## Repositories

   An implementation of the [OCI Distribution Specification](https://github.com/opencontainers/distribution-spec?tab=readme-ov-file)
   is used to manage versioned content. The main use for repositories is storing
   container images that can be used to deploy AI models or VDP pipelines.

   The ID of a repository has 2 segments, the owner (an Instill user or
   organization) and the content ID (the AI model or pipeline ID), e.g.
   `curious-wombat/llava-34b`.

   ## Objects

   Raw data is stored in binary blobs. Object storage allows users to upload data
   (e.g. images, audio) that can be used by pipelines or to store the results or a
   pipeline trigger.

   ## Vectors

   Vector embeddings have their own storage, which allows fast retrieval and similarity search.

*/

// RepositoryTag contains information about the version of some content in a
// repository.
message RepositoryTag {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];
  // The tag identifier.
  string id = 2 [(google.api.field_behavior) = IMMUTABLE];

  // The Artifact backend will register the tag digest and timestamp when a
  // new version is pushed. However, the registry remains the source of truth
  // for tags, so if this information isn't found in the Artifact database,
  // these fields will be empty.

  // Unique identifier, computed from the manifest the tag refers to.
  string digest = 3 [(google.api.field_behavior) = OPTIONAL];
  // Tag update time, i.e. timestamp of the last push.
  google.protobuf.Timestamp update_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];
}

// ListRepositoryTagsRequest represents a request to list the tags of a
// repository.
message ListRepositoryTagsRequest {
  // The maximum number of tags to return. The default and cap values are 10
  // and 100, respectively.
  optional int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // Page number.
  optional int32 page = 2 [(google.api.field_behavior) = OPTIONAL];
  // The repository holding the different versions of a given content.
  // - Format: `repositories/{repository.id}`.
  // - Example: `repositories/flaming-wombat/llama-2-7b`.
  string parent = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "api.instill.tech/Repository"}
  ];
}

// ListRepositoryTagsResponse contains a list of container image tags.
message ListRepositoryTagsResponse {
  // A list of repository tags.
  repeated RepositoryTag tags = 1;
  // Total number of tags.
  int32 total_size = 2;
  // The requested page size.
  int32 page_size = 3;
  // The requested page offset.
  int32 page = 4;
}

// CreateRepositoryTagRequest represents a request to add a tag to a given
// repository.
message CreateRepositoryTagRequest {
  // The tag information.
  RepositoryTag tag = 1;
}

// CreateRepositoryTagResponse contains the created tag.
message CreateRepositoryTagResponse {
  // The created tag.
  RepositoryTag tag = 1;
}

// KnowledgeBase represents a knowledge base.
message KnowledgeBase {
  // The knowledge base identifier.
  string id = 1;
  // The knowledge base name.
  string name = 2;
  // The knowledge base description.
  string description = 3;
  // The creation time of the knowledge base.
  string create_time = 5;
  // The last update time of the knowledge base.
  string update_time = 6;
  // The owner of the knowledge base.
  string owner_name = 7;
  // The knowledge base tags.
  repeated string tags = 8;
}

// KnowledgeBasesList represents a list of knowledge bases.
message KnowledgeBasesList {
  // The list of knowledge bases.
  repeated KnowledgeBase knowledge_bases = 1;
}

// CreateKnowledgeBaseRequest represents a request to create a knowledge base.
message CreateKnowledgeBaseRequest {
  // The knowledge base name.
  string name = 1;
  // The knowledge base description.
  string description = 2;
  // The knowledge base tags.
  repeated string tags = 3;
}

// CreateKnowledgeBaseResponse represents a response for creating a knowledge base.
message CreateKnowledgeBaseResponse {
  // The created knowledge base.
  KnowledgeBase body = 1;
  // The error message.
  string error_msg = 2;
  // The status code.
  int32 status_code = 3;
}

// Request message for ListKnowledgeBases
message ListKnowledgeBasesRequest {
  // User ID for which to list the knowledge bases
  string uid = 1;
}

// GetKnowledgeBasesResponse represents a response for getting all knowledge bases from users.
message ListKnowledgeBasesResponse {
  // The knowledge bases container.
  KnowledgeBasesList body = 1;
  // The error message.
  string error_msg = 2;
  // The status code.
  int32 status_code = 3;
}

// UpdateKnowledgeBaseRequest represents a request to update a knowledge base.
message UpdateKnowledgeBaseRequest {
  // The knowledge base identifier.
  string id = 1;
  // The knowledge base name.
  string name = 2;
  // The knowledge base description.
  string description = 3;
  // The knowledge base tags.
  repeated string tags = 4;
  // The knowledge base owner.
  string owner_name = 5;
}

// UpdateKnowledgeBaseResponse represents a response for updating a knowledge base.
message UpdateKnowledgeBaseResponse {
  // The updated knowledge base.
  KnowledgeBase body = 1;
  // The error message.
  string error_msg = 2;
  // The status code.
  int32 status_code = 3;
}

// DeleteKnowledgeBaseRequest represents a request to delete a knowledge base.
message DeleteKnowledgeBaseRequest {
  // The knowledge base identifier.
  string id = 1;
}

// DeleteKnowledgeBaseResponse represents a response for deleting a knowledge base.
message DeleteKnowledgeBaseResponse {
  // The error message.
  string error_msg = 1;
  // The status code.
  int32 status_code = 2;
}

// file embedding process status
enum FileProcessStatus {
  // UNSPECIFIED
  FILE_PROCESS_STATUS_UNSPECIFIED = 0;
  // NOTSTARTED
  FILE_PROCESS_STATUS_NOTSTARTED = 1;
  // waiting
  FILE_PROCESS_STATUS_WAITING = 2;
  // embedding process is running
  FILE_PROCESS_STATUS_CONVERTING = 3;
  // embedding process is done
  FILE_PROCESS_STATUS_CHUNKING = 4;
  // embedding process is failed
  FILE_PROCESS_STATUS_EMBEDDING = 5;
  // COMPLETED
  FILE_PROCESS_STATUS_COMPLETED = 6;
}

// file type
enum FileType {
  // upsecifid
  FILE_TYPE_UNSPECIFIED = 0;
  // text
  FILE_TYPE_TEXT = 1;
  // PDF
  FILE_TYPE_PDF = 2;
  //MARKDOWN
  FILE_TYPE_MARKDOWN = 3;
  // PNG
  FILE_TYPE_PNG = 4;
  // JPEG
  FILE_TYPE_JPEG = 5;
  // JPG
  FILE_TYPE_JPG = 6;
}

// file mata data
message File {
  // file uid
  string file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file name
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  // file type
  FileType type = 3 [(google.api.field_behavior) = REQUIRED];
  // file process status
  FileProcessStatus process_status = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file process message
  string process_outcome = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // retrievable(this is reserved for future use)
  bool retrievable = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // contect(this is reserved for future use)
  string content = 7 [(google.api.field_behavior) = OPTIONAL];
  // owner uid
  string owner_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // cretor uid from authn token
  string creator_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // knowledge base uid
  string kb_uid = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // create time
  google.protobuf.Timestamp create_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time
  google.protobuf.Timestamp update_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  // delete time
  google.protobuf.Timestamp delete_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// upload file request
message UploadKnowledgeBaseFileRequest {
  // owenr uid
  string owner_id = 1 [(google.api.field_behavior) = REQUIRED];
  // knowledge base uid
  string kb_id = 2 [(google.api.field_behavior) = REQUIRED];
  // file
  File file = 3;
}

// upload file response
message UploadKnowledgeBaseFileResponse {
  // file
  File file = 1;
}

// delete file request
message DeleteKnowledgeBaseFileRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// delete file response
message DeleteKnowledgeBaseFileResponse {
  // The file uid.
  string file_uid = 1;
}

// Process KnowledgeBase File Request
message ProcessKnowledgeBaseFilesRequest {
  // The file uid.
  repeated string file_uids = 1 [(google.api.field_behavior) = REQUIRED];
}

// Process KnowledgeBase File Response
message ProcessKnowledgeBaseFilesResponse {
  // The file uid.
  repeated File files = 1;
}

// list file filter
// todo: support more parameters
message ListKnowledgeBaseFilesFilter {
  // The file uids.
  repeated string file_uids = 2 [(google.api.field_behavior) = OPTIONAL];
}

// list files request
message ListKnowledgeBaseFilesRequest {
  // The owner uid.
  string owner_id = 1;
  // The knowledge base uid.
  string kb_id = 2;
  // The page size (default:10; max 100).
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // The next page token(default from first file's token).
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // The filter.
  ListKnowledgeBaseFilesFilter filter = 5 [(google.api.field_behavior) = OPTIONAL];
}

// list files response
message ListKnowledgeBaseFilesResponse {
  // The list of files.
  repeated File files = 1;
  // The total number of files.
  int32 total_size = 2;
  // The requested page size.
  int32 page_size = 3;
  // next page token
  string next_page_token = 4;
  // The filter.
  ListKnowledgeBaseFilesFilter filter = 5;
}
