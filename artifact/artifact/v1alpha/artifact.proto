syntax = "proto3";

package artifact.artifact.v1alpha;

import "artifact/artifact/v1alpha/object.proto";
import "common/healthcheck/v1beta/healthcheck.proto";
import "common/run/v1alpha/run.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// RepositoryTag contains information about the version of some content in a
// repository.
message RepositoryTag {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];
  // The tag identifier.
  string id = 2 [(google.api.field_behavior) = IMMUTABLE];

  // The Artifact backend will register the tag digest and timestamp when a
  // new version is pushed. However, the registry remains the source of truth
  // for tags, so if this information isn't found in the Artifact database,
  // these fields will be empty.

  // Unique identifier, computed from the manifest the tag refers to.
  string digest = 3 [(google.api.field_behavior) = OPTIONAL];
  // Tag update time, i.e. timestamp of the last push.
  google.protobuf.Timestamp update_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];
}

// ListRepositoryTagsRequest represents a request to list the tags of a
// repository.
message ListRepositoryTagsRequest {
  // The maximum number of tags to return. The default and cap values are 10
  // and 100, respectively.
  optional int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // Page number.
  optional int32 page = 2 [(google.api.field_behavior) = OPTIONAL];
  // The repository holding the different versions of a given content.
  // - Format: `repositories/{repository.id}`.
  // - Example: `repositories/flaming-wombat/llama-2-7b`.
  string parent = 3 [(google.api.field_behavior) = REQUIRED];
}

// ListRepositoryTagsResponse contains a list of container image tags.
message ListRepositoryTagsResponse {
  // A list of repository tags.
  repeated RepositoryTag tags = 1;
  // Total number of tags.
  int32 total_size = 2;
  // The requested page size.
  int32 page_size = 3;
  // The requested page offset.
  int32 page = 4;
}

// CreateRepositoryTagRequest represents a request to add a tag to a given
// repository.
message CreateRepositoryTagRequest {
  // The tag information.
  RepositoryTag tag = 1;
}

// CreateRepositoryTagResponse contains the created tag.
message CreateRepositoryTagResponse {
  // The created tag.
  RepositoryTag tag = 1;
}

// GetRepositoryTagRequest represents a request to add a tag to a given
// repository.
message GetRepositoryTagRequest {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetRepositoryTagResponse contains the created tag.
message GetRepositoryTagResponse {
  // The created tag.
  RepositoryTag tag = 1;
}

// DeleteRepositoryTagRequest represents a request to delete a tag to a given
// repository.
message DeleteRepositoryTagRequest {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// DeleteRepositoryTagResponse represent an empty response.
message DeleteRepositoryTagResponse {}

// ObjectUploadURL
message ObjectURL {
  // The unique identifier of the ObjectURL
  string uid = 1;
  // The namespace UID associated with this ObjectURL
  string namespace_uid = 2;
  // The object UID associated with this ObjectURL
  string object_uid = 3;
  // The expiration time of the URL
  google.protobuf.Timestamp url_expire_at = 4;
  // The MinIO URL path
  string minio_url_path = 5;
  // The encoded URL path
  string encoded_url_path = 6;
  // The type of URL (download or upload)
  string type = 7;
  // The creation time of the ObjectURL
  google.protobuf.Timestamp create_time = 8;
  // The last update time of the ObjectURL
  google.protobuf.Timestamp update_time = 9;
  // The deletion time of the ObjectURL, if applicable
  optional google.protobuf.Timestamp delete_time = 10;
}

// GetObjectRequest
message GetObjectRequest {
  // object uid
  string uid = 1;
}

// GetObjectResponse
message GetObjectResponse {
  // object
  Object object = 1;
}

// GetObjectURLRequest
message GetObjectURLRequest {
  // object url uid
  string uid = 1;
  // encoded url path. artifact first use uid to get object url,
  // if not exist, then use encoded url path to get object url
  optional string encoded_url_path = 2;
}

// GetObjectURLResponse
message GetObjectURLResponse {
  // object url
  ObjectURL object_url = 1;
}

// UpdateObjectRequest
message UpdateObjectRequest {
  // object uid
  string uid = 1;
  // size
  optional int64 size = 2;
  // type
  optional string type = 3;
  // is upload
  optional bool is_uploaded = 4;
  // last modified time
  optional google.protobuf.Timestamp last_modified_time = 5;
}

// UpdateObjectResponse
message UpdateObjectResponse {
  // object
  Object object = 1;
}

// Catalog represents a catalog.
message Catalog {
  // The catalog uid.
  string catalog_uid = 1;
  // The catalog id.
  string catalog_id = 2;
  // The catalog name.
  string name = 3;
  // The catalog description.
  string description = 4;
  // The creation time of the catalog.
  string create_time = 5;
  // The last update time of the catalog.
  string update_time = 6;
  // The owner/namespace of the catalog.
  string owner_name = 7;
  // The catalog tags.
  repeated string tags = 8;
  // The catalog converting pipelines.
  repeated string converting_pipelines = 9;
  // The catalog splitting pipelines.
  repeated string splitting_pipelines = 10;
  // The catalog embedding pipelines.
  repeated string embedding_pipelines = 11;
  // The downstream apps
  repeated string downstream_apps = 12;
  // The total files in catalog.
  uint32 total_files = 13;
  // The total tokens in catalog.
  uint32 total_tokens = 14;
  // The current used storage in catalog.
  uint64 used_storage = 15;
  // The catalog summarizing pipelines.
  repeated string summarizing_pipelines = 16;
}

// Catalog Type. e.g. "persistent" or "ephemeral"
enum CatalogType {
  // UNSPECIFIED
  CATALOG_TYPE_UNSPECIFIED = 0;
  // PERSISTENT
  CATALOG_TYPE_PERSISTENT = 1;
  // EPHEMERAL
  CATALOG_TYPE_EPHEMERAL = 2;
}

// CreateCatalogRequest represents a request to create a catalog.
message CreateCatalogRequest {
  // The catalog's owner(namespaces).
  string namespace_id = 1;
  // The catalog name.
  string name = 2;
  // The catalog description.
  string description = 3;
  // The catalog tags.
  repeated string tags = 4;
  // The catalog type. default is PERSISTENT
  CatalogType type = 5;
  // Pipelines used for converting documents (i.e., files with pdf, doc[x] or
  // ppt[x] extension) to Markdown. The strings in the list identify the
  // pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipes MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipelines will be executed in order until one produces a successful,
  // non-empty result.
  //
  // If no pipelines are provided, a default pipeline will be used. For
  // non-document catalog files, the conversion pipeline is deterministic (such
  // files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  repeated string converting_pipelines = 6;
}

// CreateCatalogResponse represents a response for creating a catalog.
message CreateCatalogResponse {
  // The created catalog.
  Catalog catalog = 1;
}

// Request message for ListCatalogs(not include the ephemeral catalogs)
message ListCatalogsRequest {
  // User ID for which to list the catalogs
  string namespace_id = 1;
}

// GetCatalogsResponse represents a response for getting all catalogs from users.
message ListCatalogsResponse {
  // The catalogs container.
  repeated Catalog catalogs = 1;
}

// UpdateCatalogRequest represents a request to update a catalog.
message UpdateCatalogRequest {
  // The catalog id.
  string catalog_id = 1;
  // The catalog description.
  string description = 2;
  // The catalog tags.
  repeated string tags = 3;
  // The catalog owner(namespace).
  string namespace_id = 4;
  // Pipelines used for converting documents (i.e., files with pdf, doc[x] or
  // ppt[x] extension) to Markdown. The strings in the list identify the
  // pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipes MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipelines will be executed in order until one produces a successful,
  // non-empty result.
  //
  // If no pipelines are provided, a default pipeline will be used. For
  // non-document catalog files, the conversion pipeline is deterministic (such
  // files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  repeated string converting_pipelines = 5;
}

// UpdateCatalogResponse represents a response for updating a catalog.
message UpdateCatalogResponse {
  // The updated catalog.
  Catalog catalog = 1;
}

// DeleteCatalogRequest represents a request to delete a catalog.
message DeleteCatalogRequest {
  // The owner's id. i.e. namespace.
  string namespace_id = 1;
  // The catalog id.
  string catalog_id = 2;
}

// DeleteCatalogResponse represents a response for deleting a catalog.
message DeleteCatalogResponse {
  // The catalog identifier.
  Catalog catalog = 1;
}

// file embedding process status
enum FileProcessStatus {
  // UNSPECIFIED
  FILE_PROCESS_STATUS_UNSPECIFIED = 0;
  // NOTSTARTED
  FILE_PROCESS_STATUS_NOTSTARTED = 1;
  // file is waiting for embedding process
  FILE_PROCESS_STATUS_WAITING = 2;
  // file is converting
  FILE_PROCESS_STATUS_CONVERTING = 3;
  // file is chunking
  FILE_PROCESS_STATUS_CHUNKING = 4;
  // file is embedding
  FILE_PROCESS_STATUS_EMBEDDING = 5;
  // completed
  FILE_PROCESS_STATUS_COMPLETED = 6;
  // failed
  FILE_PROCESS_STATUS_FAILED = 7;
  // file is summarizing
  FILE_PROCESS_STATUS_SUMMARIZING = 8;
}

// file type
enum FileType {
  // unspecified
  FILE_TYPE_UNSPECIFIED = 0;
  // text
  FILE_TYPE_TEXT = 1;
  // PDF
  FILE_TYPE_PDF = 2;
  //MARKDOWN
  FILE_TYPE_MARKDOWN = 3;
  // PNG(not supported yet)
  FILE_TYPE_PNG = 4;
  // JPEG(not supported yet)
  FILE_TYPE_JPEG = 5;
  // JPG(not supported yet)
  FILE_TYPE_JPG = 6;
  // HTML
  FILE_TYPE_HTML = 7;
  // DOCX
  FILE_TYPE_DOCX = 8;
  // DOC
  FILE_TYPE_DOC = 9;
  // PPT
  FILE_TYPE_PPT = 10;
  // PPTX
  FILE_TYPE_PPTX = 11;
  // XLS
  FILE_TYPE_XLS = 12;
  // XLSX
  FILE_TYPE_XLSX = 13;
  // CSV
  FILE_TYPE_CSV = 14;
}

// file
message File {
  // file uid
  string file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file name
  string name = 2 [(google.api.field_behavior) = OPTIONAL];
  // file type
  FileType type = 3 [(google.api.field_behavior) = OPTIONAL];
  // file process status
  FileProcessStatus process_status = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file process message
  string process_outcome = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // retrievable(this is reserved for future use)
  bool retrievable = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content(this is reserved for future use)
  string content = 7 [(google.api.field_behavior) = OPTIONAL];
  // owner/namespace uid
  string owner_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creator uid from authn token
  string creator_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // catalog uid
  string catalog_uid = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // create time
  google.protobuf.Timestamp create_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time
  google.protobuf.Timestamp update_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  // delete time
  google.protobuf.Timestamp delete_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file size in bytes
  int64 size = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total chunks
  int32 total_chunks = 15 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total tokens
  int32 total_tokens = 16 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Custom metadata provided by the user during file upload
  optional google.protobuf.Struct external_metadata = 17 [(google.api.field_behavior) = OPTIONAL];
  // objectUid in blob storage. user can upload to blob storage directly, then put objectUid here.
  // then no need the base64 encoding for the file content.
  string object_uid = 18 [(google.api.field_behavior) = OPTIONAL];
  // summary of the file
  string summary = 19 [(google.api.field_behavior) = OUTPUT_ONLY];
  // download url of the file
  string download_url = 20 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Pipeline used for converting the file to Markdown if the file is a
  // document (i.e., a file with pdf, doc[x] or ppt[x] extension). The value
  // identifies the pipeline release and and MUST have the format
  // `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipe MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipeline will be executed first, falling back to the catalog's
  // conversion pipelines if the conversion doesn't yield a non-empty result
  // (see the catalog creation endpoint documentation).
  //
  // For non-document catalog files, the conversion pipeline is deterministic
  // (such files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  optional string converting_pipeline = 21;
}

// upload file request
message UploadCatalogFileRequest {
  // owner/namespace uid
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // file
  File file = 3;
}

// upload file response
message UploadCatalogFileResponse {
  // file
  File file = 1;
}

// delete file request
message DeleteCatalogFileRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// delete file response
message DeleteCatalogFileResponse {
  // The file uid.
  string file_uid = 1;
}

// Process Catalog File Request
message ProcessCatalogFilesRequest {
  // The file uid.
  repeated string file_uids = 1 [(google.api.field_behavior) = REQUIRED];
}

// Process Catalog File Response
message ProcessCatalogFilesResponse {
  // The file uid.
  repeated File files = 1;
}

// ListCatalogFilesFilter contains a set of properties to filter a catalog file
// list by.
message ListCatalogFilesFilter {
  // File UIDs.
  repeated string file_uids = 1 [(google.api.field_behavior) = OPTIONAL];
  // Processing status of the files.
  FileProcessStatus process_status = 2 [(google.api.field_behavior) = OPTIONAL];
}

// list files request
message ListCatalogFilesRequest {
  // The owner/namespace uid id.
  string namespace_id = 1;
  // The catalog id.
  string catalog_id = 2;
  // The page size (default:10; max 100).
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // The next page token(default from first file's token).
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // The filter.
  ListCatalogFilesFilter filter = 5 [(google.api.field_behavior) = OPTIONAL];
}

// list files response
message ListCatalogFilesResponse {
  // The list of files.
  repeated File files = 1;
  // The total number of files.
  int32 total_size = 2;
  // The requested page size.
  int32 page_size = 3;
  // next page token
  string next_page_token = 4;
  // The filter.
  ListCatalogFilesFilter filter = 5;
}

// GetCatalogFileRequest represents a request to get a catalog file.
message GetCatalogFileRequest {
  // The namespace id.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog id.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The file uid.
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// GetCatalogFileResponse represents a response for getting a catalog file.
message GetCatalogFileResponse {
  // The file.
  File file = 1;
}

// CatalogRunAction describes the actions a user has over a catalog.
enum CatalogRunAction {
  // Unspecified.
  CATALOG_RUN_ACTION_UNSPECIFIED = 0;
  // Create catalog.
  CATALOG_RUN_ACTION_CREATE = 1;
  // Update catalog.
  CATALOG_RUN_ACTION_UPDATE = 2;
  // Delete catalog.
  CATALOG_RUN_ACTION_DELETE = 3;
  // Upload catalog file.
  CATALOG_RUN_ACTION_CREATE_FILE = 4;
  // Process catalog file.
  CATALOG_RUN_ACTION_PROCESS_FILE = 5;
  // Delete catalog file.
  CATALOG_RUN_ACTION_DELETE_FILE = 6;
}

// CatalogRun represents a single execution of a catalog action.
message CatalogRun {
  // Unique identifier for each run.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // catalog uid
  string catalog_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The file uids.
  repeated string file_uids = 3 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Action of the catalog run.
  CatalogRunAction action = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Current status of the run.
  common.run.v1alpha.RunStatus status = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Origin of the run.
  common.run.v1alpha.RunSource source = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time taken to complete the run in milliseconds.
  optional int32 total_duration = 7 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Runner ID. (User UID)
  optional string runner_id = 8 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Namespace ID.
  optional string namespace_id = 9 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Run request payload.
  optional google.protobuf.Struct payload = 11 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Time when the run started execution.
  google.protobuf.Timestamp start_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Time when the run completed.
  optional google.protobuf.Timestamp complete_time = 15 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Error message if the run failed.
  optional string error = 16 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];

  // Credits used of internal accounting metric.
  optional float credit_amount = 17 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];
}

// ListCatalogRunsResponse is the response message for ListCatalogRuns.
message ListCatalogRunsResponse {
  // The list of runs.
  repeated CatalogRun catalog_runs = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The total number of runs matching the request.
  int32 total_size = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The current page number.
  int32 page = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The number of items per page.
  int32 page_size = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListCatalogRunsRequest is the request message for ListCatalogRuns.
message ListCatalogRunsRequest {
  // The ID of the owner of the catalog.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The ID of the catalog for which the runs will be listed.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The page number to retrieve.
  int32 page = 3 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of items per page to return. The default and cap values
  // are 10 and 100, respectively.
  int32 page_size = 4 [(google.api.field_behavior) = OPTIONAL];

  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
  // expression.
  // - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
  optional string filter = 6 [(google.api.field_behavior) = OPTIONAL];
  // Order by field, with options for ordering by `id`, `create_time` or `update_time`.
  // Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
  optional string order_by = 7 [(google.api.field_behavior) = OPTIONAL];
}

// MoveFileToCatalogRequest represents a request to move a file to another catalog.
message MoveFileToCatalogRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
  // namespace id
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 3 [(google.api.field_behavior) = REQUIRED];
  // The target catalog id.
  string to_catalog_id = 4 [(google.api.field_behavior) = REQUIRED];
}

// MoveFileToCatalogResponse represents a response for moving a file to another catalog.
message MoveFileToCatalogResponse {
  // The file uid.
  string file_uid = 1;
}
