syntax = "proto3";

package artifact.artifact.v1alpha;

import "common/healthcheck/v1beta/healthcheck.proto";
// Google API
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// LivenessRequest represents a request to check a service liveness status
message LivenessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// LivenessResponse represents a response for a service liveness status
message LivenessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

// ReadinessRequest represents a request to check a service readiness status
message ReadinessRequest {
  // HealthCheckRequest message
  optional common.healthcheck.v1beta.HealthCheckRequest health_check_request = 1 [(google.api.field_behavior) = OPTIONAL];
}

// ReadinessResponse represents a response for a service readiness status
message ReadinessResponse {
  // HealthCheckResponse message
  common.healthcheck.v1beta.HealthCheckResponse health_check_response = 1;
}

/*

   This API is under development and, therefore, some of its entities and
   endpoints are not implemented yet. This section aims to give context about the
   current interface and how it fits in the Artifact vision.

   # Artifact

   The Artifact domain is responsible of storing data that will later be used for
   processing unstructured data. Artifact will support the following types of
   data:

   - Repositories
   - Objects
   - Vectors

   ## Repositories

   An implementation of the [OCI Distribution Specification](https://github.com/opencontainers/distribution-spec?tab=readme-ov-file)
   is used to manage versioned content. The main use for repositories is storing
   container images that can be used to deploy AI models or VDP pipelines.

   The ID of a repository has 2 segments, the owner (an Instill user or
   organization) and the content ID (the AI model or pipeline ID), e.g.
   `curious-wombat/llava-34b`.

   ## Objects

   Raw data is stored in binary blobs. Object storage allows users to upload data
   (e.g. images, audio) that can be used by pipelines or to store the results or a
   pipeline trigger.

   ## Vectors

   Vector embeddings have their own storage, which allows fast retrieval and similarity search.

*/

// RepositoryTag contains information about the version of some content in a
// repository.
message RepositoryTag {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = IMMUTABLE];
  // The tag identifier.
  string id = 2 [(google.api.field_behavior) = IMMUTABLE];

  // The Artifact backend will register the tag digest and timestamp when a
  // new version is pushed. However, the registry remains the source of truth
  // for tags, so if this information isn't found in the Artifact database,
  // these fields will be empty.

  // Unique identifier, computed from the manifest the tag refers to.
  string digest = 3 [(google.api.field_behavior) = OPTIONAL];
  // Tag update time, i.e. timestamp of the last push.
  google.protobuf.Timestamp update_time = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = OPTIONAL
  ];
}

// ListRepositoryTagsRequest represents a request to list the tags of a
// repository.
message ListRepositoryTagsRequest {
  // The maximum number of tags to return. The default and cap values are 10
  // and 100, respectively.
  optional int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  // Page number.
  optional int32 page = 2 [(google.api.field_behavior) = OPTIONAL];
  // The repository holding the different versions of a given content.
  // - Format: `repositories/{repository.id}`.
  // - Example: `repositories/flaming-wombat/llama-2-7b`.
  string parent = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "api.instill.tech/Repository"}
  ];
}

// ListRepositoryTagsResponse contains a list of container image tags.
message ListRepositoryTagsResponse {
  // A list of repository tags.
  repeated RepositoryTag tags = 1;
  // Total number of tags.
  int32 total_size = 2;
  // The requested page size.
  int32 page_size = 3;
  // The requested page offset.
  int32 page = 4;
}

// CreateRepositoryTagRequest represents a request to add a tag to a given
// repository.
message CreateRepositoryTagRequest {
  // The tag information.
  RepositoryTag tag = 1;
}

// CreateRepositoryTagResponse contains the created tag.
message CreateRepositoryTagResponse {
  // The created tag.
  RepositoryTag tag = 1;
}

// GetRepositoryTagRequest represents a request to add a tag to a given
// repository.
message GetRepositoryTagRequest {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetRepositoryTagResponse contains the created tag.
message GetRepositoryTagResponse {
  // The created tag.
  RepositoryTag tag = 1;
}

// DeleteRepositoryTagRequest represents a request to delete a tag to a given
// repository.
message DeleteRepositoryTagRequest {
  // The name of the tag, defined by its parent repository and ID.
  // - Format: `repositories/{repository.id}/tags/{tag.id}`.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// DeleteRepositoryTagResponse represent an empty response.
message DeleteRepositoryTagResponse {}

// Catalog represents a catalog.
message Catalog {
  // The catalog id.
  string catalog_id = 1;
  // The catalog name.
  string name = 2;
  // The catalog description.
  string description = 3;
  // The creation time of the catalog.
  string create_time = 5;
  // The last update time of the catalog.
  string update_time = 6;
  // The owner/namespace of the catalog.
  string owner_name = 7;
  // The catalog tags.
  repeated string tags = 8;
  // The catalog converting pipelines.
  repeated string converting_pipelines = 9;
  // The catalog splitting pipelines.
  repeated string splitting_pipelines = 10;
  // The catalog embedding pipelines.
  repeated string embedding_pipelines = 11;
  // The downstream apps
  repeated string downstream_apps = 12;
  // The total files in catalog.
  uint32 total_files = 13;
  // The total tokens in catalog.
  uint32 total_tokens = 14;
  // The current used storage in catalog.
  uint64 used_storage = 15;
}

// CreateCatalogRequest represents a request to create a catalog.
message CreateCatalogRequest {
  // The catalog's owner(namespaces).
  string namespace_id = 1;
  // The catalog name.
  string name = 2;
  // The catalog description.
  string description = 3;
  // The catalog tags.
  repeated string tags = 4;
}

// CreateCatalogResponse represents a response for creating a catalog.
message CreateCatalogResponse {
  // The created catalog.
  Catalog catalog = 1;
}

// Request message for ListCatalogs
message ListCatalogsRequest {
  // User ID for which to list the catalogs
  string namespace_id = 1;
}

// GetCatalogsResponse represents a response for getting all catalogs from users.
message ListCatalogsResponse {
  // The catalogs container.
  repeated Catalog catalogs = 1;
}

// UpdateCatalogRequest represents a request to update a catalog.
message UpdateCatalogRequest {
  // The catalog id.
  string catalog_id = 1;
  // The catalog description.
  string description = 2;
  // The catalog tags.
  repeated string tags = 3;
  // The catalog owner(namespace).
  string namespace_id = 4;
}

// UpdateCatalogResponse represents a response for updating a catalog.
message UpdateCatalogResponse {
  // The updated catalog.
  Catalog catalog = 1;
}

// DeleteCatalogRequest represents a request to delete a catalog.
message DeleteCatalogRequest {
  // The owner's id. i.e. namespace.
  string namespace_id = 1;
  // The catalog id.
  string catalog_id = 2;
}

// DeleteCatalogResponse represents a response for deleting a catalog.
message DeleteCatalogResponse {
  // The catalog identifier.
  Catalog catalog = 1;
}

// file embedding process status
enum FileProcessStatus {
  // UNSPECIFIED
  FILE_PROCESS_STATUS_UNSPECIFIED = 0;
  // NOTSTARTED
  FILE_PROCESS_STATUS_NOTSTARTED = 1;
  // file is waiting for embedding process
  FILE_PROCESS_STATUS_WAITING = 2;
  // file is converting
  FILE_PROCESS_STATUS_CONVERTING = 3;
  // file is chunking
  FILE_PROCESS_STATUS_CHUNKING = 4;
  // file is embedding
  FILE_PROCESS_STATUS_EMBEDDING = 5;
  // completed
  FILE_PROCESS_STATUS_COMPLETED = 6;
  // failed
  FILE_PROCESS_STATUS_FAILED = 7;
}

// file type
enum FileType {
  // unspecified
  FILE_TYPE_UNSPECIFIED = 0;
  // text
  FILE_TYPE_TEXT = 1;
  // PDF
  FILE_TYPE_PDF = 2;
  //MARKDOWN
  FILE_TYPE_MARKDOWN = 3;
  // PNG
  FILE_TYPE_PNG = 4;
  // JPEG
  FILE_TYPE_JPEG = 5;
  // JPG
  FILE_TYPE_JPG = 6;
  // HTML
  FILE_TYPE_HTML = 7;
  // DOCX
  FILE_TYPE_DOCX = 8;
  // DOC
  FILE_TYPE_DOC = 9;
  // PPT
  FILE_TYPE_PPT = 10;
  // PPTX
  FILE_TYPE_PPTX = 11;
}

// file
message File {
  // file uid
  string file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file name
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  // file type
  FileType type = 3 [(google.api.field_behavior) = REQUIRED];
  // file process status
  FileProcessStatus process_status = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file process message
  string process_outcome = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // retrievable(this is reserved for future use)
  bool retrievable = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content(this is reserved for future use)
  string content = 7 [(google.api.field_behavior) = OPTIONAL];
  // owner/namespace uid
  string owner_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creator uid from authn token
  string creator_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // catalog uid
  string catalog_uid = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // create time
  google.protobuf.Timestamp create_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time
  google.protobuf.Timestamp update_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  // delete time
  google.protobuf.Timestamp delete_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
  // file size in bytes
  int64 size = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total chunks
  int32 total_chunks = 15 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total tokens
  int32 total_tokens = 16 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// upload file request
message UploadCatalogFileRequest {
  // owner/namespace uid
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // file
  File file = 3;
}

// upload file response
message UploadCatalogFileResponse {
  // file
  File file = 1;
}

// delete file request
message DeleteCatalogFileRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// delete file response
message DeleteCatalogFileResponse {
  // The file uid.
  string file_uid = 1;
}

// Process Catalog File Request
message ProcessCatalogFilesRequest {
  // The file uid.
  repeated string file_uids = 1 [(google.api.field_behavior) = REQUIRED];
}

// Process Catalog File Response
message ProcessCatalogFilesResponse {
  // The file uid.
  repeated File files = 1;
}

// list file filter
// todo: support more parameters
message ListCatalogFilesFilter {
  // The file uids.
  repeated string file_uids = 2 [(google.api.field_behavior) = OPTIONAL];
}

// list files request
message ListCatalogFilesRequest {
  // The owner/namespace uid id.
  string namespace_id = 1;
  // The catalog id.
  string catalog_id = 2;
  // The page size (default:10; max 100).
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // The next page token(default from first file's token).
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // The filter.
  ListCatalogFilesFilter filter = 5 [(google.api.field_behavior) = OPTIONAL];
}

// list files response
message ListCatalogFilesResponse {
  // The list of files.
  repeated File files = 1;
  // The total number of files.
  int32 total_size = 2;
  // The requested page size.
  int32 page_size = 3;
  // next page token
  string next_page_token = 4;
  // The filter.
  ListCatalogFilesFilter filter = 5;
}
