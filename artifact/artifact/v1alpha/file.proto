syntax = "proto3";

package artifact.artifact.v1alpha;

import "common/view/v1beta/view.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// FileProcessStatus describes the last step in the processing flow that a
// catalog file has completed.
enum FileProcessStatus {
  // UNSPECIFIED
  FILE_PROCESS_STATUS_UNSPECIFIED = 0;
  // NOTSTARTED
  FILE_PROCESS_STATUS_NOTSTARTED = 1;
  // file is waiting for embedding process
  FILE_PROCESS_STATUS_WAITING = 2;
  // file is converting
  FILE_PROCESS_STATUS_CONVERTING = 3;
  // file is chunking
  FILE_PROCESS_STATUS_CHUNKING = 4;
  // file is embedding
  FILE_PROCESS_STATUS_EMBEDDING = 5;
  // completed
  FILE_PROCESS_STATUS_COMPLETED = 6;
  // failed
  FILE_PROCESS_STATUS_FAILED = 7;
  // file is summarizing
  FILE_PROCESS_STATUS_SUMMARIZING = 8;
}

// FileType determines the type of a file, based on its extension.
enum FileType {
  // unspecified
  FILE_TYPE_UNSPECIFIED = 0;
  // text
  FILE_TYPE_TEXT = 1;
  // PDF
  FILE_TYPE_PDF = 2;
  //MARKDOWN
  FILE_TYPE_MARKDOWN = 3;
  // PNG(not supported yet)
  FILE_TYPE_PNG = 4;
  // JPEG(not supported yet)
  FILE_TYPE_JPEG = 5;
  // JPG(not supported yet)
  FILE_TYPE_JPG = 6;
  // HTML
  FILE_TYPE_HTML = 7;
  // DOCX
  FILE_TYPE_DOCX = 8;
  // DOC
  FILE_TYPE_DOC = 9;
  // PPT
  FILE_TYPE_PPT = 10;
  // PPTX
  FILE_TYPE_PPTX = 11;
  // XLS
  FILE_TYPE_XLS = 12;
  // XLSX
  FILE_TYPE_XLSX = 13;
  // CSV
  FILE_TYPE_CSV = 14;
}

// FilePosition represents a position within a file using a specific unit.
// The position can be multi-dimensional based on the unit type:
// - 1 element for 1D positions (characters, pages, time)
// - 2 elements for 2D positions (pixels: [x, y])
// - N elements for N-dimensional positions
message FilePosition {
  // Unit describes the unit of measurement for a position within a file.
  enum Unit {
    // Unspecified.
    UNIT_UNSPECIFIED = 0;
    // Character positions (for Markdown and other text files).
    UNIT_CHARACTER = 1;
    // Page positions (for documents).
    UNIT_PAGE = 2;
    // Time positions in milliseconds (for audio/video files).
    UNIT_TIME_MS = 3;
    // Pixel positions (for images and other 2D content).
    UNIT_PIXEL = 4;
  }

  // Unit of measurement for the position
  Unit unit = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Position coordinates as an array
  // For 1D: [position]
  // For 2D: [x, y]
  // For 3D: [x, y, z], etc.
  repeated uint32 coordinates = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// File represents an object ingested by a catalog, which will later be
// processed (converted to text, broken down into chunks and embedded) in order
// to be used for retrieval and question answering.
message File {
  // The name and unique identifier of the file.
  // - Format: `namespaces/{namespace.id}/catalogs/{catalog.id}/files/{file.id}`.
  string name = 24 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File resource ID (used in `name` as the last segment). This field is
  // generated by the server.
  // TODO: references to file_uid still need to be migrated to file.id.
  string id = 25 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Filename. Note that this field isn't unique.
  string filename = 2 [(google.api.field_behavior) = OPTIONAL];
  // File type, inferred from the extension in the filename.
  FileType type = 3 [(google.api.field_behavior) = OPTIONAL];
  // Processing status of the file.
  FileProcessStatus process_status = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Message with the outcome of the processing.
  string process_outcome = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Text representation of the file.
  string content = 7 [(google.api.field_behavior) = OPTIONAL];
  // UID of the file owner.
  string owner_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // UID of the file creator, i.e., the authenticated user who uploaded the
  // file.
  string creator_uid = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Creation timestamp.
  google.protobuf.Timestamp create_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Last update timestamp.
  google.protobuf.Timestamp update_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Deletion timestamp.
  google.protobuf.Timestamp delete_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File size in bytes.
  int64 size = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Total number of chunks.
  int32 total_chunks = 15 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Total number of tokens.
  int32 total_tokens = 16 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Custom metadata provided by the user during file upload
  optional google.protobuf.Struct external_metadata = 17 [(google.api.field_behavior) = OPTIONAL];
  // Object UID in blob storage. This will be present when the file is first
  // uploaded as a blob, then added to the catalog by reference (instead of
  // explicitly passing the base64-encoded file content).
  string object_uid = 18 [(google.api.field_behavior) = OPTIONAL];
  // Summary of the file.
  string summary = 19 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Download URL of the file.
  string download_url = 20 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Pipeline used for converting the file to Markdown if the file is a
  // document (i.e., a file with pdf, doc[x] or ppt[x] extension). The value
  // identifies the pipeline release and and MUST have the format
  // `{namespaceID}/{pipelineID}@{version}`.
  // The pipeline recipe MUST have the following variable and output fields:
  // ```yaml variable
  // variable:
  //   document_input:
  //     title: document-input
  //     description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
  //     type: file
  // ```
  // ```yaml output
  // output:
  //  convert_result:
  //    title: convert-result
  //    value: ${merge-markdown-refinement.output.results[0]}
  // ```
  // Other variable and output fields will be ignored.
  //
  // The pipeline will be executed first, falling back to the catalog's
  // conversion pipelines if the conversion doesn't yield a non-empty result
  // (see the catalog creation endpoint documentation).
  //
  // For non-document catalog files, the conversion pipeline is deterministic
  // (such files are typically trivial to convert and don't require a dedicated
  // pipeline to improve the conversion performance).
  optional string converting_pipeline = 21;
  // Length of the file in the specified unit type. It is defined as a
  // FilePosition, so it reflects the number of positions (the unit will depend
  // on the file type) that can be accessed in the file.
  FilePosition length = 22 [(google.api.field_behavior) = OUTPUT_ONLY];
  // View defines how the chunk is presented. The following fields are
  // only shown in the FULL view:
  // - content
  common.view.v1beta.View view = 23 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Unique identifier of the file.
  // Deprecated: use id instead.
  string file_uid = 1 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // UID of the catalog to which the file belongs.
  // Deprecated, use catalog resource ID, which can be extracted from the name
  // field.
  string catalog_uid = 10 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];

  // 6 is reserved for the retrievable field.
  reserved 6;
}

// upload file request
message UploadCatalogFileRequest {
  // owner/namespace uid
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // file
  File file = 3;
}

// upload file response
message UploadCatalogFileResponse {
  // file
  File file = 1;
}

// delete file request
message DeleteCatalogFileRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// delete file response
message DeleteCatalogFileResponse {
  // The file uid.
  string file_uid = 1;
}

// Process Catalog File Request
message ProcessCatalogFilesRequest {
  // The file uid.
  repeated string file_uids = 1 [(google.api.field_behavior) = REQUIRED];
}

// Process Catalog File Response
message ProcessCatalogFilesResponse {
  // The file uid.
  repeated File files = 1;
}

// ListCatalogFilesFilter contains a set of properties to filter a catalog file
// list by.
message ListCatalogFilesFilter {
  // File UIDs.
  repeated string file_uids = 1 [(google.api.field_behavior) = OPTIONAL];
  // Processing status of the files.
  FileProcessStatus process_status = 2 [(google.api.field_behavior) = OPTIONAL];
}

// ListCatalogFilesRequest represents a request to list files in a catalog.
message ListCatalogFilesRequest {
  // ID of the catalog owner.
  string namespace_id = 1;
  // Catalog ID.
  string catalog_id = 2;
  // The maximum number of files to return. If this parameter is unspecified,
  // at most 10 files will be returned. The cap value for this parameter is 100
  // (i.e. any value above that will be coerced to 100).
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
  // Page token. By default, the first page will be returned.
  string page_token = 4 [(google.api.field_behavior) = OPTIONAL];
  // Filter to apply to the list of files.
  ListCatalogFilesFilter filter = 5 [(google.api.field_behavior) = OPTIONAL];
  // Order by field, with options for ordering by `create_time` or
  // `update_time`.
  // Format: `order_by=create_time asc` or `order_by=update_time desc`, default
  // is `create_time asc`.
  optional string order_by = 7 [(google.api.field_behavior) = OPTIONAL];
  // View allows clients to specify the desired view in the response.
  optional common.view.v1beta.View view = 8 [(google.api.field_behavior) = OPTIONAL];
}

// ListCatalogFilesResponse contains a paginated list of catalog files.
message ListCatalogFilesResponse {
  // A list of files matching the request parameters.
  repeated File files = 1;
  // Total number of files.
  int32 total_size = 2;
  // Requested page size.
  int32 page_size = 3;
  // Next page token.
  string next_page_token = 4;
  // The filter applied to the list of files.
  ListCatalogFilesFilter filter = 5;
}

// GetCatalogFileRequest represents a request to get a catalog file.
message GetCatalogFileRequest {
  // The namespace id.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // The catalog id.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // The file uid.
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// GetCatalogFileResponse represents a response for getting a catalog file.
message GetCatalogFileResponse {
  // The file.
  File file = 1;
}

// MoveFileToCatalogRequest represents a request to move a file to another catalog.
message MoveFileToCatalogRequest {
  // The file uid.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
  // namespace id
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 3 [(google.api.field_behavior) = REQUIRED];
  // The target catalog id.
  string to_catalog_id = 4 [(google.api.field_behavior) = REQUIRED];
}

// MoveFileToCatalogResponse represents a response for moving a file to another catalog.
message MoveFileToCatalogResponse {
  // The file uid.
  string file_uid = 1;
}

// GetFileCatalogRequest represents a request to view the processing outputs of
// a file in a catalog.
message GetFileCatalogRequest {
  // Namespace ID and catalog ID are kept for backwards compatibility, but we
  // might consider flattening the structure.

  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Catalog ID.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // File UID.
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// GetFileCatalogResponse contains the processing outputs of a file in a
// catalog.
message GetFileCatalogResponse {
  // TODO GetFileCatalog should be deprecated. GetCatalogFile with a FULL view
  // (to be implemented) parameter should be used instead.

  // FileMetadata contains information about the file.
  message FileMetadata {
    // File UID.
    string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Filename
    string filename = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // File Type.
    FileType file_type = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Size.
    int64 size = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Creation timestamp
    google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Processing status of the file.
    FileProcessStatus process_status = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Text contains the text representation of the file.
  message Text {
    // Pipelines used to process the file.
    repeated string pipelines = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Text representation of the file.
    string content = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Chunk count in the text.
    int32 chunk_count = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Token count in the text
    int32 token_count = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Last update timestamp for the text.
    google.protobuf.Timestamp update_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // ChunkType contains the different types of a chunk.
  enum ChunkType {
    // Unspecified.
    CHUNK_TYPE_UNSPECIFIED = 0;
    // Text.
    CHUNK_TYPE_TEXT = 1;
    // Image.
    CHUNK_TYPE_IMAGE = 2;
    // Audio.
    CHUNK_TYPE_AUDIO = 3;
    // Video.
    CHUNK_TYPE_VIDEO = 4;
  }

  // Chunk is a delimited part of the converted text.
  message Chunk {
    // Chunk UID.
    string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Chunk type. I.e: text, image, audio, video.
    ChunkType type = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Start position in the text.
    int32 start_position = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // End position in the text.
    int32 end_position = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Content.
    string content = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Token count in the chunk.
    int32 token_count = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Chunk embedding.
    repeated float embedding = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Creation time of the chunk.
    google.protobuf.Timestamp create_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Retrievability of the chunk.
    bool retrievable = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Base-64 representation of the original file contents.
  string original_data = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File metadata.
  FileMetadata file_metadata = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Converted text.
  Text text = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Chunks.
  repeated Chunk chunks = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetFileAsMarkdownRequest represents a request to fetch the Markdown
// representation of a file.
message GetFileAsMarkdownRequest {
  // File UID.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetFileAsMarkdownResponse contains a blob with the Markdown representation
// of a file.
message GetFileAsMarkdownResponse {
  // The Markdown representation of a file.
  string markdown = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The SourceFile message represents a source file in the artifact system.
message SourceFile {
  // Resource name of the original file the chunk was extracted from.
  string file = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content
  string content = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creation time of the source file
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the source file
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // original file name
  string original_file_name = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // original file unique identifier
  // Deprecated: use file instead.
  string original_file_uid = 1 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// get source file request
message GetSourceFileRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // unique identifier of the original uploaded file
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// get source file response
message GetSourceFileResponse {
  // source file(either original file or converted file)
  SourceFile source_file = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// get file summary request
message GetFileSummaryRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // unique identifier of the original uploaded file
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// get file summary response
message GetFileSummaryResponse {
  // summary of the file
  string summary = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// search source file request
message SearchSourceFilesRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // search file uid
  repeated string file_uids = 2 [(google.api.field_behavior) = REQUIRED];
}

// search source file response
message SearchSourceFilesResponse {
  // source files
  repeated SourceFile source_files = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}
