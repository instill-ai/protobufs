syntax = "proto3";

package artifact.artifact.v1alpha;

import "artifact/artifact/v1alpha/file.proto";
import "artifact/artifact/v1alpha/object.proto";
import "artifact/artifact/v1alpha/system.proto";
import "artifact/artifact/v1alpha/update.proto";

// ArtifactPrivateService exposes the private endpoints that allow clients to
// manage artifacts.
service ArtifactPrivateService {
  // Get Object (admin only)
  rpc GetObjectAdmin(GetObjectAdminRequest) returns (GetObjectAdminResponse);

  // Get Object URL (admin only)
  rpc GetObjectURLAdmin(GetObjectURLAdminRequest) returns (GetObjectURLAdminResponse);

  // Update Object (admin only)
  rpc UpdateObjectAdmin(UpdateObjectAdminRequest) returns (UpdateObjectAdminResponse);

  // GetFileAsMarkdownAdmin and GetChatFileAdmin have been removed.
  // Use GetFile with VIEW_CONTENT instead to get the converted markdown via pre-signed URL.

  // Delete a catalog file (admin only)
  //
  // Deletes a file from a catalog using only the file ID. Unlike the public
  // DeleteFile endpoint which requires namespace and catalog IDs, this
  // admin endpoint automatically looks up the file's catalog and owner to
  // perform the deletion. Primarily used for integration testing and internal
  // operations where the caller has a file ID but not the full resource path.
  // Authentication metadata is injected automatically based on the file owner.
  rpc DeleteFileAdmin(DeleteFileAdminRequest) returns (DeleteFileAdminResponse);

  // Knowledge Base Update Admin APIs

  // Execute knowledge base update (admin only)
  rpc ExecuteKnowledgeBaseUpdateAdmin(ExecuteKnowledgeBaseUpdateAdminRequest) returns (ExecuteKnowledgeBaseUpdateAdminResponse);

  // Abort knowledge base update (admin only)
  //
  // Cancels ongoing update workflows and cleans up staging KB resources
  // (both finished and unfinished). Can abort specific catalogs by ID or
  // all currently updating catalogs if no IDs provided. Sets catalog status
  // to 'aborted'.
  rpc AbortKnowledgeBaseUpdateAdmin(AbortKnowledgeBaseUpdateAdminRequest) returns (AbortKnowledgeBaseUpdateAdminResponse);

  // Rollback a specific catalog to previous version (admin only)
  rpc RollbackAdmin(RollbackAdminRequest) returns (RollbackAdminResponse);

  // Purge rollback immediately (admin only)
  rpc PurgeRollbackAdmin(PurgeRollbackAdminRequest) returns (PurgeRollbackAdminResponse);

  // Set rollback retention period (admin only)
  rpc SetRollbackRetentionAdmin(SetRollbackRetentionAdminRequest) returns (SetRollbackRetentionAdminResponse);

  // Get knowledge base update status (admin only)
  rpc GetKnowledgeBaseUpdateStatusAdmin(GetKnowledgeBaseUpdateStatusAdminRequest) returns (GetKnowledgeBaseUpdateStatusAdminResponse);

  // System Management Admin APIs

  // Create a new system configuration (admin only)
  rpc CreateSystemAdmin(CreateSystemAdminRequest) returns (CreateSystemAdminResponse);

  // Get a system configuration (admin only)
  rpc GetSystemAdmin(GetSystemAdminRequest) returns (GetSystemAdminResponse);

  // Update an existing system configuration (admin only)
  rpc UpdateSystemAdmin(UpdateSystemAdminRequest) returns (UpdateSystemAdminResponse);

  // Delete a system configuration (admin only)
  rpc DeleteSystemAdmin(DeleteSystemAdminRequest) returns (DeleteSystemAdminResponse);

  // List all system configurations (admin only)
  rpc ListSystemsAdmin(ListSystemsAdminRequest) returns (ListSystemsAdminResponse);

  // Rename a system configuration (admin only)
  rpc RenameSystemAdmin(RenameSystemAdminRequest) returns (RenameSystemAdminResponse);

  // Set the default system configuration (admin only)
  rpc SetDefaultSystemAdmin(SetDefaultSystemAdminRequest) returns (SetDefaultSystemAdminResponse);

  // Get the current default system configuration (admin only)
  rpc GetDefaultSystemAdmin(GetDefaultSystemAdminRequest) returns (GetDefaultSystemAdminResponse);
}
