syntax = "proto3";

package artifact.artifact.v1alpha;

import "artifact/artifact/v1alpha/file.proto";
import "artifact/artifact/v1alpha/object.proto";
import "artifact/artifact/v1alpha/repository.proto";

// ArtifactPrivateService exposes the private endpoints that allow clients to
// manage artifacts.
service ArtifactPrivateService {
  // List the tags in a repository.
  //
  // Returns a portion of the versions that the specified repository holds.
  rpc ListRepositoryTags(ListRepositoryTagsRequest) returns (ListRepositoryTagsResponse);

  // Get details of repository tag.
  rpc GetRepositoryTag(GetRepositoryTagRequest) returns (GetRepositoryTagResponse);

  // Create a new repository tag.
  //
  // Adds a tag to a given repository. Note that this operation is only
  // intended to register the information of an *already created* tag. This
  // method should be called as part of the content push operation, right after
  // the [PUT Manifest](https://distribution.github.io/distribution/#put-manifest) has
  // succeeded. The distribution registry won't hold data such as the push time
  // or the tag digest, so `artifact-backend` will hold this information locally.
  rpc CreateRepositoryTag(CreateRepositoryTagRequest) returns (CreateRepositoryTagResponse);

  // Delete a repository tag.
  rpc DeleteRepositoryTag(DeleteRepositoryTagRequest) returns (DeleteRepositoryTagResponse);

  // Get Object
  rpc GetObject(GetObjectRequest) returns (GetObjectResponse);

  // Get Object URL
  rpc GetObjectURL(GetObjectURLRequest) returns (GetObjectURLResponse);

  // Update Object
  rpc UpdateObject(UpdateObjectRequest) returns (UpdateObjectResponse);

  // Get file as Markdown
  //
  // Returns the Markdown representation of a file.
  rpc GetFileAsMarkdown(GetFileAsMarkdownRequest) returns (GetFileAsMarkdownResponse);
}
