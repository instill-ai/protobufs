syntax = "proto3";

package artifact.artifact.v1alpha;

// Artifact definitions
import "artifact/artifact/v1alpha/artifact.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// GetFileCatalogRequest represents a request to view the processing outputs of
// a file in a catalog.
message GetFileCatalogRequest {
  // Namespace ID and catalog ID are kept for backwards compatibility, but we
  // might consider flattening the structure.

  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Catalog ID.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // File UID.
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// GetFileCatalogResponse contains the processing outputs of a file in a
// catalog.
message GetFileCatalogResponse {
  // TODO GetFileCatalog should be deprecated. GetCatalogFile with a FULL view
  // (to be implemented) parameter should be used instead.

  // FileMetadata contains information about the file.
  message FileMetadata {
    // File UID.
    string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Filename
    string filename = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // File Type.
    FileType file_type = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Size.
    int64 size = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Creation timestamp
    google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Processing status of the file.
    FileProcessStatus process_status = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Text contains the text representation of the file.
  message Text {
    // Pipelines used to process the file.
    repeated string pipelines = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Text representation of the file.
    string content = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Chunk count in the text.
    int32 chunk_count = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Token count in the text
    int32 token_count = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Last update timestamp for the text.
    google.protobuf.Timestamp update_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // ChunkType contains the different types of a chunk.
  enum ChunkType {
    // Unspecified.
    CHUNK_TYPE_UNSPECIFIED = 0;
    // Text.
    CHUNK_TYPE_TEXT = 1;
    // Image.
    CHUNK_TYPE_IMAGE = 2;
    // Audio.
    CHUNK_TYPE_AUDIO = 3;
    // Video.
    CHUNK_TYPE_VIDEO = 4;
  }

  // Chunk is a delimited part of the converted text.
  message Chunk {
    // Chunk UID.
    string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Chunk type. I.e: text, image, audio, video.
    ChunkType type = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Start position in the text.
    int32 start_position = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // End position in the text.
    int32 end_position = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Content.
    string content = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Token count in the chunk.
    int32 token_count = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Chunk embedding.
    repeated float embedding = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Creation time of the chunk.
    google.protobuf.Timestamp create_time = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
    // Retrievability of the chunk.
    bool retrievable = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Base-64 representation of the original file contents.
  string original_data = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File metadata.
  FileMetadata file_metadata = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Converted text.
  Text text = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Chunks.
  repeated Chunk chunks = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetFileAsMarkdownRequest represents a request to fetch the Markdown
// representation of a file.
message GetFileAsMarkdownRequest {
  // File UID.
  string file_uid = 1 [(google.api.field_behavior) = REQUIRED];
}

// GetFileAsMarkdownResponse contains a blob with the Markdown representation
// of a file.
message GetFileAsMarkdownResponse {
  // The Markdown representation of a file.
  string markdown = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetChatFileRequest ...
message GetChatFileRequest {
  option deprecated = true;

  // id of the namespace
  string namespace_id = 1;
  // id of the catalog
  string catalog_id = 2;
  // id of the file(i.e. file name)
  string file_id = 3;
}

// GetChatFileResponse ...
message GetChatFileResponse {
  option deprecated = true;

  // converted markdown content
  bytes markdown = 1;
}
