syntax = "proto3";

package artifact.artifact.v1alpha;

import "artifact/artifact/v1alpha/artifact.proto";
import "common/view/v1beta/view.proto";
// Protocol Buffers Well-Known Types
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

// FileMediaType describes the type of a catalog file.
enum FileMediaType {
  // Unspecified.
  FILE_MEDIA_TYPE_UNSPECIFIED = 0;
  // Document.
  FILE_MEDIA_TYPE_DOCUMENT = 1;
  // Image.
  FILE_MEDIA_TYPE_IMAGE = 2;
  // Audio.
  FILE_MEDIA_TYPE_AUDIO = 3;
  // Video.
  FILE_MEDIA_TYPE_VIDEO = 4;
}

// ContentType describes the type of a chunk content.
enum ContentType {
  // Unspecified.
  CONTENT_TYPE_UNSPECIFIED = 0;
  // Chunks represent a part of the original file.
  CONTENT_TYPE_CHUNK = 1;
  // Summary of the original file.
  CONTENT_TYPE_SUMMARY = 2;
  // Original chunk content enhanced with additional information.
  CONTENT_TYPE_AUGMENTED = 3;
}

// Chunk represents a part of the original file, which will be used for
// embedding and, later, retrieval.
message Chunk {
  // Reference represents the position of a chunk within its source file.
  message Reference {
    // Start position of the chunk within the file
    FilePosition start = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // End position of the chunk within the file
    FilePosition end = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // Unique identifier of the chunk
  string chunk_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Chunk searchability
  bool retrievable = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Token count for the chunk
  uint32 tokens = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Chunk creation time
  google.protobuf.Timestamp create_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Unique identifier of the original file
  string original_file_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Content type
  ContentType content_type = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // reference to the position of the chunk within the original file
  Reference reference = 10 [(google.api.field_behavior) = OUTPUT_ONLY];
  // reference to the position of the chunk within the markdown (source) file.
  optional Reference md_reference = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
  // View defines how the chunk is presented. The following fields are
  // only shown in the FULL view:
  // - content
  // - embedding
  common.view.v1beta.View view = 12 [(google.api.field_behavior) = OUTPUT_ONLY];
  // String representation of the chunk.
  string content = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Vector representation of the chunk.
  repeated float embedding = 14 [(google.api.field_behavior) = OUTPUT_ONLY];

  // start position of the chunk in the source file
  // Deprecated: use reference instead
  uint32 start_pos = 4 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // end position of the chunk in the source file
  // Deprecated: use reference instead
  uint32 end_pos = 5 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// ListChunksRequest represents a request to list the chunks of a catalog file.
message ListChunksRequest {
  // ID of the catalog owner.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Catalog ID.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // Unique file identifier.
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
  // The maximum number of items to return. The default and cap values are 10
  // and 100, respectively.
  optional int32 page_size = 4 [(google.api.field_behavior) = OPTIONAL];
  // Page token. By default, the first page will be returned.
  optional string page_token = 5 [(google.api.field_behavior) = OPTIONAL];

  // View allows clients to specify the desired view in the response.
  optional common.view.v1beta.View view = 6 [(google.api.field_behavior) = OPTIONAL];

  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
  // The following filters are supported:
  // - `contentType`
  //
  // **Examples**:
  // - List chunks with a "chunk" content type: `contentType="CONTENT_TYPE_CHUNK"`.
  optional string filter = 7 [(google.api.field_behavior) = OPTIONAL];
}

// ListChunksResponse contains a paginated list of chunks.
message ListChunksResponse {
  // A list of chunks matching the request parameters.
  repeated Chunk chunks = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Next page token.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Total number of items.
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Search chunks request
message SearchChunksRequest {
  // owner/namespace id (not uid)
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chunk uids
  repeated string chunk_uids = 2 [(google.api.field_behavior) = REQUIRED];
}

// Search chunks response
message SearchChunksResponse {
  // repeated chunks
  repeated Chunk chunks = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The SourceFile message represents a source file in the artifact system.
message SourceFile {
  // original file unique identifier
  string original_file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content
  string content = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creation time of the source file
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the source file
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // original file name
  string original_file_name = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// get source file request
message GetSourceFileRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // unique identifier of the original uploaded file
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// get source file response
message GetSourceFileResponse {
  // source file(either original file or converted file)
  SourceFile source_file = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// get file summary request
message GetFileSummaryRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // catalog id
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // unique identifier of the original uploaded file
  string file_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// get file summary response
message GetFileSummaryResponse {
  // summary of the file
  string summary = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// search source file request
message SearchSourceFilesRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // search file uid
  repeated string file_uids = 2 [(google.api.field_behavior) = REQUIRED];
}

// search source file response
message SearchSourceFilesResponse {
  // source files
  repeated SourceFile source_files = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Create chunk response
message UpdateChunkRequest {
  // chunk uid
  string chunk_uid = 1 [(google.api.field_behavior) = REQUIRED];
  // whether the chunk is retrievable
  bool retrievable = 2 [(google.api.field_behavior) = REQUIRED];
}

// update chunk response
message UpdateChunkResponse {
  // chunk
  Chunk chunk = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Similar chunk search request
message SimilarityChunksSearchRequest {
  // ID of the namespace owning the catalog.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // ID of the catalog.
  string catalog_id = 2 [(google.api.field_behavior) = REQUIRED];
  // Text prompt to look for similarities.
  string text_prompt = 3 [(google.api.field_behavior) = REQUIRED];
  // Top K. Default value: 5.
  uint32 top_k = 4 [(google.api.field_behavior) = OPTIONAL];
  // 5 is reserved for file_name, deprecated by file_uid.
  reserved 5;
  // Content type.
  ContentType content_type = 6 [(google.api.field_behavior) = OPTIONAL];
  // File type.
  FileMediaType file_media_type = 7 [(google.api.field_behavior) = OPTIONAL];
  // 8 is reserved for file_uid, deprecated by file_uids.
  reserved 8;
  // File UIDs. When this field is provided, the response will return only
  // chunks that belong to the specified file UIDs.
  repeated string file_uids = 9 [(google.api.field_behavior) = OPTIONAL];
}

// Similar chunk search response
message SimilarityChunksSearchResponse {
  // chunks
  repeated SimilarityChunk similar_chunks = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// similarity chunks
message SimilarityChunk {
  // chunk uid
  string chunk_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // similarity score
  float similarity_score = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content
  string text_content = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // source file's name
  string source_file = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chunk
  Chunk chunk_metadata = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}
