syntax = "proto3";

package artifact.artifact.v1alpha;

import "artifact/artifact/v1alpha/file.proto";
// Google API
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/timestamp.proto";

// The Chunk message represents a chunk of data in the artifact system.
message Chunk {
  option (google.api.resource) = {pattern: "namespaces/{namespace}/knowledge-bases/{knowledge_base}/files/{file}/chunks/{chunk}"};

  // Type describes the type of a chunk content.
  enum Type {
    // Unspecified.
    TYPE_UNSPECIFIED = 0;
    // Content.
    TYPE_CONTENT = 1;
    // Summary.
    TYPE_SUMMARY = 2;
    // Augmented.
    TYPE_AUGMENTED = 3;
  }

  // Reference represents the position of a chunk within a file.
  message Reference {
    // Start position of the chunk within the file.
    File.Position start = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // End position of the chunk within the file.
    File.Position end = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // The chunk uid (internal UUID, also used as id).
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The chunk id (same as uid).
  string id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The resource name of the chunk.
  // Format: `namespaces/{namespace}/knowledge-bases/{knowledge_base}/files/{file}/chunks/{chunk}`.
  string name = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // whether the chunk is retrievable
  bool retrievable = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // tokens of the chunk
  uint32 tokens = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // creation time of the chunk
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // original file unique identifier
  string original_file_id = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chunk type
  Type type = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Reference to the position of the chunk within the original file.
  Reference reference = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Reference to the position of the chunk within the Markdown (source) file.
  Reference markdown_reference = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // start position of the chunk in the source file
  // Deprecated: use markdown_reference instead
  uint32 start_pos = 11 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
  // end position of the chunk in the source file
  // Deprecated: use markdown_reference instead
  uint32 end_pos = 12 [
    deprecated = true,
    (google.api.field_behavior) = OUTPUT_ONLY
  ];
}

// ListChunksRequest represents a request to list chunks in the artifact system.
// The response will be a list of chunks based on the request, i.e., response will
// have chunks of the file with file_id and chunks specified in chunk_ids.
message ListChunksRequest {
  // owner/namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // knowledge base id
  string knowledge_base_id = 2 [(google.api.field_behavior) = REQUIRED];
  // file id
  string file_id = 3 [(google.api.field_behavior) = REQUIRED];
  // The maximum number of chunks to return. If this parameter is unspecified,
  // at most 100 chunks will be returned. The cap value for this parameter
  // is 1000 (i.e. any value above that will be coerced to 1000).
  optional int32 page_size = 4 [(google.api.field_behavior) = OPTIONAL];
  // Page token.
  optional string page_token = 5 [(google.api.field_behavior) = OPTIONAL];
  // Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
  // - `id="<uuid>"` or `uid="<uuid>"` - Filter by specific chunk ID/UID
  // - `chunk_type="CHUNK_TYPE_TEXT"` - Filter by chunk type
  // - `retrievable=true` - Filter by retrievable status
  //
  // **Examples**:
  // - List specific chunks: `id="uuid1" OR id="uuid2"`
  // - List text chunks: `chunk_type="CHUNK_TYPE_TEXT"`
  // - List retrievable chunks: `retrievable=true`
  optional string filter = 6 [(google.api.field_behavior) = OPTIONAL];
}

// ListChunksResponse represents a response containing a list of chunks in the artifact system.
message ListChunksResponse {
  // repeated chunks
  repeated Chunk chunks = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetChunkRequest represents a request to get a chunk.
message GetChunkRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Knowledge Base ID.
  string knowledge_base_id = 2 [(google.api.field_behavior) = REQUIRED];
  // File ID.
  string file_id = 3 [(google.api.field_behavior) = REQUIRED];
  // Chunk ID.
  string chunk_id = 4 [(google.api.field_behavior) = REQUIRED];
}

// GetChunkResponse represents a response for getting a chunk.
message GetChunkResponse {
  // The chunk resource.
  Chunk chunk = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateChunkRequest represents a request to update a chunk.
message UpdateChunkRequest {
  // Namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // Knowledge Base ID.
  string knowledge_base_id = 2 [(google.api.field_behavior) = REQUIRED];
  // Chunk ID.
  string chunk_id = 3 [(google.api.field_behavior) = REQUIRED];
  // whether the chunk is retrievable
  bool retrievable = 4 [(google.api.field_behavior) = REQUIRED];
}

// UpdateChunkResponse represents a response for updating a chunk.
message UpdateChunkResponse {
  // chunk
  Chunk chunk = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// SearchChunksRequest represents a request to search for similar chunks.
message SearchChunksRequest {
  // ID of the namespace owning the knowledge base.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // ID of the knowledge base.
  string knowledge_base_id = 2 [(google.api.field_behavior) = REQUIRED];
  // Text prompt to look for similarities.
  string text_prompt = 3 [(google.api.field_behavior) = REQUIRED];
  // Top K. Default value: 5.
  uint32 top_k = 4 [(google.api.field_behavior) = OPTIONAL];
  // 5 is reserved for file_name, deprecated by file_uid.
  reserved 5;
  // Chunk type.
  Chunk.Type type = 6 [(google.api.field_behavior) = OPTIONAL];
  // File media type.
  File.FileMediaType file_media_type = 7 [(google.api.field_behavior) = OPTIONAL];
  // 8 is reserved for file_uid, deprecated by file_uids.
  reserved 8;
  // File IDs. When this field is provided, the response will return only
  // chunks that belong to the specified file IDs.
  repeated string file_ids = 9 [(google.api.field_behavior) = OPTIONAL];
  // Tags to filter by. When multiple tags are provided, OR logic is applied.
  // Note: File ID filter takes precedence over tags, as tags apply to files.
  repeated string tags = 10 [(google.api.field_behavior) = OPTIONAL];
}

// SearchChunksResponse represents a response for searching similar chunks.
message SearchChunksResponse {
  // chunks
  repeated SimilarityChunk similar_chunks = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// SimilarityChunk represents a chunk with similarity score.
message SimilarityChunk {
  // chunk id
  string chunk_id = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // similarity score
  float similarity_score = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // content
  string text_content = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // source file's name
  string source_file = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chunk metadata
  Chunk chunk_metadata = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}
