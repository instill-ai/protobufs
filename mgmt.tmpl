# pylint: disable=no-member,wrong-import-position
from typing import Dict

# common
from google.protobuf import field_mask_pb2, timestamp_pb2

import instill.protogen.common.healthcheck.v1beta.healthcheck_pb2 as healthcheck

# mgmt
import instill.protogen.core.mgmt.v1beta.metric_pb2 as metric_interface
import instill.protogen.core.mgmt.v1beta.mgmt_pb2 as mgmt_interface
import instill.protogen.core.mgmt.v1beta.mgmt_public_service_pb2_grpc as mgmt_service
from instill.clients.base import Client, RequestFactory
from instill.clients.constant import DEFAULT_INSTANCE
from instill.clients.instance import InstillInstance
from instill.configuration import global_config
from instill.utils.error_handler import grpc_handler

# from instill.utils.logger import Logger


class MgmtClient(Client):
    def __init__(self, async_enabled: bool) -> None:
        self.hosts: Dict[str, InstillInstance] = {}
        if DEFAULT_INSTANCE in global_config.hosts:
            self.instance = DEFAULT_INSTANCE
        elif len(global_config.hosts) == 0:
            self.instance = ""
        else:
            self.instance = list(global_config.hosts.keys())[0]

        if global_config.hosts is not None:
            for instance, config in global_config.hosts.items():
                self.hosts[instance] = InstillInstance(
                    mgmt_service.MgmtPublicServiceStub,
                    url=config.url,
                    token=config.token,
                    secure=config.secure,
                    async_enabled=async_enabled,
                )

{{ range . }}
    @grpc_handler
    def {{ .Method | toSnakeCase | convertMethod }}(
        self,
        {{ range .InputTypes }}{{ if not (isEnumOrMsgType .Type) }}{{ .Name | customizeFieldName }}: {{ typeConvert .Name .Type .IsRepeated }}{{ .Name | addDefaultValue | safeHTML }},{{ end }}
        {{ end }}async_enabled: bool = False,
    ) -> {{ .Method | getInterfaceName}}.{{ .OutputTypeName }}:
        if async_enabled:
            return RequestFactory(
                method=self.hosts[self.instance].async_client.{{ .Method }},
                request={{ .Method | getInterfaceName}}.{{ .InputTypeName }}({{ range .InputTypes }}
                    {{ .Name }}={{ .Name | customizeParam | safeHTML }},{{ end }}
                ),
                metadata=self.hosts[self.instance].metadata,
            ).send_async()

        return RequestFactory(
            method=self.hosts[self.instance].client.{{ .Method }},
            request={{ .Method | getInterfaceName}}.{{ .InputTypeName }}({{ range .InputTypes }}
                {{ .Name }}={{ .Name | customizeParam | safeHTML }},{{ end }}
            ),
            metadata=self.hosts[self.instance].metadata,
        ).send_sync()
{{ end }}
