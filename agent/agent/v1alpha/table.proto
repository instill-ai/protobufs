syntax = "proto3";

package agent.agent.v1alpha;

// Google API
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// Table represents a table resource.
message Table {
  // The unique identifier of the table.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The ID of the table.
  string id = 2 [(google.api.field_behavior) = REQUIRED];

  // The title of the table.
  string title = 3 [(google.api.field_behavior) = REQUIRED];

  // A description of the table.
  string description = 4 [(google.api.field_behavior) = OPTIONAL];

  // Additional metadata associated with the table.
  google.protobuf.Struct metadata = 5 [(google.api.field_behavior) = OPTIONAL];

  // The timestamp when the table was created.
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the table was last updated.
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The configuration for the agent.
  message AgentConfig {
    // Whether to enable faithfulness checking for the table.
    bool enable_faithfulness_checking = 1;
  }

  // The configuration for the agent.
  AgentConfig agent_config = 8;
}

// ListTablesRequest represents a request to list tables.
message ListTablesRequest {
  // The ID of the namespace that owns the tables.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The page token for pagination.
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];

  // The maximum number of tables to return.
  int32 page_size = 3 [(google.api.field_behavior) = OPTIONAL];
}

// ListTablesResponse contains the list of tables.
message ListTablesResponse {
  // The list of tables.
  repeated Table tables = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The token for the next page of results.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The total number of tables.
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateTableRequest represents a request to create a table.
message CreateTableRequest {
  // The ID of the namespace where the table will be created.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The table resource to create.
  Table table = 2 [(google.api.field_behavior) = REQUIRED];
}

// CreateTableResponse contains the created table.
message CreateTableResponse {
  // The created table resource.
  Table table = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetTableRequest represents a request to fetch a table.
message GetTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to fetch.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetTableResponse contains the requested table.
message GetTableResponse {
  // The table resource.
  Table table = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateTableRequest represents a request to update a table.
message UpdateTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to update.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The table fields that will replace the existing ones.
  Table table = 3;

  // The update mask specifies the subset of fields that should be modified.
  google.protobuf.FieldMask update_mask = 4 [(google.api.field_behavior) = REQUIRED];
}

// UpdateTableResponse contains the updated table.
message UpdateTableResponse {
  // The updated table resource.
  Table table = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteTableRequest represents a request to delete a table.
message DeleteTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to delete.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteTableResponse is an empty response for deleting a table.
message DeleteTableResponse {}

// The type of the column.
enum Type {
  // The type is not specified.
  TYPE_UNSPECIFIED = 0;

  // The type is a string.
  TYPE_STRING = 1;

  // The type is a number.
  TYPE_NUMBER = 2;

  // The type is a boolean.
  TYPE_BOOLEAN = 3;

  // The type is a url of a file resource.
  TYPE_FILE = 4;
}

// ColumnDefinition represents a column definition in a table.
message ColumnDefinition {
  // The unique identifier of the column.
  string column_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The name of the column.
  // The name of the column. If this differs from the key in the ColumnDefinitions map,
  // the key will be updated to match this value.
  string name = 2 [(google.api.field_behavior) = OPTIONAL];

  // The type of the column.
  Type type = 3 [(google.api.field_behavior) = REQUIRED];

  // The order of the column in the table, starting at 1. This determines the column's position
  // when displaying or processing table data.
  int32 order = 4 [(google.api.field_behavior) = REQUIRED];

  // The configuration for the agent.
  message AgentConfig {
    // The instructions for the agent.
    string instructions = 1;
  }

  // The configuration for the agent.
  AgentConfig agent_config = 5 [(google.api.field_behavior) = OPTIONAL];

  // The sort of the column.
  enum Sort {
    // The sort is not specified.
    SORT_UNSPECIFIED = 0;

    // The sort is ascending.
    SORT_ASCENDING = 1;

    // The sort is descending.
    SORT_DESCENDING = 2;
  }

  // The sort of the column.
  Sort sort = 6 [(google.api.field_behavior) = OPTIONAL];
}

// GetColumnDefinitionsRequest represents a request to fetch column definitions.
message GetColumnDefinitionsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table whose columns to fetch.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetColumnDefinitionsResponse contains the column definitions.
message GetColumnDefinitionsResponse {
  // Map of column names to their definitions.
  map<string, ColumnDefinition> column_definitions = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateColumnDefinitionsRequest represents a request to update column definitions.
message UpdateColumnDefinitionsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table whose columns to update.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // Map of column names to their new definitions.
  map<string, ColumnDefinition> column_definitions = 3;
}

// UpdateColumnDefinitionsResponse contains the updated column definitions.
message UpdateColumnDefinitionsResponse {
  // The updated column definitions.
  map<string, ColumnDefinition> column_definitions = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CellStatus represents the status of a cell.
enum CellStatus {
  // The cell status is not specified.
  CELL_STATUS_UNSPECIFIED = 0;

  // The cell is idle.
  CELL_STATUS_IDLE = 1;

  // The cell is uploading (only for file cells).
  CELL_STATUS_UPLOADING = 2;

  // The cell is pending.
  CELL_STATUS_PENDING = 3;

  // The cell is processing.
  CELL_STATUS_PROCESSING = 4;

  // The cell is failed.
  CELL_STATUS_FAILED = 5;

  // The cell is completed.
  CELL_STATUS_COMPLETED = 6;
}

// Cell represents a cell in a table.
message Cell {
  // The unique identifier of the cell.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The unique identifier of the column this cell belongs to.
  string column_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The row that this cell belongs to.
  string row_uid = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the cell was last updated.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The type of the cell's value.
  Type type = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The value of the cell as a string.
  oneof value {
    // The value of the cell as a string.
    StringCell string_value = 6;

    // The value of the cell as a number.
    NumberCell number_value = 7;

    // The value of the cell as a boolean.
    BooleanCell boolean_value = 8;

    // The value of the cell as a url of a file resource.
    FileCell file_value = 9;
  }

  // Additional metadata for the cell.
  google.protobuf.Struct metadata = 11 [(google.api.field_behavior) = OPTIONAL];

  // The status of the cell.
  CellStatus status = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The transparency of the cell.
  message Transparency {
    // The text of the transparency.
    string text = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // The citations for the cell.
  message Citation {
    // The type of the citation.
    enum Type {
      // The type is not specified.
      TYPE_UNSPECIFIED = 0;

      // The type is a url of a web page.
      TYPE_WEB = 1;

      // The type is a url of a file resource.
      TYPE_FILE = 2;

      // The type is a url of a table resource.
      TYPE_TABLE = 3;
    }

    // The type of the citation.
    Type type = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

    // The url of the citation.
    string url = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

    // The title of the citation.
    string title = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

    // The summary of the citation.
    string summary = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  }

  // The citations for the cell.
  repeated Citation citations = 14 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The transparency of the cell.
  Transparency transparency = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// NullCell represents a null cell.
message NullCell {}

// StringCell represents a cell with a string value.
message StringCell {
  // The value of the cell as a string.
  string value = 1 [(google.api.field_behavior) = REQUIRED];
}

// NumberCell represents a cell with a number value.
message NumberCell {
  // The value of the cell as a number.
  double value = 1 [(google.api.field_behavior) = REQUIRED];
}

// BooleanCell represents a cell with a boolean value.
message BooleanCell {
  // The value of the cell as a boolean.
  bool value = 1 [(google.api.field_behavior) = REQUIRED];
}

// FileCell represents a cell with a url of a file resource.
message FileCell {
  // The URL of the file resource.
  string url = 1 [(google.api.field_behavior) = REQUIRED];

  // File Name
  string name = 2 [(google.api.field_behavior) = REQUIRED];

  // MIME type of the file.
  string mime_type = 3 [(google.api.field_behavior) = REQUIRED];
}

// Row represents a row in a table.
message Row {
  // The unique identifier of the row.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Map of column names to their cell values.
  map<string, Cell> cells = 2 [(google.api.field_behavior) = REQUIRED];

  // The order of the row in the table, starting at 1. This determines the row's position
  // when displaying or processing table data.
  int32 order = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the row was created.
  google.protobuf.Timestamp create_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the row was last updated.
  google.protobuf.Timestamp update_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListRowsRequest represents a request to fetch rows from a table.
message ListRowsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table whose rows to fetch.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // Filter expression for the rows to return.
  reserved 3;

  // Sort expression for ordering the rows.
  reserved 4;

  // The maximum number of rows to return.
  int32 page_size = 5 [(google.api.field_behavior) = OPTIONAL];

  // The page token for pagination.
  string page_token = 6 [(google.api.field_behavior) = OPTIONAL];
}

// ListRowsResponse contains the requested rows.
message ListRowsResponse {
  // The list of rows.
  repeated Row rows = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The token for the next page of results.
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The total number of rows that match the request.
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// InsertRowRequest represents a request to insert a row into a table.
message InsertRowRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to insert rows into.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The rows to insert.
  Row row = 3;

  // The unique identifier of the row to insert before.
  optional string before_row_uid = 4 [(google.api.field_behavior) = OPTIONAL];
}

// InsertRowResponse contains the inserted row.
message InsertRowResponse {
  // The inserted row resource.
  Row row = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateRowRequest represents a request to update a row.
message UpdateRowRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table containing the row.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The unique identifier of the row to update.
  string row_uid = 3 [(google.api.field_behavior) = REQUIRED];

  // The new row data.
  Row row = 4;
}

// UpdateRowResponse contains the updated row.
message UpdateRowResponse {
  // The updated row resource.
  Row row = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateRowsRequest represents a request to update multiple rows.
message UpdateRowsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table containing the rows.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The rows to update.
  repeated Row rows = 3;
}

// UpdateRowsResponse contains the updated rows.
message UpdateRowsResponse {
  // The updated row resources.
  repeated Row rows = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteRowRequest represents a request to delete a row.
message DeleteRowRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table containing the row.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The unique identifier of the row to delete.
  string row_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// DeleteRowResponse is an empty response for deleting a row.
message DeleteRowResponse {}

// DeleteRowsRequest represents a request to delete multiple rows.
message DeleteRowsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table containing the rows.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The unique identifiers of the rows to delete.
  repeated string row_uids = 3 [(google.api.field_behavior) = REQUIRED];
}

// DeleteRowsResponse is an empty response for deleting multiple rows.
message DeleteRowsResponse {}

// MoveRowsRequest represents a request to move multiple rows.
message MoveRowsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table containing the row.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The unique identifiers of the rows to be moved.
  repeated string row_uids = 3 [(google.api.field_behavior) = REQUIRED];

  // The unique identifier of the row to move before.
  optional string before_row_uid = 4 [(google.api.field_behavior) = OPTIONAL];
}

// MoveRowsResponse is an empty response for moving multiple rows.
message MoveRowsResponse {}

// ExportFormat represents the format to export the data in.
enum ExportFormat {
  // The format is not specified.
  EXPORT_FORMAT_UNSPECIFIED = 0;

  // The format is CSV.
  EXPORT_FORMAT_CSV = 1;

  // The format is Parquet.
  EXPORT_FORMAT_PARQUET = 2;
}

// ExportTableRequest represents a request to export table data.
message ExportTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to export.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The format to export the data in.
  ExportFormat format = 3 [(google.api.field_behavior) = REQUIRED];
}

// ExportTableResponse is an empty response for exporting table data.
message ExportTableResponse {
  // The exported data.
  bytes data = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetTableEventsRequest represents a request to fetch events for a table.
message GetTableEventsRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to fetch events for.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetTableEventsResponse contains the events for a table.
message GetTableEventsResponse {
  // The events for the table.
  TableEvent event = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// TableEvent represents an event for a table.
message TableEvent {
  // The event type.
  // In text/event-stream format, this maps to the `event` field.
  string event = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The ID of the event.
  // In text/event-stream format, this maps to the `id` field.
  string id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The data of the event.
  // In text/event-stream format, this maps to the `data` field.
  oneof data {
    // The table that was updated.
    TableUpdatedEvent table_updated_event = 3;

    // The table that was deleted.
    TableDeletedEvent table_deleted_event = 4;

    // The column definitions that were updated.
    ColumnDefinitionsUpdatedEvent column_definitions_updated_event = 5;

    // The row that was inserted.
    RowInsertedEvent row_inserted_event = 6;

    // The row that was updated.
    RowUpdatedEvent row_updated_event = 7;

    // The row that was deleted.
    RowDeletedEvent row_deleted_event = 8;

    // The rows that were moved.
    RowsMovedEvent rows_moved_event = 9;

    // The cell that was updated.
    CellUpdatedEvent cell_updated_event = 10;
  }
}

// TableUpdatedEvent represents an event for a table being updated.
message TableUpdatedEvent {
  // The table that was updated.
  Table table = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// TableDeletedEvent represents an event for a table being deleted.
message TableDeletedEvent {}

// ColumnDefinitionsUpdatedEvent represents an event for column definitions being updated.
message ColumnDefinitionsUpdatedEvent {
  // The column definitions that were updated.
  map<string, ColumnDefinition> column_definitions = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// RowInsertedEvent represents an event for a row being inserted.
message RowInsertedEvent {
  // The row that was inserted.
  // Note: Only the row metadata is returned, not the cell data.
  Row row = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The unique identifier of the row that was inserted before.
  string before_row_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// RowUpdatedEvent represents an event for a row being updated.
message RowUpdatedEvent {
  // The row that was updated.
  // Note: Only the row metadata is returned, not the cell data.
  Row row = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// RowDeletedEvent represents an event for a row being deleted.
message RowDeletedEvent {
  // The unique identifier of the row that was deleted.
  string row_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// RowsMovedEvent represents an event for multiple rows being moved.
message RowsMovedEvent {
  // The unique identifiers of the rows that were moved.
  repeated string row_uids = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The unique identifier of the row that was moved before.
  optional string before_row_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CellUpdatedEvent represents an event for a cell being updated.
message CellUpdatedEvent {
  // The cell that was updated.
  Cell cell = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Whether the event is a delta update.
  // Only cells with string type can be returned in delta mode. Delta mode returns
  // only the changes made to the cell value rather than the full value.
  bool delta_mode = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GenerateMockTableRequest represents a request to generate mock table data.
message GenerateMockTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to generate mock data for.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The number of rows to generate.
  optional int32 num_rows = 3 [(google.api.field_behavior) = OPTIONAL];

  // Whether to enable faithfulness checking for the mock data.
  optional bool enable_faithfulness_checking = 4 [(google.api.field_behavior) = OPTIONAL];

  // The mode to generate mock data.
  enum Mode {
    // The mode is not specified.
    MODE_UNSPECIFIED = 0;

    // The mode is to generate mock data for a file-type table.
    MODE_FILE = 1;

    // The mode is to generate mock data for a sheet-type table.
    MODE_SHEET = 2;
  }

  // The mode to generate mock data.
  Mode mode = 5 [(google.api.field_behavior) = OPTIONAL];
}

// GenerateMockTableResponse is an empty response for generating mock table data.
message GenerateMockTableResponse {}

// BindChatTableRequest represents a request to bind a table to a chat.
message BindChatTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the chat to bind the table to.
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to bind to the chat.
  string table_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// BindChatTableResponse is an empty response for binding a table to a chat.
message BindChatTableResponse {}

// UnbindChatTableRequest represents a request to unbind a table from a chat.
message UnbindChatTableRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the chat to unbind the table from.
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to unbind from the chat.
  string table_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// UnbindChatTableResponse is an empty response for unbinding a table from a chat.
message UnbindChatTableResponse {}

// ListChatTablesRequest represents a request to list tables bound to a chat.
message ListChatTablesRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the chat to list tables for.
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// ListChatTablesResponse contains the list of tables bound to a chat.
message ListChatTablesResponse {
  // The tables bound to the chat.
  repeated Table tables = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}
