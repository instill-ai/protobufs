syntax = "proto3";

package agent.agent.v1alpha;

import "agent/agent/v1alpha/common.proto";
import "agent/agent/v1alpha/table.proto";
// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// AgentConfig represents the config for the chat agent.
message AgentConfig {
  // instructions
  string instructions = 1 [(google.api.field_behavior) = OPTIONAL];
  // connection key(used connection id in recipe) and value(connection uid from namespace).
  map<string, string> connections = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Chat represents a chat
message Chat {
  // unique identifier of the conversation created by the system.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // namespace id.
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation display name.
  string chat_display_name = 3 [(google.api.field_behavior) = OPTIONAL];
  // agent config.
  AgentConfig agent_config = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat create time.
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat update time.
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat delete time.
  google.protobuf.Timestamp delete_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // catalog id
  string catalog_id = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateChatRequest is used to create a new chat
message CreateChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat display name
  string chat_display_name = 2 [(google.api.field_behavior) = OPTIONAL];
  // agent config
  AgentConfig agent_config = 3 [(google.api.field_behavior) = OPTIONAL];
  // catalog id
  string catalog_id = 4 [
    (google.api.field_behavior) = OPTIONAL,
    deprecated = true
  ];
}

// CreateChatResponse returns the created chat
message CreateChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListChatsRequest is used to list chats
message ListChatsRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
  // page token
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
  // if true, all chats will be returned. This has higher priority over page_size and page_token.
  bool if_all = 4 [(google.api.field_behavior) = OPTIONAL];
  // chat_uid this is optional, if provided, only the chat with the given chat_uid will be returned
  // first check chat_uid then check if_all
  string chat_uid = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListChatsResponse returns a list of chats
message ListChatsResponse {
  // chats
  repeated Chat chats = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateChatRequest is used to update a chat
message UpdateChatRequest {
  // namespace id
  string namespace_id = 1;
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // chat display name
  string chat_display_name = 3 [(google.api.field_behavior) = OPTIONAL];
  // ai agent settings
  AgentConfig agent_config = 4 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateChatResponse returns the updated chat
message UpdateChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetChatRequest is used to get a chat
message GetChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetChatResponse returns the chat
message GetChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteChatRequest is used to delete a chat
message DeleteChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteChatResponse is empty as no content needs to be returned
message DeleteChatResponse {}

// MessageSenderProfile describes the public data of a message sender.
// refer to core.mgmt.v1beta.UserProfile for more details.
message MessageSenderProfile {
  // sender uid
  string msg_sender_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // sender id
  string msg_sender_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Display name.
  optional string display_name = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Avatar url. this url might be expired or not exist.
  optional string avatar = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListMessagesRequest is used to list messages in a conversation
message ListMessagesRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // page token
  string page_token = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // If true, all messages will be returned. This has higher priority over page_size and page_token.
  bool if_all = 5 [(google.api.field_behavior) = OPTIONAL];
  // If true, the raw messages will be returned.
  bool return_raw_messages = 6 [(google.api.field_behavior) = OPTIONAL];
}

// ListMessagesResponse returns a list of messages
message ListMessagesResponse {
  // messages
  repeated Message messages = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender profiles
  repeated MessageSenderProfile sender_profiles = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatWithAgentRequest represents a request to send a message
// to a chatbot synchronously and streams back the results.
message ChatWithAgentRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // User message
  string message = 3 [(google.api.field_behavior) = REQUIRED];
  // file UIDs
  repeated string file_uids = 4 [
    (google.api.field_behavior) = OPTIONAL,
    deprecated = true
  ];
  // Whether to enable web search for the chat.
  bool enable_web_search = 5 [(google.api.field_behavior) = OPTIONAL];
  // object UIDs
  repeated string object_uids = 6 [(google.api.field_behavior) = OPTIONAL];

  // The context for the chat.
  ChatContext context = 7 [(google.api.field_behavior) = OPTIONAL];
}

// ChatWithAgentResponse contains the chatbot response.
message ChatWithAgentResponse {
  // Conversation responses.
  repeated google.protobuf.Struct outputs = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// TableBuilderAgentMessage represents a message from the table builder agent.
message TableBuilderAgentMessage {
  // The message.
  string message = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListTableBuilderAgentMessagesRequest is used to list messages in a conversation
message ListTableBuilderAgentMessagesRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // table uid
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // page token
  string page_token = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // If true, all messages will be returned. This has higher priority over page_size and page_token.
  bool if_all = 5 [(google.api.field_behavior) = OPTIONAL];
  // If true, the raw messages will be returned.
  bool return_raw_messages = 6 [(google.api.field_behavior) = OPTIONAL];
}

// ListTableBuilderAgentMessagesResponse returns a list of messages
message ListTableBuilderAgentMessagesResponse {
  // messages
  repeated Message messages = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender profiles
  repeated MessageSenderProfile sender_profiles = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatWithTableBuilderAgentRequest represents a request to chat with the table builder agent.
message ChatWithTableBuilderAgentRequest {
  // The ID of the namespace that owns the table.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];

  // The UID of the table to send a message to.
  string table_uid = 2 [(google.api.field_behavior) = REQUIRED];

  // User message
  string message = 3 [(google.api.field_behavior) = REQUIRED];
}

// ChatWithTableBuilderAgentResponse contains the response from the table builder agent.
message ChatWithTableBuilderAgentResponse {
  // The response from the table builder agent.
  ChatEvent event = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatEvent represents an event for a chat.
message ChatEvent {
  // The event type.
  // In text/event-stream format, this maps to the `event` field.
  string event = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The ID of the event.
  // In text/event-stream format, this maps to the `id` field.
  string id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The data of the event.
  // In text/event-stream format, this maps to the `data` field.
  oneof data {
    // The chat was started.
    ChatStartedEvent chat_started_event = 3;

    // The chat status was updated.
    ChatStatusUpdatedEvent chat_status_updated_event = 4;

    // The chat output was updated.
    ChatOutputUpdatedEvent chat_output_updated_event = 5;

    // The chat name was updated.
    ChatNameUpdatedEvent chat_name_updated_event = 6;

    // The chat replan was triggered.
    ChatReplanTriggeredEvent chat_replan_triggered_event = 7;

    // The chat citation list was updated.
    ChatCitationListUpdatedEvent chat_citation_list_updated_event = 8;

    // The table was created.
    ChatTableCreatedEvent chat_table_created_event = 9;

    // The error was updated.
    ChatErrorUpdatedEvent chat_error_updated_event = 10;

    // The debug output was updated.
    ChatDebugOutputUpdatedEvent chat_debug_output_updated_event = 11;

    // The chat ended.
    ChatEndedEvent chat_ended_event = 12;

    // The chat attachments were updated.
    ChatAttachmentsUpdatedEvent chat_attachments_updated_event = 13;

    // The chat context was updated.
    ChatContextUpdatedEvent chat_context_updated_event = 14;

    // The table was updated.
    ChatTableUpdatedEvent chat_table_updated_event = 15;
  }
}

// ChatStartedEvent represents an event for a chat started
message ChatStartedEvent {
  // The time when chat start
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatStatusUpdatedEvent represents an event for a chat status change
message ChatStatusUpdatedEvent {
  // The time when chat status change
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The updated chat status
  string chat_status = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatOutputUpdatedEvent represents an event for chat has new output
message ChatOutputUpdatedEvent {
  // The time when chat has new output
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The output chunk delta
  string output_chunk_delta = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = REQUIRED
  ];
}

// ChatNameUpdatedEvent represents an event for chat name change
message ChatNameUpdatedEvent {
  // The time when chat name change
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The updated chat name
  string name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatReplanTriggeredEvent represents an event for a triggered replan
message ChatReplanTriggeredEvent {
  // The time when replan trigger
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The current number of replan
  uint32 number_of_replan = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatCitationListUpdatedEvent represents an event for a citation list output
message ChatCitationListUpdatedEvent {
  // The time when citation list output
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The citation list
  repeated Citation citations = 2 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = REQUIRED
  ];
}

// ChatAttachmentsUpdatedEvent represents an event for a attachment list output
message ChatAttachmentsUpdatedEvent {
  // The time when attachment list updated
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The attachments
  ChatAttachments attachments = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatContextUpdatedEvent represents an event for a context updated
message ChatContextUpdatedEvent {
  // The time when context updated
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The context
  ChatContext context = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatTableCreatedEvent represents an event for a table creation
message ChatTableCreatedEvent {
  // The time when table is created
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The created table uid
  string table_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The created table
  Table table = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The created column definitions
  map<string, ColumnDefinition> column_definitions = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatTableUpdatedEvent represents an event for a table update
message ChatTableUpdatedEvent {
  // The time when table updated
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The updated table uid
  string table_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The updated table
  Table table = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The updated column definitions
  map<string, ColumnDefinition> column_definitions = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatErrorUpdatedEvent represents an event for an error
message ChatErrorUpdatedEvent {
  // The time when error triggered
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The error type
  string error_type = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The error message
  string error = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatDebugOutputUpdatedEvent represents an event for debug log
message ChatDebugOutputUpdatedEvent {
  // The time when debug log output
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The debug output
  string debug_output = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ChatEndedEvent represents an event when chat ends
message ChatEndedEvent {
  // The time when chat ends
  google.protobuf.Timestamp create_time = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// FileOption represents a file option.
message FileOption {
  // The UID of the file.
  string file_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The name of the file.
  string name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The file content type.
  string content_type = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The file summary.
  string summary = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// FolderOption represents a folder option.
message FolderOption {
  // The UID of the folder.
  string folder_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The name of the folder.
  string name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The folder description.
  string description = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The UIDs of the files in the folder.
  repeated FileOption file_options = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CatalogOption represents a catalog option.
message CatalogOption {
  // The UID of the catalog.
  string catalog_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The ID of the catalog.
  string catalog_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The catalog description.
  string description = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The UIDs of the files in the catalog.
  repeated FileOption file_options = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// TableOption represents a table option.
message TableOption {
  // The UID of the table.
  string table_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The table description.
  string description = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListContextOptionsRequest represents a request to list context options.
message ListContextOptionsRequest {
  // The namespace ID.
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
}

// ListContextOptionsResponse represents a response to a request to list context options.
message ListContextOptionsResponse {
  // The folder options.
  repeated FolderOption folder_options = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The catalog options.
  repeated CatalogOption catalog_options = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // The table options.
  repeated TableOption table_options = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}
