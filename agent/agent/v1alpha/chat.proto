syntax = "proto3";

package agent.agent.v1alpha;

// Google API
import "google/api/field_behavior.proto";
// Protocol Buffers Well-Known Types
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// AgentConfig represents the config for the chat agent.
message AgentConfig {
  // instructions
  string instructions = 1 [(google.api.field_behavior) = OPTIONAL];
  // connection key(used connection id in recipe) and value(connection uid from namespace).
  map<string, string> connections = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Chat represents a chat
message Chat {
  // unique identifier of the conversation created by the system.
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // namespace id.
  string namespace_id = 2 [(google.api.field_behavior) = REQUIRED];
  // conversation display name.
  string chat_display_name = 3 [(google.api.field_behavior) = OPTIONAL];
  // agent config.
  AgentConfig agent_config = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat create time.
  google.protobuf.Timestamp create_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat update time.
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat delete time.
  google.protobuf.Timestamp delete_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // catalog id
  string catalog_id = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// type of the citations message
enum CitationType {
  // Unspecified citation type
  CITATION_TYPE_UNSPECIFIED = 0;
  // file citation
  CITATION_TYPE_FILE = 1;
  // URL-based citation
  CITATION_TYPE_URL = 2;
  // cell-based citation
  CITATION_TYPE_CELL = 3;
}

// Citation message
message Citation {
  // Type of citation
  CitationType type = 1;
  // Name of the citation
  string name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // URL of the citation (only applicable for URL and cell type citations)
  optional string url = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Chunk UID (only applicable for file type citations)
  repeated string chunk_uid = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File UID (only applicable for file type citations)
  optional string file_uid = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Object UID for download (only applicable for file type citations)
  optional string object_uid = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File summary (only applicable for file type citations)
  optional string summary = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Citation number
  int32 number = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Message represents a single message in a conversation
message Message {
  // message type
  enum MessageType {
    // unspecified
    MESSAGE_TYPE_UNSPECIFIED = 0;
    // text
    MESSAGE_TYPE_TEXT = 1;
  }
  // message uid
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message content
  string content = 3 [(google.api.field_behavior) = REQUIRED];
  // message role e.g., "user" or "assistant" or "agent"
  string role = 4 [(google.api.field_behavior) = REQUIRED];
  // message type
  MessageType type = 5 [(google.api.field_behavior) = REQUIRED];
  // creation time of the message
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the message
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender uid(only for user messages)
  string msg_sender_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // citations(only for agent messages)
  repeated Citation citations = 9 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// CreateChatRequest is used to create a new chat
message CreateChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat display name
  string chat_display_name = 2 [(google.api.field_behavior) = OPTIONAL];
  // agent config
  AgentConfig agent_config = 3 [(google.api.field_behavior) = OPTIONAL];
  // catalog id
  string catalog_id = 4 [(google.api.field_behavior) = OPTIONAL];
}

// CreateChatResponse returns the created chat
message CreateChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListChatsRequest is used to list chats
message ListChatsRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 2 [(google.api.field_behavior) = OPTIONAL];
  // page token
  string page_token = 3 [(google.api.field_behavior) = OPTIONAL];
  // if true, all chats will be returned. This has higher priority over page_size and page_token.
  bool if_all = 4 [(google.api.field_behavior) = OPTIONAL];
  // chat_uid this is optional, if provided, only the chat with the given chat_uid will be returned
  // first check chat_uid then check if_all
  string chat_uid = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListChatsResponse returns a list of chats
message ListChatsResponse {
  // chats
  repeated Chat chats = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateChatRequest is used to update a chat
message UpdateChatRequest {
  // namespace id
  string namespace_id = 1;
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // chat display name
  string chat_display_name = 3 [(google.api.field_behavior) = OPTIONAL];
  // ai agent settings
  AgentConfig agent_config = 4 [(google.api.field_behavior) = OPTIONAL];
}

// UpdateChatResponse returns the updated chat
message UpdateChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// GetChatRequest is used to get a chat
message GetChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// GetChatResponse returns the chat
message GetChatResponse {
  // chat
  Chat chat = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteChatRequest is used to delete a chat
message DeleteChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
}

// DeleteChatResponse is empty as no content needs to be returned
message DeleteChatResponse {}

// CreateMessageRequest is used to create a new message
message CreateMessageRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chag uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // message content
  string content = 3 [(google.api.field_behavior) = REQUIRED];
  // message role
  string role = 4 [(google.api.field_behavior) = REQUIRED];
  // message type
  Message.MessageType type = 5 [(google.api.field_behavior) = REQUIRED];
}

// CreateMessageResponse returns the created message
message CreateMessageResponse {
  // chat uid
  string chat_uid = 1;
  // message
  Message message = 2;
}

// MessageSenderProfile describes the public data of a message sender.
// refer to core.mgmt.v1beta.UserProfile for more details.
message MessageSenderProfile {
  // sender uid
  string msg_sender_uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // sender id
  string msg_sender_id = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Display name.
  optional string display_name = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Avatar url. this url might be expired or not exist.
  optional string avatar = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// ListMessagesRequest is used to list messages in a conversation
message ListMessagesRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // page size
  int32 page_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // page token
  string page_token = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // If true, all messages will be returned. This has higher priority over page_size and page_token.
  bool if_all = 5 [(google.api.field_behavior) = OPTIONAL];
}

// ListMessagesResponse returns a list of messages
message ListMessagesResponse {
  // messages
  repeated Message messages = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // next page token
  string next_page_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // total size
  int32 total_size = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender profiles
  repeated MessageSenderProfile sender_profiles = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// UpdateMessageRequest is used to update a message
message UpdateMessageRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // message uid
  string message_uid = 3 [(google.api.field_behavior) = REQUIRED];
  // new message content
  string content = 4 [(google.api.field_behavior) = REQUIRED];
}

// UpdateMessageResponse returns the updated message
message UpdateMessageResponse {
  // message
  Message message = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// DeleteMessageRequest is used to delete a message
message DeleteMessageRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // message uid
  string message_uid = 3 [(google.api.field_behavior) = REQUIRED];
}

// DeleteMessageResponse is empty as no content needs to be returned
message DeleteMessageResponse {}

// ChatRequest represents a request to send a message
// to a chatbot synchronously and streams back the results.
message ChatRequest {
  // namespace id
  string namespace_id = 1 [(google.api.field_behavior) = REQUIRED];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = REQUIRED];
  // User message
  string message = 3 [(google.api.field_behavior) = REQUIRED];
}

// ChatResponse contains the chatbot response.
message ChatResponse {
  // Conversation responses.
  repeated google.protobuf.Struct outputs = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}
