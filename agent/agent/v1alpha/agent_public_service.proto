syntax = "proto3";

package agent.agent.v1alpha;

// Agent definitions
import "agent/agent/v1alpha/agent.proto";
import "agent/agent/v1alpha/chat.proto";
import "agent/agent/v1alpha/table.proto";
// Google API
import "google/api/annotations.proto";
import "google/api/visibility.proto";
// OpenAPI definition
import "protoc-gen-openapiv2/options/annotations.proto";

// AgentPublicService exposes the public endpoints that allow clients to
// manage agents.
service AgentPublicService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {description: "Public Agent endpoints"};

  // Check if the agent server is alive
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__liveness"
      additional_bindings: [
        {get: "/v1alpha/health/agent"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Check if the agent server is ready
  //
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get: "/v1alpha/__readiness"
      additional_bindings: [
        {get: "/v1alpha/ready/agent"}]
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }

  // Create a chat
  //
  // Creates a chat.
  rpc CreateChat(CreateChatRequest) returns (CreateChatResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/chats"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List chats
  //
  // Returns a list of chats.
  rpc ListChats(ListChatsRequest) returns (ListChatsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/chats"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update a chat
  //
  // Updates a chat.
  rpc UpdateChat(UpdateChatRequest) returns (UpdateChatResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get a chat
  //
  // Gets a chat.
  rpc GetChat(GetChatRequest) returns (GetChatResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete a chat
  //
  // Deletes a chat.
  rpc DeleteChat(DeleteChatRequest) returns (DeleteChatResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Create a message
  //
  // Creates a message.
  rpc CreateMessage(CreateMessageRequest) returns (CreateMessageResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/messages"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List messages
  //
  // Returns a paginated list of messages.
  rpc ListMessages(ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/messages"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update a message
  //
  // Updates a message.
  rpc UpdateMessage(UpdateMessageRequest) returns (UpdateMessageResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/messages/{message_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete a message
  //
  // Deletes a message.
  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/messages/{message_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Chat
  //
  // Chat sends a message asynchronously and streams back the response.
  // This method is intended for real-time conversation with a chatbot
  // and the response needs to be processed incrementally.
  rpc Chat(ChatRequest) returns (ChatResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/chat"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "üçé Agent"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Bind table to chat
  //
  // Binds a table to a chat.
  rpc BindChatTable(BindChatTableRequest) returns (BindChatTableResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/bind-table"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Unbind table from chat
  //
  // Unbinds a table from a chat.
  rpc UnbindChatTable(UnbindChatTableRequest) returns (UnbindChatTableResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/unbind-table"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List chat tables
  //
  // Returns a list of tables bound to a chat.
  rpc ListChatTables(ListChatTablesRequest) returns (ListChatTablesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/chats/{chat_uid}/tables"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List tables
  //
  // Returns a paginated list of tables.
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/tables"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Create a table
  //
  // Creates a table.
  rpc CreateTable(CreateTableRequest) returns (CreateTableResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/tables"
      body: "table"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get table
  //
  // Gets a table.
  rpc GetTable(GetTableRequest) returns (GetTableResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update table
  //
  // Updates a table.
  rpc UpdateTable(UpdateTableRequest) returns (UpdateTableResponse) {
    option (google.api.http) = {
      patch: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}"
      body: "table"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete table
  //
  // Deletes a table.
  rpc DeleteTable(DeleteTableRequest) returns (DeleteTableResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get column definitions
  //
  // Gets column definitions for a table.
  rpc GetColumnDefinitions(GetColumnDefinitionsRequest) returns (GetColumnDefinitionsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/column-definitions"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update column definitions
  //
  // Updates column definitions for a table.
  rpc UpdateColumnDefinitions(UpdateColumnDefinitionsRequest) returns (UpdateColumnDefinitionsResponse) {
    option (google.api.http) = {
      put: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/column-definitions"
      body: "column_definitions"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // List rows
  //
  // Returns list of rows.
  rpc ListRows(ListRowsRequest) returns (ListRowsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/rows"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Insert row
  //
  // Inserts a row into a table.
  rpc InsertRow(InsertRowRequest) returns (InsertRowResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/rows"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update row
  //
  // Updates a row in a table.
  rpc UpdateRow(UpdateRowRequest) returns (UpdateRowResponse) {
    option (google.api.http) = {
      patch: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/rows/{row_uid}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Update rows
  //
  // Updates multiple rows in a table.
  rpc UpdateRows(UpdateRowsRequest) returns (UpdateRowsResponse) {
    option (google.api.http) = {
      patch: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/rows"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete row
  //
  // Deletes a row from a table.
  rpc DeleteRow(DeleteRowRequest) returns (DeleteRowResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/rows/{row_uid}"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Delete rows
  //
  // Deletes multiple rows from a table.
  rpc DeleteRows(DeleteRowsRequest) returns (DeleteRowsResponse) {
    option (google.api.http) = {delete: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/rows"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Move row
  //
  // Moves a row to a new position in a table.
  rpc MoveRows(MoveRowsRequest) returns (MoveRowsResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/move-rows"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Get table events
  //
  // Returns a list of events for a table.
  rpc GetTableEvents(GetTableEventsRequest) returns (stream GetTableEventsResponse) {
    option (google.api.http) = {get: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/events"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Export table
  //
  // Exports table data.
  rpc ExportTable(ExportTableRequest) returns (ExportTableResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/export"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      tags: "Table"
      extensions: {
        key: "x-stage"
        value: {string_value: "alpha"}
      }
    };
  }

  // Generate mock table
  //
  // Generates mock table data.
  // This API is only available for internal use to generate mock row data for testing purposes.
  // It should not be used in production environments.
  rpc GenerateMockTable(GenerateMockTableRequest) returns (GenerateMockTableResponse) {
    option (google.api.http) = {
      post: "/v1alpha/namespaces/{namespace_id}/tables/{table_uid}/generate-mock"
      body: "*"
    };
    option (google.api.method_visibility).restriction = "INTERNAL";
  }
}
