syntax = "proto3";
package agent.agent.v1alpha;

import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// type of the citations message
enum CitationType {
  // Unspecified citation type
  CITATION_TYPE_UNSPECIFIED = 0;
  // file-based citation
  CITATION_TYPE_FILE = 1;
  // web-based citation
  CITATION_TYPE_WEB = 2;
  // table-based citation
  CITATION_TYPE_TABLE = 3;
}

// type of the citations message extract method
enum CitationExtractMethodType {
  // Unspecified citation extract method
  CITATION_EXTRACT_METHOD_TYPE_UNSPECIFIED = 0;
  // self generated
  CITATION_EXTRACT_METHOD_TYPE_SELF = 1;
  // extract from web search tool
  CITATION_EXTRACT_METHOD_TYPE_WEB = 2;
  // extract from RAG tool
  CITATION_EXTRACT_METHOD_TYPE_RAG = 3;
  // extract from deep analysis tool
  CITATION_EXTRACT_METHOD_TYPE_DEEP_ANALYSIS = 4;
}

// Citation message
message Citation {
  // Type of citation
  CitationType type = 1;
  // Name of the citation
  string name = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // URL of the citation, can be web url, cell url or object-uid
  string url = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Citation number
  uint32 number = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
  // File summary (only applicable for file type citations)
  optional string summary = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Citation extract method type
  CitationExtractMethodType extract_method = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The context for the message.
message ChatContext {
  // The table uids to include in the context.
  repeated string table_uids = 1 [
    (google.api.field_behavior) = OPTIONAL,
    deprecated = true
  ];

  // Represents a folder.
  message Folder {
    // The folder containing the files
    string folder_uid = 1 [(google.api.field_behavior) = REQUIRED];
    // Specific file UIDs within the folder, leave empty to include all files in the folder
    repeated string file_uids = 2 [(google.api.field_behavior) = OPTIONAL];
  }

  // Represents a catalog.
  message Catalog {
    // The catalog containing the files
    string catalog_uid = 1 [(google.api.field_behavior) = REQUIRED];
    // Specific file UIDs within the catalog, leave empty to include all files in the catalog
    repeated string file_uids = 2 [(google.api.field_behavior) = OPTIONAL];
  }

  // Represents a table.
  message Table {
    // The table containing the files
    string table_uid = 1 [(google.api.field_behavior) = REQUIRED];
    // Specific file UIDs within the table, leave empty to include all files in the table
    repeated string file_uids = 2 [(google.api.field_behavior) = OPTIONAL];
  }

  // The folders to include in the context.
  repeated Folder folders = 2 [(google.api.field_behavior) = OPTIONAL];

  // The catalogs to include in the context.
  repeated Catalog catalogs = 3 [(google.api.field_behavior) = OPTIONAL];

  // The tables to include in the context.
  repeated Table tables = 4 [(google.api.field_behavior) = OPTIONAL];
}

// ChatAttachments represents the attachment for the message
message ChatAttachments {
  // FileAttachment represents the file attachment for the message.
  message FileAttachment {
    // file name
    string file_name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
    // file size
    uint64 file_size = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
    // file type
    string content_type = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
    // file extension
    string file_extension = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // file download url
    string download_url = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  }
  // file urls (only for user messages)
  repeated FileAttachment file_attachments = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Message represents a single message in a conversation
message Message {
  // message type
  enum MessageType {
    // unspecified
    MESSAGE_TYPE_UNSPECIFIED = 0;
    // text
    MESSAGE_TYPE_TEXT = 1;
  }
  // message uid
  string uid = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
  // chat uid
  string chat_uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message content
  string content = 3 [(google.api.field_behavior) = REQUIRED];
  // message role e.g., "user" or "assistant" or "agent"
  string role = 4 [(google.api.field_behavior) = REQUIRED];
  // message type
  MessageType type = 5 [(google.api.field_behavior) = REQUIRED];
  // creation time of the message
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  // update time of the message
  google.protobuf.Timestamp update_time = 7 [(google.api.field_behavior) = OUTPUT_ONLY];
  // message sender uid(only for user messages)
  string msg_sender_uid = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
  // citations (only for agent messages)
  repeated Citation citations = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // context for the message
  ChatContext context = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // attachments for the message
  ChatAttachments attachments = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // enable web search (only for user messages)
  bool enable_web_search = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // internal flag for the message, if true, the message is the intermediate message happened in the LLM flow.
  bool internal = 13 [(google.api.field_behavior) = OUTPUT_ONLY];

  // raw message for the message
  optional google.protobuf.Struct raw_message = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
}
