swagger: "2.0"
info:
  title: vdp/connector/v1alpha/auth.proto
  version: version not set
tags:
  - name: ConnectorPrivateService
  - name: ConnectorPublicService
  - name: ControllerPrivateService
  - name: PipelineService
  - name: ModelService
  - name: MgmtPrivateService
  - name: MgmtPublicService
  - name: ModelPrivateService
  - name: ModelPublicService
  - name: PipelinePrivateService
  - name: PipelinePublicService
  - name: UsageService
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1alpha/__liveness:
    get:
      summary: |-
        Liveness method receives a LivenessRequest message and returns a
        LivenessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
      operationId: UsageService_Liveness
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpusagev1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - UsageService
  /v1alpha/__readiness:
    get:
      summary: |-
        Readiness method receives a ReadinessRequest message and returns a
        ReadinessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
      operationId: UsageService_Readiness
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpusagev1alphaReadinessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - UsageService
  /v1alpha/{destination_connector.name}:
    get:
      summary: Get a DESTINATION connector with it's name.
      description: |-
        `GetDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a destination connector in VDP with the quried name. It takes in `GetDestinationConnectorRequest` and returns `GetDestinationConnectorResponse`.

        **NOTE**: The `destination_connector.name` field in `GetDestinationConnectorRequest` must have the format of `destination-connectors/{connector_name}`. For example: `destimation-connectors/postgres-db`.
      operationId: ConnectorPublicService_GetDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            Destination-connector resource name. It must have the format of `destination-connectors/{connector_name}.`
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
    delete:
      summary: Delete a DESTINATION connector with it's name.
      description: "`DeleteDestinationConnector` is a call with the method(s) `DELETE` within the `ConnectorPublicService`. \n\nThis method **delete** a destination-connector in VDP with the quried name. \nIt takes in `DeleteDestinationConnectorRequest` and returns `DeleteDestinationConnectorResponse`.\n\n**NOTE**: The `destination_connector.name` field in `DeleteSourceConnectorRequest` must have the format of `destination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`."
      operationId: ConnectorPublicService_DeleteDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            DestinationConnector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
      tags:
        - ConnectorPublicService
    patch:
      summary: Update a DESTINATION connector.
      description: "`UpdateDestinationConnector` is a call with the method(s) `PATCH` within the `ConnectorPublicService`. \n\nThis method updates a destination connector. \n\nIt takes in `UpdateDestinationConnectorRequest` and returns `UpdateDestinationConnectorResponse`.\n\n**NOTE**: The `destination_connector.name` field in `UpdateDestinationConnectorRequest` is used to identify the destination connector to update. Format: `destination-connectors/{connector_name}`."
      operationId: ConnectorPublicService_UpdateDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: destination_connector
          description: DestinationConnector resource
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                title: Destination connector UUID
                readOnly: true
              id:
                type: string
                description: |-
                  Destination connector resource ID (the last segment of the resource name)
                  used to construct the resource name. This conforms to RFC-1034, which
                  restricts to letters, numbers, and hyphen, with the first character a
                  letter, the last a letter or a number, and a 63 character maximum.
              destination_connector_definition:
                type: string
                title: Destination connector definition resource
              connector:
                $ref: '#/definitions/v1alphaConnector'
                title: Destination connector's connector data structure
            title: DestinationConnector resource
            required:
              - connector
        - name: update_mask
          description: Update mask for a DestinationConnector resource
          in: query
          required: true
          type: string
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector.name}/connect:
    post:
      summary: Connect a DESTINATION connector with it's name.
      description: "`ConnectDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. \n\nThis method connects a destination connector. The \"state\" of the connector after connecting is \"STATE_CONNECTED\". ConnectDestinationConnector can be called on DestinationConnector in the state `STATE_DISCONNECTED`; DestinationConnector in a different state (including `STATE_CONNECTED`) returns an error. \n\nIt takes in `ConnectDestinationConnectorRequest` and returns `ConnectDestinationConnectorResponse`.\n\nâ†’ See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States."
      operationId: ConnectorPublicService_ConnectDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaConnectDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: |-
              ConnectDestinationConnectorRequest represents a request to connect a
              destination connector
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector.name}/disconnect:
    post:
      summary: Disconnect a DESTINATION connector with it's name.
      description: "`DisconnectDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. \n\nThis method disconnects a destination connector. The \"state\" of the connector after disconnecting is \"STATE_DISCONNECTED\". ConnectDestinationConnector can be called on DestinationConnector in the state `STATE_CONNECTED`; DestinatinConnector in a different state (including `STATE_DISCONNECTED`) returns an error. \n\nIt takes in `DisconnectDestinationConnectorRequest` and returns `DisconnectDestinationConnectorResponse`.\n\nâ†’ See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States."
      operationId: ConnectorPublicService_DisconnectDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDisconnectDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            DestinationConnector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: |-
              DisconnectDestinationConnectorRequest represents a request to disconnect a
              destination connector
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector.name}/rename:
    post:
      summary: Rename a DESTINATION connector.
      description: "`RenameDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. \n\nThis method changes the name of a destination connector and returns the updated destination connector. \n\nIt takes in `RenameDestinationConnectorRequest` and returns `RenameDestinationConnectorResponse`.\n\nNOTE: `destination_connector.name` field in `RenameDestinationConnectorRequest` must have the format of `destination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`."
      operationId: ConnectorPublicService_RenameDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenameDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              new_destination_connector_id:
                type: string
                title: |-
                  DestinationConnector new resource id to replace with the
                  DestinationConnector resource name to be
                  "destination-connectors/{new_destination_connector_id}"
            title: |-
              RenameDestinationConnectorRequest represents a request to rename the
              DestinationConnector resource name
            required:
              - new_destination_connector_id
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector.name}/watch:
    get:
      summary: Get the state of a DESTINATION connector.
      description: "`WatchDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPublicService` service. \n\nThis method returns the state of a destination connector from the state server. \n\nIt takes in `WatchDestinationConnectorRequest` and returns `WatchDestinationConnectorResponse`.\n\nNOTE: `destination_connector.name` field in `WatchDestinationConnectorRequest` must have the format of `destination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`."
      operationId: ConnectorPublicService_WatchDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector.name}/write:
    post:
      summary: Write model outputs via a DESTINATION connector.
      description: "`WriteDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. \n\nThis method performs a write operation with a destination connector. \n\nIt takes in `WriteDestinationConnectorRequest` and returns `WriteDestinationConnectorResponse`.\n\n**NOTE**: \n1. `destination_connector.name` field in `WriteDestinationConnectorRequest` must have the format of `detsination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`.\n2. This method supports two differt modes: **sync** mode and **destination sync** mode. See [Understanding Airbyte Connections](https://docs.airbyte.com/understanding-airbyte/connections/#sync-modes) for further details."
      operationId: ConnectorPublicService_WriteDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWriteDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: |-
            Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`.
            For example, `destination-connectors/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              sync_mode:
                $ref: '#/definitions/v1alphaSupportedSyncModes'
                title: |-
                  Sync mode:
                  https://docs.airbyte.com/understanding-airbyte/connections/#sync-modes
              destination_sync_mode:
                $ref: '#/definitions/v1alphaSupportedDestinationSyncModes'
                title: |-
                  Destination sync mode:
                  https://docs.airbyte.com/understanding-airbyte/connections/#sync-modes
              pipeline:
                type: string
                title: Pipeline resource name
              recipe:
                $ref: '#/definitions/v1alphaRecipe'
                title: Pipeline recipe
              data_mapping_indices:
                type: array
                items:
                  type: string
                title: Indices corresponds to each JSON data element
              model_outputs:
                type: array
                items:
                  $ref: '#/definitions/v1alphaModelOutput'
                title: JSON data to write
            title: |-
              WriteDestinationConnectorRequest represents a request to perform write
              operation of a DestinationConnector given the resource name
            required:
              - sync_mode
              - destination_sync_mode
              - pipeline
              - recipe
              - data_mapping_indices
              - model_outputs
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector.uid}/lookUp:
    get:
      summary: Get a DESTINATION connector with a permalink consisting of unique ID.
      description: "`LookUpDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. \n\nThis methods returns a destination connector in VDP with it's permalink (i.e., `destinatin_connector.uid`). \n\nIt takes in `LookUpDestinationConnectorRequest` and returns `LookUpDestinationConnectorResponse`.\n\n**NOTE**: permalink in `LookUpDestinationConnectorRequest` must have the format of `destination-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector."
      operationId: ConnectorPublicService_LookUpDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.uid
          description: Permalink of a destination connector. It must have the format of `destination-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/{destination_connector_definition.name}:
    get:
      summary: Get the difinition of a DESTINATION connector with it's name.
      description: "`GetDestinationConnectorDefinition` is a call with the method(s) `GET` within the `ConnectorPublicService`. \n\nThis method returns a destination-connector definition supported by VDP. \n\nIt takes in `GetDestinationConnectorDefinitionRequest` and returns `GetDestinationConnectorDefinitionResponse`.\n\n**NOTE**: `destination_connector_definition.name` field in `GetDestinationConnectorDefinitionRequest` must have the format of `destination-connector-definitions/{connector_name}`. For example: `destination-connector-definitions/postgres-db`."
      operationId: ConnectorPublicService_GetDestinationConnectorDefinition
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetDestinationConnectorDefinitionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector_definition.name
          description: |-
            Destination connector definition resource name. It must have the format of `destination-connector-definitions/{connector_name}`.
            For example, `destination-connector-definitions/postgres-db`.
          in: path
          required: true
          type: string
          pattern: destination-connector-definitions/[^/]+
        - name: view
          description: |-
            DestinationConnectorDefinition resource view (default is
            DEFINITION_VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/{model.name/readme}:
    get:
      summary: |-
        GetModelCard method receives a GetModelCardRequest message
        and returns a GetModelCardResponse
      operationId: ModelPublicService_GetModelCard
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelCardResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name/readme
          description: |-
            Resource name of the model card.
            For example "models/{model}/readme"
          in: path
          required: true
          type: string
          pattern: models/[^/]+/readme
      tags:
        - ModelPublicService
  /v1alpha/{model.name/watch}/watch:
    get:
      summary: |-
        WatchModel method receives a WatchModelRequest message
        and returns a WatchModelResponse
      operationId: ModelPublicService_WatchModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name/watch
          description: |-
            Resource name of the model.
            For example "models/{model}"
          in: path
          required: true
          type: string
          pattern: models/[^/]+
      tags:
        - ModelPublicService
  /v1alpha/{model.name}:
    get:
      summary: Get a model resource with it's name.
      description: "`GetModel` is a call with the method(s) `GET` within the `ModelPublicService`.\n\nThis method returns a model resource with the quried name. \n\nIt takes in `GetModelRequest` and returns `GetModelResponse`.\n\n**NOTE**: The `model.name` field in `GetModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`."
      operationId: ModelPublicService_GetModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: "Resource name of the model. It must have the format of `models/{model_name}`. \nFor example, `models/yolov7`."
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: view
          description: |-
            Model view (default is VIEW_BASIC)
            - VIEW_UNSPECIFIED/VIEW_BASIC: omit `Model.configuration`
            - VIEW_FULL: show full information

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
    delete:
      summary: Delete a model reource in VDP with it's name.
      description: "`DeleteModel` is a call with the method(s) `DELETE` within the `ModelPublicService`. \n\nThis method delete a model resource with the quried name. \n\nIt takes in `DeleteModelRequest` and returns `DeleteModelResponse`.\n\n**NOTE**: The `model.name` field in `DeleteModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`."
      operationId: ModelPublicService_DeleteModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: "Resource name of the model. It must have the format of `models/{model_name}`. \nFor example, `models/yolov7`."
          in: path
          required: true
          type: string
          pattern: models/[^/]+
      tags:
        - ModelPublicService
    patch:
      summary: Update an existing model resource.
      description: "`UpdateModel` is a call with the method(s) `PATCH` within the `ModelPublicService`.\n\nThis method updates an existing model resource. \n\nIt takes in `UpdateModelRequest` and returns `UpdateModelResponse`.\n\n**NOTE**: The `model.name` field in `UpdateModelRequest` is used to identify the model resource to update. Format: `models/{model_name}`."
      operationId: ModelPublicService_UpdateModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: |-
            Resource name. It must have the format of "models/{model}".
            For example: "models/yolov4"
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: model
          description: 'The model to update. `model.name` field is used to identify the model to update. Format: `models/{model}`.'
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                title: Model ID in UUIDv4
                readOnly: true
              id:
                type: string
                description: |-
                  Resource ID (the last segment of the resource name) used to construct the
                  resource name. This conforms to RFC-1034, which restricts to letters,
                  numbers, and hyphen, with the first character a letter, the last a letter
                  or a number, and a 63 character maximum.
              description:
                type: string
                title: Model description
              model_definition:
                type: string
                title: Model definition resource name
              configuration:
                type: object
                title: |-
                  Model configuration represents the configuration JSON that has been
                  validated using the `model_spec` JSON schema of a ModelDefinition
              task:
                $ref: '#/definitions/ModelTask'
                title: Model task
                readOnly: true
              state:
                $ref: '#/definitions/v1alphaModelState'
                title: Model state
                readOnly: true
              visibility:
                $ref: '#/definitions/ModelVisibility'
                title: Model visibility including public or private
                readOnly: true
              user:
                type: string
                description: The resource name of a user, e.g., "users/local-user".
                readOnly: true
              org:
                type: string
                title: The resource name of an organization
                readOnly: true
              create_time:
                type: string
                format: date-time
                title: Model create time
                readOnly: true
              update_time:
                type: string
                format: date-time
                title: Model update time
                readOnly: true
            title: 'The model to update. `model.name` field is used to identify the model to update. Format: `models/{model}`.'
        - name: update_mask
          description: Mask of fields to update.
          in: query
          required: true
          type: string
      tags:
        - ModelPublicService
  /v1alpha/{model.name}/publish:
    post:
      summary: Chanage the visibility of a model resource to *PUBLIC*.
      description: "`PublishModel` is a call with the method(s) `POST` within the `ModelPublicService` service.\n\nThis method changes the visibility of a model resource to *PUBLIC* allowing other users to access the model resource. It also returns the updated model resource. \n\nIt takes in `PublishModelRequest` and returns `PublishModelResponse`.\n\nNOTE: `model.name` field in `PublishModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`."
      operationId: ModelPublicService_PublishModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaPublishModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: |-
            Resource name of the model. It must have the format of `models/{model_name}`.
            For example, `models/yolov7`.
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: PublishModelRequest represents a request to publish a model
      tags:
        - ModelPublicService
  /v1alpha/{model.name}/rename:
    post:
      summary: Rename a model resource in VDP
      description: "`RenameModel` is a call with the method(s) `POST` within the `ModelPublicService` service.\n\nThis method changes the name of a model resource and returns the updated model resource. \n\nIt takes in `RenameModelRequest` and returns `RenameModelResponse`.\n\nNOTE: `model.name` field in `RenameModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`."
      operationId: ModelPublicService_RenameModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenameModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: "Resource name for the model to be renamed. It must have the format of `models/{model_name}`. \nFor example: `models/yolov7`."
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              new_model_id:
                type: string
                title: New ID of this model
            title: RenameModelRequest represents a request to rename a model
            required:
              - new_model_id
      tags:
        - ModelPublicService
  /v1alpha/{model.name}/unpublish:
    post:
      summary: Change the visibility of a model resource to *PRIVATE*
      description: "`UnpublishModel` is a call with the method(s) `POST` within the `ModelPublicService` service. \n\nThis method changes the visibility of a model resource to *PRIVATE*, making it only visible to the authorsied user. It also returns the updated model resource. \n\nIt takes in `UnpublishModelRequest` and returns `UnpublishModelResponse`.\n\nNOTE: `model.name` field in `UnpublishModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`."
      operationId: ModelPublicService_UnpublishModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUnpublishModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: "Resource name of the model. It must have the format of `models/{model_name}`. \nFor example, `models/yolov7`."
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: UnpublishModelRequest represents a request to unpublish a model
      tags:
        - ModelPublicService
  /v1alpha/{model.uid}/lookUp:
    get:
      summary: Get a model resource with it's permalink.
      description: "`LookUpModel` is a call with the method(s) `GET` within the `ModelPublicService`.\n\nThis method gets a model resource with a permalink (i.e., `model.uid`). \n\nIt takes in `LookUpModelRequest` and returns `LookUpModelResponse`.\n\n**NOTE**: `model.uid` (permalink) in `LookUpModelRequest` must have the format of `models/{uid}`, where `{uid}` denotes the unique ID of the model."
      operationId: ModelPublicService_LookUpModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.uid
          description: Permalink of a model. It must have the format of `models/{uid}`, where `{uid}` denotes the unique ID of the model.
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: view
          description: |-
            Model view (default is VIEW_BASIC)
            VIEW_UNSPECIFIED/VIEW_BASIC: omit `Model.configuration`
            VIEW_FULL: show full information

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
  /v1alpha/{model_definition.name}:
    get:
      summary: Get the difinition of a model resource with it's name.
      description: "`GetModelDefinition` is a call with the method(s) `GET` within the `ModelPublicService`. \n\nThis method returns a model definition of a model resource. \n\nIt takes in `GetModelDefinitionRequest` and returns `GetModelDefinitionResponse`.\n\n**NOTE**: `model_definition.name` field in `GetModelDefinitionRequest` must has the format of `model-definitions/{model_name}`. For example, `model-definitions/yolov7`."
      operationId: ModelPublicService_GetModelDefinition
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelDefinitionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model_definition.name
          description: "Resource name of the model definition. It must has the format of `model-definitions/{model.name}`. \nFor example, `model-definitions/yolov7`."
          in: path
          required: true
          type: string
          pattern: model-definitions/[^/]+
        - name: view
          description: |-
            Definition view (default is VIEW_BASIC)
            VIEW_UNSPECIFIED/VIEW_BASIC: omit `ModelDefinition.model_spec` and
            `ModelDefinition.model_spec`
            VIEW_FULL: show full information

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
  /v1alpha/{name}/cancel:
    post:
      summary: |-
        CancelModelOperation method receives a CancelModelOperationRequest message
        and returns a CancelModelOperationResponse
      operationId: ModelPublicService_CancelModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCancelModelOperationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: The name of the operation resource.
          in: path
          required: true
          type: string
          pattern: operations/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: CancelModelOperationRequest represents a request to cancel a model operation
      tags:
        - ModelPublicService
  /v1alpha/{name}/deploy:
    post:
      summary: DeployModel deploy a model to online state
      operationId: ModelPublicService_DeployModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeployModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            Resource name for the model to be deployed.
            Format: models/{model}
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: DeployModelRequest represents a request to deploy a model to online state
      tags:
        - ModelPublicService
  /v1alpha/{name}/test:
    post:
      summary: |-
        TestModel method receives a TestModelRequest message
        and returns a TestModelResponse message.
      operationId: ModelPublicService_TestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTestModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The resource name of the model to trigger.
            For example "models/{model}"
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              task_inputs:
                type: array
                items:
                  $ref: '#/definitions/v1alphaTaskInput'
                title: Input to trigger the model
            title: TestModelRequest represents a request to test a model
            required:
              - task_inputs
      tags:
        - ModelPublicService
  /v1alpha/{name}/trigger:
    post:
      summary: Trigger a model instance.
      description: |-
        TriggerModel method receives a TriggerModelRequest message
        and returns a TriggerModelResponse message.
      operationId: ModelPublicService_TriggerModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            The resource name of the model to trigger.
            For example "models/{model}"
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              task_inputs:
                type: array
                items:
                  $ref: '#/definitions/v1alphaTaskInput'
                title: Input to trigger the model
            title: TriggerModelRequest represents a request to trigger a model
            required:
              - task_inputs
      tags:
        - ModelPublicService
  /v1alpha/{name}/undeploy:
    post:
      summary: UndeployModel undeploy a model to offline state
      operationId: ModelPublicService_UndeployModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUndeployModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: name
          description: |-
            Resource name for the model to be undeployed.
            Format: models/{model}
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: UndeployModelRequest represents a request to undeploy a model to offline state
      tags:
        - ModelPublicService
  /v1alpha/{operation.name_1}:
    get:
      summary: Get a longrunning operation with it's name.
      description: "`GetModelOperation` is a call with the method(s) `GET` within the `ModelPublicService` service. \n\nThis method returns a longrunning operation with it's name (i.e., `operations/{unique_id}`). \n\nIt takes in `GetModelOperationRequest` and returns `GetModelOperationResponse`.\n\n**NOTE**: `operation.uid` field in `GetModelOperationRequest` must have the format of `operations/{unique_id}`, where `{unique_id}` denotes the unique ID of the longrunning operation. See [Google RPC reference](https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.longrunning#google.longrunning.Operations) for further details."
      operationId: ModelPublicService_GetModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelOperationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: operation.name_1
          description: The name of the operation resource. It must have the format of `operations/{unique_id}`, where `{unique_id}` denotes the unique ID of the longrunning operation.
          in: path
          required: true
          type: string
          pattern: operations/[^/]+
        - name: view
          description: |-
            View (default is VIEW_UNSPECIFIED)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
  /v1alpha/{operation.name}:
    get:
      summary: Get a longrunning operation with it's name.
      description: "`GetConnectorOperation` is a call with the method(s) `GET` within the `ConnectorPublicService` service. \n\nThis method returns a longrunning operation with it's name (i.e., `operations/{unique_id}`). \n\nIt takes in `GetConnectorOperationRequest` and returns `GetConnectorOperationResponse`.\n\nNOTE: `operation.uid` field in `GetConnectorOperationRequest` must have the format of `operations/{unique_id}`, where `{unique_id}` denotes the unique ID of the longrunning operation. See [Google RPC reference](https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.longrunning#google.longrunning.Operations) for further details."
      operationId: ConnectorPublicService_GetConnectorOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetConnectorOperationResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: operation.name
          description: The name of the operation resource. It must have the format of `operations/{unique_id}`, where `{unique_id}` denotes the unique ID of the longrunning operation.
          in: path
          required: true
          type: string
          pattern: operations/[^/]+
        - name: view
          description: |-
            SourceConnector view (default is VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/{pipeline.name/watch}/watch:
    get:
      summary: |-
        WatchPipeline method receives a WatchPipelineRequest message
        and returns a WatchPipelineResponse
      operationId: PipelinePublicService_WatchPipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchPipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name/watch
          description: Pipeline resource name. It must have the format of "pipelines/*"
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
      tags:
        - PipelinePublicService
  /v1alpha/{pipeline.name}:
    get:
      summary: Get the detail of a pipeline with it's name.
      description: "`GetPipeline` is a call with the method(s) `GET` within the `PipelinePublicService` service.\n\nThis method return a pipeline with it's name. \n\nIt takes in `GetPipelineRequest` and returns `GetPipelineResponse`.\n\nNOTE: `pipeline.name` field in `GetPipelineRequest` must have the format of `pipelines/{pipeline_name}`. For example: `pipelines/pipeline-1`."
      operationId: PipelinePublicService_GetPipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetPipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: "Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`. \nFor example: `pipelines/pipeline-1`."
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: view
          description: |-
            Pipeline resource view (default is VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - PipelinePublicService
    delete:
      summary: Delete a pipeline in VDP.
      description: "`DeletePipeline`is a call with the method(s) `DELETE` within the `PipelinePublicService` service.\n\nThis method deletes a pipeline with it's name. \n\nIt takes in `DeletePipelineRequest` and returns `DeletePipelineResponse`.\n\n**NOTE**: The `pipeline.name` field in `UpdatePipelineRequest` must have the format of `pipelines/{pipeline_name}`. For example: `pipelines/pipeline-1`."
      operationId: PipelinePublicService_DeletePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeletePipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: "Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`. \nFor example: `pipelines/pipeline-1`."
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
      tags:
        - PipelinePublicService
    patch:
      summary: Update a pipeline in VDP.
      description: "`UpdatePipeline` is a call with the method(s) `PATCH` within the `PipelinePublicService` service.\n\nThis methods update an existing pipeline and return the updated pipeline resource. \n\nIt takes in `UpdatePipelineRequest` and returns `UpdatePipelineResponse`.\n\n**NOTE**: The `pipeline.name` field in `UpdatePipelineRequest` is used to identify the pipeline to update. Format: `pipelines/{pipeline_name}`."
      operationId: PipelinePublicService_UpdatePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdatePipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: pipeline
          description: A pipeline resource to update
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                title: Pipeline UUID
                readOnly: true
              id:
                type: string
                description: |-
                  Pipeline resource ID (the last segment of the resource name) used to
                  construct the resource name. This conforms to RFC-1034, which restricts to
                  letters, numbers, and hyphen, with the first character a letter, the last a
                  letter or a number, and a 63 character maximum.
              description:
                type: string
                title: Pipeline description
              recipe:
                $ref: '#/definitions/v1alphaRecipe'
                title: Pipeline recipe
              mode:
                $ref: '#/definitions/PipelineMode'
                title: Pipeline mode
                readOnly: true
              state:
                $ref: '#/definitions/v1alphaPipelineState'
                title: Pipeline state
                readOnly: true
              user:
                type: string
                description: The resource name of a user, e.g., "users/local-user".
                readOnly: true
              org:
                type: string
                title: The resource name of an organization
                readOnly: true
              create_time:
                type: string
                format: date-time
                title: Pipeline creation time
                readOnly: true
              update_time:
                type: string
                format: date-time
                title: Pipeline update time
                readOnly: true
            title: A pipeline resource to update
        - name: update_mask
          description: Update mask for a pipeline resource
          in: query
          required: true
          type: string
      tags:
        - PipelinePublicService
  /v1alpha/{pipeline.name}/activate:
    post:
      summary: Activate a pipeline in VDP.
      description: |-
        `ActivatePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service.

        This method activates an existing pipeline. The "state" of the pipeline after activating is "ACTIVE". It can be called on Pipelines in the state "INACTIVE"; Pipelines in a different state (including "ACTIVE") returns an error.

        It takes in `ActivatePipelineRequest` and returns `ActivatePipelineResponse`.

        See [Core Concepts - Pipeline](https://www.instill.tech/docs/core-concepts/pipeline) for further details.
      operationId: PipelinePublicService_ActivatePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaActivatePipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: "Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`. \nFor example, `pipelines/pipeline-1`."
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: ActivatePipelineRequest represents a request to activate a pipeline
      tags:
        - PipelinePublicService
  /v1alpha/{pipeline.name}/deactivate:
    post:
      summary: Deactivate a pipeline in VDP.
      description: "`DeactivatePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. It can be called on Pipelines in the state \"ACTIVE\"; Pipelines in a different state (including \"INACTIVE\") returns an error.\n\nThis method deactivates a pipeline resource in VDP. The \"state\" of the pipeline after inactivating is \"INACTIVE\". \n\nIt takes in `DeactivatePipelineRequest` and returns `DeactivatePipelineResponse`.\n\nSee [Core Concepts - Pipeline](https://www.instill.tech/docs/core-concepts/pipeline) for further details."
      operationId: PipelinePublicService_DeactivatePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeactivatePipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: 'Pipeline resource name. It must has the format of `pipelines/{pipeline_name}`. For example: `pipelines/pipeline-1`.'
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: DeactivatePipelineRequest represents a request to deactivate a pipeline
      tags:
        - PipelinePublicService
  /v1alpha/{pipeline.name}/rename:
    post:
      summary: Rename a pipeline in VDP.
      description: "`RenamePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service.\n\nThis method changes the pipeline name and returns the updated pipeline resource. \n\nIt takes in `RenamePipelineRequest` and returns `RenamePipelineResponse`.\n\nNOTE: `pipeline.name` field in `RenamePipelineRequest` must has the format of `pipelines/{pipeline_name}`. For example, `pipelines/pipeline-1`."
      operationId: PipelinePublicService_RenamePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenamePipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: "Pipeline resource name. It must has the format of `pipelines/{pipeline_name}`. \nFor example, `pipelines/pipeline-1`."
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              new_pipeline_id:
                type: string
                title: Pipeline new resource id to replace with the pipeline resource name to be `pipelines/{new_pipeline_id}`
            title: |-
              RenamePipelineRequest represents a request to rename the pipeline resource
              name
            required:
              - new_pipeline_id
      tags:
        - PipelinePublicService
  /v1alpha/{pipeline.name}/trigger:
    post:
      summary: Trigger a pipeline resource in VDP.
      description: "`TriggerPipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service.\n\nThis methods tiggers a pipeline and returns 1) UUID for each input and 2) model inference outputs. \n\nIt takes in `TriggerPipelineRequest` and returns a `TriggerPipelineResponse`.\n\nNOTE: `pipeline.name` field in `TriggerPipelineRequest` must has the format of `pipelines/{pipeline_name}`. For example, `pipelines/pipeline-1`.\n\nâ†’ See [Core concept](https://www.instill.tech/docs/core-concepts/overview) for an introduction to Pipeline in VDP and [our tutorial](https://www.instill.tech/tutorials/vdp-101-4-how-to-trigger-a-sync-pipeline) for further details about triggering a pipeline."
      operationId: PipelinePublicService_TriggerPipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerPipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: "Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`. \nFor example: `pipelines/pipeline-1`."
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              task_inputs:
                type: array
                items:
                  $ref: '#/definitions/v1alphaTaskInput'
                title: Input to the pipeline
            title: TriggerPipelineRequest represents a request to trigger a pipeline
            required:
              - task_inputs
      tags:
        - PipelinePublicService
  /v1alpha/{pipeline.uid}/lookUp:
    get:
      summary: Get the detail of a pipeline with it's permalink.
      description: "`LookUpPipeline` is a call with the method(s) `GET` within the `PipelinePublicService` service.\n\nThis method return a pipeline resource in VDP given a pipeline permalink. \n\nIt takes in `LookUpPipelineRequest` and returns `LookUpPipelineResponse`.\n\nNOTE: `pipeline.uid` (permalink) in `LookUpPipelineRequest` must have to format of `pipelines/{uid}`, where `{uid}` denotes the unique ID of the pipeline."
      operationId: PipelinePublicService_LookUpPipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpPipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.uid
          description: Permalink of a pipeline. It must have to format of `pipelines/{uid}`, where `{uid}` denotes the unique ID of the pipeline.
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - PipelinePublicService
  /v1alpha/{resource.name}:
    get:
      summary: Get resource state with it's name.
      description: "`GetResource` is a call with the method(s) `GET` within the `ControllerPrivateService` service.\n\nThis is a *private* method that is only avaible for admin and internal backend services to get the current state of the queried resource. \n\nIt takes in `GetResourceRequest` and returns a `GetResourceResponse`.\n\n**NOTE**: The `resource.name` field in GetReourceRequest must has the format of `resources/{resource_name}/types/{type}`. For example: `resources/yolov7/types/model`. See parameter descriptions for further details."
      operationId: ControllerPrivateService_GetResource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetResourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: resource.name
          description: |-
            Resource name is a string follows a specifit format: `resources/{resource_name}/types/{type}`, where `{resource_name}` represents an arbitrary name user defined when creating, and `{type}` falls inside the scope of:
            ```
            const (
              RESOURCE_TYPE_MODEL     = "model"
              RESOURCE_TYPE_SOURCE_CONNECTOR = "source-connectors"
              RESOURCE_TYPE_DESTINATION_CONNECTOR = "destination-connectors"
              RESOURCE_TYPE_PIPELINE  = "pipeline"
              RESOURCE_TYPE_SERVICE   = "service"
            )
            ```

            For example, when query for the state of a pipeline named `pipeline-1`, the resource name is `resources/pipeline-1/types/RESOURCE_TYPE_PIPELINE`
          in: path
          required: true
          type: string
          pattern: resources/[^/]+/types/[^/]+
      tags:
        - ControllerPrivateService
    delete:
      summary: Delete a resource with it's name.
      description: |-
        `DeleteResource` is a call with the method(s) `DELETE` within the `ControllerPrivateService` service.

        This is a *private* method that is only avaible for admin and internal backend services to delete a registered resource. It takes in `DeleteResourceRequest` and returns a `DeleteResourceResponse`.

        **NOTE**: The `resource.name` field in `DeleteResourceRequest` is used to identify the resource to delete. Format: `resources/{resource_name}/types/{type}`.
      operationId: ControllerPrivateService_DeleteResource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteResourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: resource.name
          description: "Resource name. It must has the format of `resources/{resource_name}/types/{type}`. \nFor example: `resources/yolov7/types/model`."
          in: path
          required: true
          type: string
          pattern: resources/[^/]+/types/[^/]+
      tags:
        - ControllerPrivateService
    patch:
      summary: Update resource state.
      description: "`UpdateResource` is a call with the method(s) `PATCH` within the `ControllerPrivateService` service.\n\nThis is a *private* method that is only avaible for admin and internal backend services to update the current state of the queried resource. \n\nIt takes in `UpdateResourceRequest` and returns a `UpdateResourceResponse`.\n\n**NOTE**: The `resource.name` field in `UpdateResourceRequest` is used to identify the resource to update. Format: `resources/{resource_name}/types/{type}`."
      operationId: ControllerPrivateService_UpdateResource
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateResourceResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: resource.name
          description: |-
            Resource name is a string follows a specifit pattern: `resources/{resource_name}/types/{type}`, where `{resource}` represents an arbitrary name user defined when creating, and `{type}` falls inside the scope of:
            ```
            const (
              RESOURCE_TYPE_MODEL     = "model"
              RESOURCE_TYPE_SOURCE_CONNECTOR = "source-connectors"
              RESOURCE_TYPE_DESTINATION_CONNECTOR = "destination-connectors"
              RESOURCE_TYPE_PIPELINE  = "pipeline"
              RESOURCE_TYPE_SERVICE   = "service"
            )
            ```

            For example, when query for the state of a pipeline named `pipeline-1`, the resource name is `resources/pipeline-1/types/RESOURCE_TYPE_PIPELINE`
          in: path
          required: true
          type: string
          pattern: resources/[^/]+/types/[^/]+
        - name: resource
          description: "The resource to update. It uses `resource.name` to identify the resource to update. It follows a specifit format: `resources/{resource_name}/types/{type}`.\nFor **Model*, **Pipeline** and **Connector** services, the `resource.state` is one of the below:\n```\nenum State {\n  // State: UNSPECIFIED\n  STATE_UNSPECIFIED = 0;\n  // State INACTIVE indicates the pipeline is inactive\n  STATE_INACTIVE = 1;\n  // State ACTIVE indicates the pipeline is active\n  STATE_ACTIVE = 2;\n  // State ERROR indicates the pipeline has error\n  STATE_ERROR = 3;\n}\n```\n\nSee our documentation for further information: \n- [Core Concepts - Pipeline](https://www.instill.tech/docs/core-concepts/pipeline)\n- [Core Concepts - Connector](https://www.instill.tech/docs/core-concepts/connector)\n- [Core Concepts - Model](https://www.instill.tech/docs/core-concepts/model)\n\nFor **Backend** service, the `resource.state` is one of the below as:\n```\nenum ServingStatus {\n  // Serving status: UNSPECIFIED\n  SERVING_STATUS_UNSPECIFIED = 0;\n  // Serving status: SERVING\n  SERVING_STATUS_SERVING = 1;\n  // Serving status: NOT SERVING\n  SERVING_STATUS_NOT_SERVING = 2;\n}\n```"
          in: body
          required: true
          schema:
            type: object
            properties:
              model_state:
                $ref: '#/definitions/v1alphaModelState'
                title: Model state
              pipeline_state:
                $ref: '#/definitions/v1alphaPipelineState'
                title: Pipeline state
              connector_state:
                $ref: '#/definitions/v1alphaConnectorState'
                title: Connector state
              backend_state:
                $ref: '#/definitions/HealthCheckResponseServingStatus'
                title: Backend service state
              progress:
                type: integer
                format: int32
                title: Resource longrunning progress
            description: "See our documentation for further information: \n- [Core Concepts - Pipeline](https://www.instill.tech/docs/core-concepts/pipeline)\n- [Core Concepts - Connector](https://www.instill.tech/docs/core-concepts/connector)\n- [Core Concepts - Model](https://www.instill.tech/docs/core-concepts/model)\n\nFor **Backend** service, the `resource.state` is one of the below as:\n```\nenum ServingStatus {\n  // Serving status: UNSPECIFIED\n  SERVING_STATUS_UNSPECIFIED = 0;\n  // Serving status: SERVING\n  SERVING_STATUS_SERVING = 1;\n  // Serving status: NOT SERVING\n  SERVING_STATUS_NOT_SERVING = 2;\n}\n```"
            title: |-
              The resource to update. It uses `resource.name` to identify the resource to update. It follows a specifit format: `resources/{resource_name}/types/{type}`.
              For **Model*, **Pipeline** and **Connector** services, the `resource.state` is one of the below:
              ```
              enum State {
                // State: UNSPECIFIED
                STATE_UNSPECIFIED = 0;
                // State INACTIVE indicates the pipeline is inactive
                STATE_INACTIVE = 1;
                // State ACTIVE indicates the pipeline is active
                STATE_ACTIVE = 2;
                // State ERROR indicates the pipeline has error
                STATE_ERROR = 3;
              }
              ```
        - name: workflow_id
          description: Resource longrunnning workflow id
          in: query
          required: false
          type: string
      tags:
        - ControllerPrivateService
  /v1alpha/{source_connector.name}:
    get:
      summary: Get a SOURCE connector with it's name.
      description: |-
        `GetSourceConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a source connector in VDP with the quried name. It takes in `GetSourceConnectorRequest` and returns `GetSourceConnectorResponse`.

        **NOTE**: The `source_connector.name` field in `GetSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.
      operationId: ConnectorPublicService_GetSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: "SourceConnectorConnector resource name. It must have the format of `source-connectors/{connector_name}`. \nFor example, `source-connectors/http`."
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
    delete:
      summary: Delete a SOURCE connector with it's name.
      description: "`DeleteSourceConnector` is a call with the method(s) `DELETE` within the `ConnectorPublicService`. \n\nThis method delete a source connector in VDP with the quried name. \n\nIt takes in `DeleteSourceConnectorRequest` and returns `DeleteSourceConnectorResponse`.\n\n**NOTE**: The `source_connector.name` field in `DeleteSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`."
      operationId: ConnectorPublicService_DeleteSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: |-
            Source connector resource name. It must have the format of `source-connectors/{connector_name}`.
            For example: `source-connectors/http`.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
      tags:
        - ConnectorPublicService
    patch:
      summary: Update a SOURCE connector.
      description: "`UpdateSourceConnector` is a call with the method(s) `PATCH` within the `ConnectorPublicService`. This method updates a source connector. \n\nIt takes in `UpdateSourceConnectorRequest` and returns `UpdateSourceConnectorResponse`.\n\n**NOTE**: The `source_connector.name` field in `UpdateSourceConnectorRequest` is used to identify the source-connector to update. Format: `source-connectors/{connector_name}`."
      operationId: ConnectorPublicService_UpdateSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: |-
            Source connector resource name. It must have the format of `source-connectors/{connector_name}`.
            For example, `source-connectors/http`.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: source_connector
          description: SourceConnector resource
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                title: Source connector UUID
                readOnly: true
              id:
                type: string
                description: |-
                  Source connector resource ID (the last segment of the resource name) used to
                  construct the resource name. This conforms to RFC-1034, which restricts to
                  letters, numbers, and hyphen, with the first character a letter, the last a
                  letter or a number, and a 63 character maximum.
              source_connector_definition:
                type: string
                title: Source connector definition resource
              connector:
                $ref: '#/definitions/v1alphaConnector'
                title: Source connector's connector data structure
            title: SourceConnector resource
            required:
              - connector
        - name: update_mask
          description: Update mask for a SourceConnector resource
          in: query
          required: true
          type: string
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector.name}/connect:
    post:
      summary: Connect a SOURCE connector with it's name.
      description: "`ConnectSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. \n\nThis method connects a source connector. The \"state\" of the connector after connecting is \"STATE_CONNECTED\". `ConnectSourceConnector` can be called on SourceConnector in the state `STATE_DISCONNECTED`; SourceConnector in a different state (including `STATE_CONNECTED`) returns an error.\n\nIt takes in `ConnectSourceConnectorRequest` and returns `ConnectSourceConnectorResponse`.\n\n**NOTE**: The `source_connector.name` field in `ConnectSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.\n\nâ†’ See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States."
      operationId: ConnectorPublicService_ConnectSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaConnectSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: "Source connector resource name. It must have the format of `source-connectors/{connector_name}`. \nFor example, `source-connectors/http`."
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: |-
              ConnectSourceConnectorRequest represents a request to connect a
              source connector
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector.name}/disconnect:
    post:
      summary: Disconnect a SOURCE connector with it's name.
      description: "`DisconnectSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. \n\nThis method disconnects a source connector. The \"state\" of the connector after disconnecting is \"STATE_DISCONNECTED\". `DisconnectSourceConnector` can be called on SourceConnector in the state `STATE_CONNECTED`; SourceConnector in a different state (including `STATE_DISCONNECTED`) returns an error. \n\nIt takes in `DisconnectSourceConnectorRequest` and returns `DisconnectSourceConnectorResponse`.\n\n**NOTE**: The `source_connector.name` field in `DisconnectSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.\n\nâ†’ See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States."
      operationId: ConnectorPublicService_DisconnectSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDisconnectSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: |-
            Source connector resource name. It must have the format of `source-connectors/{connector_name}`.
            For example: `source-connectors/http`.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: |-
              DisconnectSourceConnectorRequest represents a request to disconnect a
              source connector
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector.name}/read:
    post:
      summary: Read data with a SOURCE connector.
      description: |-
        `ReadSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service.

        This method performs a read operation with a source connector and returns data in bytes.

        It takes in `ReadSourceConnectorRequest` and returns `ReadSourceConnectorResponse`.

        NOTE: `source_connector.name` field in `ReadSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.
      operationId: ConnectorPublicService_ReadSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaReadSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: |-
            SourceConnector resource name. It must have the format of `source-connectors/{connector_name}`.
            For example: `source-connectors/http`.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: |-
              ReadSourceConnectorRequest represents a request to perform read operation of
              a SourceConnector given the resource name
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector.name}/rename:
    post:
      summary: Rename a SOURCE connector.
      description: "`RenameSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. \n\nThis method changes the name of a source connector and returns the updated source connector. \n\nIt takes in `RenameSourceConnectorRequest` and returns `RenameSourceConnectorResponse`.\n\nNOTE: `source_connector.name` field in `RenameSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`."
      operationId: ConnectorPublicService_RenameSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenameSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: |-
            SourceConnector resource name. It must have the format of `source-connectors/{connector_name}`.
            For example: `source-connectors/http`.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            properties:
              new_source_connector_id:
                type: string
                title: |-
                  SourceConnector new resource id to replace with the
                  SourceConnector resource name to be
                  "source-connectors/{new_source_connector_id}"
            title: |-
              RenameSourceConnectorRequest represents a request to rename the
              SourceConnector resource name
            required:
              - new_source_connector_id
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector.name}/watch:
    get:
      summary: Get the state of a SOURCE connector.
      description: "`WatchSourceConnector` is a call with the method(s) `GET` within the `ConnectorPublicService` service. \n\nThis method returns the state of a source connector from the state server. \n\nIt takes in `WatchSourceConnectorRequest` and returns `WatchSourceConnectorResponse`.\n\nNOTE: `source_connector.name` field in `WatchSourceConnectorRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`."
      operationId: ConnectorPublicService_WatchSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: |-
            SourceConnector resource name. It must have the format of `source-connectors/{connector_name}`.
            For example: `source-connectors/http`.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector.uid}/lookUp:
    get:
      summary: Get a SOURECE connector with a permalink consisting of unique ID.
      description: |-
        `LookUpSourceConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`.

        This methods returns a source connector in VDP with it's permalink (i.e., `source_connector.uid`). It takes in `LookUpSourceConnectorRequest` and returns `LookUpSourceConnectorResponse`.

        **NOTE**: permalink in `LookUpSourceConnectorRequest` must have the format of `source-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector.
      operationId: ConnectorPublicService_LookUpSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.uid
          description: Permalink of a source connector. It must have the format of `source-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector resource.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/{source_connector_definition.name}:
    get:
      summary: Get the difinition of a SOURCE connector with it's name.
      description: "`GetSourceConnectorDefinition` is a call with the method(s) `GET` within the `ConnectorPublicService`. \n\nThis method returns a source-connector definition supported by VDP. \n\nIt takes in `GetSourceConnectorDefinitionRequest` and returns `GetSourceConnectorDefinitionResponse`.\n\n**NOTE**: `source_connector_definition.name` field in `GetSourceConnectorDefinitionRequest` must have the format of `source-connector-definitions/{connector_name}`. For example: `source-connector-definitions/http`."
      operationId: ConnectorPublicService_GetSourceConnectorDefinition
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetSourceConnectorDefinitionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector_definition.name
          description: 'SourceConnectorDefinition resource name. It must have the format of `source-connector-definitions/{source_connector_name}`. For example: `source-connector-definitions/http`.'
          in: path
          required: true
          type: string
          pattern: source-connector-definitions/[^/]+
        - name: view
          description: |-
            SourceConnectorDefinition resource view (default is DEFINITION_VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/{token.name}:
    get:
      summary: |-
        GetToken method receives a GetTokenRequest message and returns a
        GetTokenResponse message.
      operationId: MgmtPublicService_GetToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: token.name
          description: API tokens resource name. It must have the format of "tokens/*"
          in: path
          required: true
          type: string
          pattern: tokens/[^/]+
      tags:
        - MgmtPublicService
    delete:
      summary: |-
        DeleteToken method receives a DeleteTokenRequest message and returns
        a DeleteTokenResponse message.
      operationId: MgmtPublicService_DeleteToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: token.name
          description: API token resource name. It must have the format of "tokens/*"
          in: path
          required: true
          type: string
          pattern: tokens/[^/]+
      tags:
        - MgmtPublicService
  /v1alpha/{token.name}/validate:
    post:
      summary: |-
        ValidateToken method receives a ValidateTokenRequest message and
        returns a ValidateTokenResponse
      operationId: MgmtPrivateService_ValidateToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaValidateTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: token.name
          description: |-
            The resource name of the API token to validate,
            for example: "tokens/test-token"
          in: path
          required: true
          type: string
          pattern: tokens/[^/]+
        - name: body
          in: body
          required: true
          schema:
            type: object
            title: |-
              ValidateTokenRequest represents a request to validate whether
              an API token is valid to be used for triggering pipelines
      tags:
        - MgmtPrivateService
  /v1alpha/{user.name}/exist:
    get:
      summary: Check if an user exist with it's name.
      description: "`ExistUsername` is a call with the method(s) `GET` within the `MgmtPrivateService`.\n\nThis method return a boolean value indicating the existance of an user with `user.name`. \n\nIt takes in `ExistUsernameRequest` and returns a `ExistUsernameResponse`.\n\nNOTE: `user.name` in `ExistUsernameRequest` must have the format of `users/{user_name}`. For example, `users/local-user`."
      operationId: MgmtPublicService_ExistUsername
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaExistUsernameResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user.name
          description: |-
            User name. It must have the format of `users/{user_name}`.
            For example, `users/local-user`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+
      tags:
        - MgmtPublicService
  /v1alpha/admin/{destination_connector.name}:
    get:
      summary: Get a DESTINATION connector resource in VDP (admin only)
      description: |-
        `GetDestinationConnectorsAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`.

        This is a *private* method that is only avaible for admins and internal backend services to get a *destination-connector* resource in VDP.

        It takes in `GetDestinationConnectorAdminRequest` and returns `GetDestinationConnectorAdminResponse`.

        **NOTE**: The `destination_connector.name` field in `GetDestinationConnectorAdminRequest` must have the format of `destination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`.
      operationId: ConnectorPrivateService_GetDestinationConnectorAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetDestinationConnectorAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: "Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`. \nFor example, `destination-connectors/postgres-db`."
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/{destination_connector.name}/check:
    get:
      summary: Trigger a longrunning operation checking the state of a Destination Connector (admin only).
      description: "`CheckDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services to trigger a longrunning operation checking the state of a *destination-connector* resource in VDP with it's name (i.e., `destination-connector.name`). It returns a `workflow_id` with which internal services can check the results after the operation is done. Resutls are also used to update the state records in the state server.\n\nIt takes in `CheckDestinationConnectorRequest` and returns `CheckDestinationConnectorResponse`. \n\n**NOTE**: this methods triggers a longrunning operation. The state of the destination connector is only avaible when the operation is done."
      operationId: ConnectorPrivateService_CheckDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCheckDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.name
          description: "Destination Connector resource name. It must have the format of `destination-connectors/{connector_name}`. \nFor example, `destination-connectors/postgres-db`."
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/{destination_connector.uid}/lookUp:
    get:
      summary: Get a DESTINATION connector resource in VDP with a permalink consisting of unique ID (admin only).
      description: "`LookUpDestinationConnectorAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services to get a *destination-connector* resource in VDP with it's permalink (i.e., `destination-connector.uid`).\n\nIt takes in `LookUpDestinationConnectorAdminRequest` and returns `LookUpDestinationConnectorAdminResponse`.\n\n**NOTE**: permalink in `LookUpDestinationConnectorAdminRequest` must have the format of `destination-connectors/{uid}`, where `{uid}` denotes the unique ID of the model."
      operationId: ConnectorPrivateService_LookUpDestinationConnectorAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpDestinationConnectorAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector.uid
          description: Permalink of a destination connector. It must have the format of `destination-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector.
          in: path
          required: true
          type: string
          pattern: destination-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/{model.name}:
    get:
      summary: Get a model resource with it's name (admin only)
      description: "`GetModelAdmin` is a call with the method(s) `GET` within the `ModelPrivateService`.\n\nThis is a *private* method that is only avaible for admins and internal backend services to get a model resource with it's name. \n\nIt takes in `GetModelAdminRequest` and returns `GetModelAdminResponse`.\n\n**NOTE**: The `model.name` field in `GetModelAdminRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`."
      operationId: ModelPrivateService_GetModelAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.name
          description: "Name of the model resource. It must have the format of `models/{model_name}`. \nFor example, `models/yolov7`."
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: view
          description: |-
            Model view (default is VIEW_BASIC)
            VIEW_UNSPECIFIED/VIEW_BASIC: omit `Model.configuration`
            VIEW_FULL: show full information

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPrivateService
  /v1alpha/admin/{model.uid}/lookUp:
    get:
      summary: Get a model resource with a permalink consisting of unique ID (admin only).
      description: |-
        `LookUpModelAdmin` is a call with the method(s) `GET` within the `ModelPrivateService`.

        This is a *private* method that is only avaible for admins and internal backend services to get a model resource with it's permalink (i.e., `model.uid`).

        It takes in `LookUpModelAdminRequest` and returns `LookUpModelAdminResponse`.

        **NOTE**: The permalink in `LookUpModelAdminRequest` must have the format of `models/{uid}`, where `{uid}` denotes the unique ID of the model.
      operationId: ModelPrivateService_LookUpModelAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpModelAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model.uid
          description: Permalink of a model. It must have the format of `models/{uid}`, where `{uid}` denotes the unique ID of the model.
          in: path
          required: true
          type: string
          pattern: models/[^/]+
        - name: view
          description: |-
            Model view (default is VIEW_BASIC)
            VIEW_UNSPECIFIED/VIEW_BASIC: omit `Model.configuration`
            VIEW_FULL: show full information

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPrivateService
  /v1alpha/admin/{pipeline.name}:
    get:
      summary: Get a pipeline resource in VDP with it's name (admin only).
      description: "`GetPipeLineAdmin` is a call with the method(s) `GET` within the `PipelinePrivateService` service.\n\nThis is a *private* method that is only avaible for admins and internal backend services to get a pipeline resource with it's name. \n\nIt takes in `GetPipelineAdminRequest` and returns a `GetPipelineAdminResponse`.\n\n**NOTE**: The `pipeline.name` field in `GetPipelineAdminRequest` must has the format of `pipelines/{pipeline_name}`. For example, `pipelines/pipeline-1`."
      operationId: PipelinePrivateService_GetPipelineAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetPipelineAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.name
          description: "Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`. \nFor example, `pipelines/pipeline-1`."
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - PipelinePrivateService
  /v1alpha/admin/{pipeline.uid}/lookUp:
    get:
      summary: Get a pipeline resource with it's permalink (admin only).
      description: |-
        `LookUpPipelineAdmin` is a call with the method(s) `GET` within the `PipelinePrivateService` service This is a *private* method that is only avaible for admins to get a pipeline resource with a permalink.

        It takes in `LookUpPipelineAdminRequest` and returns a `LookUpPipelineAdminResponse`.

        **NOTE**: the `pipeline.uid` (permalink) in `LookUpPipelineAdminRequest` must has the format of `pipelines/{uid}`, where `{uid}` denotes the unique ID of the pipeline.
      operationId: PipelinePrivateService_LookUpPipelineAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpPipelineAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline.uid
          description: Permalink of a pipeline. It must has the format of `pipelines/{uid}`, where `{uid}` denotes the unique ID of the pipeline.
          in: path
          required: true
          type: string
          pattern: pipelines/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - PipelinePrivateService
  /v1alpha/admin/{source_connector.name}:
    get:
      summary: Get a SOURCE connector resource in VDP (admin only)
      description: "`GetSourceConnectorAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services get a *source-connector* resource in VDP.\n\nIt takes in `GetSourceConnectorAdminRequest` and returns `GetSourceConnectorAdminResponse`.\n\n**NOTE**: The `source_connector.name` field in `GetSourceConnectorAdminRequest` must have the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`."
      operationId: ConnectorPrivateService_GetSourceConnectorAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetSourceConnectorAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: "Source connector resource name. It must have the format of `source-connectors/{connector_name}`. \nFor example, `source-connectors/http`."
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/{source_connector.name}/check:
    get:
      summary: Trigger a longrunning operation checking the state of a Source Connector.
      description: "`CheckSourceConnector` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and other internal backend services to trigger a longrunning operation checking the state of a *source-connector* resource in VDP with it's name (i.e., `source-connector.name`). It returns a `workflow_id` with which internal services can check the results after the operation is done. Resutls are also used to update the state records in the state server.\n\nIt takes in `CheckSourceConnectorRequest` and returns `CheckSourceConnectorResponse`. \n\n**NOTE**: this methods triggers a longrunning operation. The state of the source connector is only avaible when the operation is done."
      operationId: ConnectorPrivateService_CheckSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCheckSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.name
          description: "Source connector resource name. It must have the format of `source-connectors/{connector_name}`. \nFor example, `source-connectors/http`."
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/{source_connector.uid}/lookUp:
    get:
      summary: Get a SOURCEconnector resource in VDP with a permalink consisting of unique ID (admin only).
      description: "`LookUpSourceConnectorAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services to get a *source-connector* resource in VDP with it's permalink (i.e., `source-connector.uid`). \n\nIt takes in `LookUpSourceConnectorAdminRequest` and returns `LookUpSourceConnectorAdminResponse`.\n\n**NOTE**: permalink in `LookUpSourceConnectorAdminRequest` must have the format of `source-connectors/{uid}`, where `{uid}` denotes the unique ID of the model."
      operationId: ConnectorPrivateService_LookUpSourceConnectorAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpSourceConnectorAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector.uid
          description: Permalink of a source connector. It must have the format of `source-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector resource.
          in: path
          required: true
          type: string
          pattern: source-connectors/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/{user.name}:
    get:
      summary: Get a existing user with user's name (admin only).
      description: |-
        `GetUserAdmin` is a call with the method(s) `GET` within the `MgmtPrivateService`.

        This is a *private* method that is only avaible for admins and internal backend services to get a new user created in VDP with user's name.

        It takes in `GetUserAdminRequest` and returns `GetUserAdminResponse`.

        **NOTE**: The `user.name` field in `GetUserAdminRequest` must have the format of `users/{user_name}`. For example, `users/local-user`.
      operationId: MgmtPrivateService_GetUserAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetUserAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user.name
          description: |-
            User name. It must have the format of `users/{user_name}`.
            For example, `users/local-user`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: view
          description: |-
            View view (default is VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the user.
             - VIEW_FULL: View: FULL, full representation of the user
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - MgmtPrivateService
    delete:
      summary: Delete an existing user (admin only)
      description: |-
        `DeleteUserAdmin` is a call with the method(s) `DELETE` within the `MgmtPrivateService`.

        This is a *private* method that is only avaible for admins and internal backend services to delete existing users.

        It takes in `DeleteUserAdminRequest` and returns `DeleteUserAdminResponse`.

        **NOTE**: The `user.name` field in `DeleteUserAdminRequest` must have the format of `users/{user_name}`. For example, `users/local-user`.
      operationId: MgmtPrivateService_DeleteUserAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteUserAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user.name
          description: "User name. It must have the format of `users/{user_name}`. \nFor example, `users/local-user`."
          in: path
          required: true
          type: string
          pattern: users/[^/]+
      tags:
        - MgmtPrivateService
    patch:
      summary: Update an existing user (admin only)
      description: "`UpdateUserAdmin` is a call with the method(s) `POST` within the `MgmtPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services to udpate existing users. \n\nIt takes in `UpdateUserAdminRequest` and returns `UpdateUserAdminResponse`.\n\n**NOTE**: The `user.name` field in `UpdateUserAdminRequest` must have the format of `users/{user_name}`. For example, `users/local-user`."
      operationId: MgmtPrivateService_UpdateUserAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateUserAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user.name
          description: 'Resource name. It must have the format of `users/{username}`. For example: `users/local-user`.'
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: user
          description: |-
            User name. It must have the format of `users/{user_name}`.
            For example, `users/local-user`.
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: User ID in UUIDv4. This field is optionally set by users (optional on resource creation, server-generated if unset).
              id:
                type: string
                description: |-
                  Resource ID (the last segment of the resource name), also the user username. This conforms to RFC-1034, which restricts to letters, numbers, and hyphen, with the first character a letter, the last a letter or a number, and a 63 character maximum.

                  NOTE: the ID can be updated.
              type:
                $ref: '#/definitions/v1alphaOwnerType'
                title: 'Owner type: fixed to `OWNER_TYPE_USER`'
                readOnly: true
              create_time:
                type: string
                format: date-time
                title: User creation time
                readOnly: true
              update_time:
                type: string
                format: date-time
                title: User update time
                readOnly: true
              email:
                type: string
                title: User email
              customer_id:
                type: string
                description: Stripe customer ID. This field is used in Instill Cloud.
                readOnly: true
              first_name:
                type: string
                title: User first name
              last_name:
                type: string
                title: User last name
              org_name:
                type: string
                title: User company or institution name
              role:
                type: string
                title: |-
                  User role. Allowed roles:
                   - "manager"
                   - "ai-researcher"
                   - "ai-engineer"
                   - "data-engineer",
                   - "data-scientist",
                   - "analytics-engineer"
                   - "hobbyist"
              newsletter_subscription:
                type: boolean
                title: User newsletter subscription
              cookie_token:
                type: string
                title: User console cookie token
            title: |-
              User name. It must have the format of `users/{user_name}`.
              For example, `users/local-user`.
            required:
              - id
              - email
              - newsletter_subscription
        - name: update_mask
          description: Update mask for a user resource
          in: query
          required: true
          type: string
      tags:
        - MgmtPrivateService
  /v1alpha/admin/{user.uid}/lookUp:
    get:
      summary: Get a existing user with a permalink consisting of unique ID (admin only).
      description: "`LookUpUserAdmin` is a call with the method(s) `GET` within the `MgmtPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services to get an existing user with a unique ID (i.e., `user.uid`). \n\nIt takes in `LookUpUserAdminRequest` and returns `LookUpUserAdminResponse`.\n\n**NOTE**: permalink in `LookUpUserAdminRequest` must has the format of `users/{uid}`, where `{uid}` denotes the unique ID of the user."
      operationId: MgmtPrivateService_LookUpUserAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaLookUpUserAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user.uid
          description: Permalink of a user. It must has the format of `users/{uid}`, where `{uid}` denotes the unique ID of the user.
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the user.
             - VIEW_FULL: View: FULL, full representation of the user
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - MgmtPrivateService
  /v1alpha/admin/destination-connectors:
    get:
      summary: List all DESTINATION connector resources in VDP (admin only)
      description: "`ListDestinationConnectorsAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and other internal backend services get a list of *destination-connector* resources avaiable in VDP. Only admins with permission can call this method. \n\nIt takes in `ListDestinationConnectorsAdminRequest` and returns `ListDestinationConnectorsAdminResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 connector resources. The maxumum number of connector resources this method can return is set to 100."
      operationId: ConnectorPrivateService_ListDestinationConnectorsAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListDestinationConnectorsAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of connectors to return. The service may return fewer
            than this value. If unspecified, at most 10 connectors will be returned.
            The maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/models:
    get:
      summary: List all model resources in VDP (admin only)
      description: "`ListModelsAdmin` is a call with the method(s) `GET` within the `ModelPrivateService`.\n\nThis is a *private* method that is only avaible for admins and internal backend services to get a list of model resources avaiable in VDP. \n\nIt takes in `ListModelsAdminRequest` and returns `ListModelsAdminResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 model resources. The maxumum number of model resources this method can return is set to 100."
      operationId: ModelPrivateService_ListModelsAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListModelsAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            Page size: the maximum number of resources to return. The service may
            return fewer than this value. If unspecified, at most 10 models will be
            returned. The maximum value is 100; values above 100 will be coereced to
            100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            Model view (default is VIEW_BASIC)
            VIEW_UNSPECIFIED/VIEW_BASIC: omit `Model.configuration`
            VIEW_FULL: show full information

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPrivateService
  /v1alpha/admin/pipelines:
    get:
      summary: List all pipelines resources in VDP (admin only).
      description: "`ListPipelinesAdmin` is a call with the method(s) `GET` within the `PipelinePrivateService` service.\n\nThis is a *private* method that is only avaible for admins and internal backend services to list *all* pipeline resources. \n\nIt takes in `ListPipelinesAdminRequest` and returns a `ListPipelinesAdminResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 pipeline resources. The maxumum number of pipeline resources this method can return is set to 100."
      operationId: PipelinePrivateService_ListPipelinesAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListPipelinesAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of pipelines to return. The service may return fewer
            than this value. If unspecified, at most 10 pipelines will be returned. The
            maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
        - name: filter
          description: Filter expression to list pipelines
          in: query
          required: false
          type: string
      tags:
        - PipelinePrivateService
  /v1alpha/admin/source-connectors:
    get:
      summary: List all SOURCE connector resources in VDP (admin only)
      description: "`ListSourceConnectorsAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services get a list of *source-connector* resources avaiable in VDP. \n\nIt takes in `ListSourceConnectorsAdminRequest` and returns `ListSourceConnectorsAdminResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 connector resources. The maxumum number of connector resources this method can return is set to 100."
      operationId: ConnectorPrivateService_ListSourceConnectorsAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListSourceConnectorsAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of connectors to return. The service may return fewer
            than this value. If unspecified, at most 10 connectors will be returned.
            The maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPrivateService
  /v1alpha/admin/users:
    get:
      summary: List all users created in VDP (admin only).
      description: "`ListUsersAdmin` is a call with the method(s) `GET` within the `MgmtPrivateService` service. \n\nThis is a *private* method that is only avaible for admins and internal backend services to list *all* users created in VDP. \n\nIt takes in `ListUsersAdminRequest` and returns a `ListUsersAdminResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 pipelines. The maxumum number of pipelines this method can return is set to 100."
      operationId: MgmtPrivateService_ListUsersAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListUsersAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: "Page size: the maximum number of resources to return. \nThe service may return fewer than this value. If unspecified,\nat most 10 users will be returned. The maximum value is 100;\nvalues above 100 will be coereced to 100."
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View view (default is VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the user.
             - VIEW_FULL: View: FULL, full representation of the user
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
        - name: filter
          description: Filter expression to list users
          in: query
          required: false
          type: string
      tags:
        - MgmtPrivateService
    post:
      summary: Create a new user (admin only).
      description: "`CreateUserAdmin` is a call with the method(s) `POST` within the `MgmtPrivateService`. \n\nThis is a *private* method that is only avaible for admins and internal backend services to create a new user. \n\nIt takes in `CreateUserAdminRequest` and returns a `CreateUserAdminResponse`.\n\n**NOTE**: The `user.name` field in `CreateUserAdminRequest` must have the format of `users/{user_name}`. For example, `users/local-user`."
      operationId: MgmtPrivateService_CreateUserAdmin
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateUserAdminResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user
          description: "User name. It must have the format of `users/{user_name}`. \nFor example, `users/local-user`."
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaUser'
            required:
              - user
      tags:
        - MgmtPrivateService
  /v1alpha/destination-connector-definitions:
    get:
      summary: List the definition of all supported DESINATION connectors
      description: "`ListDestinationConnectorDefinitions` is a call with the method(s) `GET` within the `ConnectorPublicService`.\n\nThis method returns *all* destination-connector definitions supported by VDP. \n\nIt takes in `ListDestinationConnectorDefinitionsRequest` and returns `ListDestinationConnectorDefinitionsResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 destination-connector definitions. The maxumum number of destination-connector definitions this method can return is set to 100."
      operationId: ConnectorPublicService_ListDestinationConnectorDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListDestinationConnectorDefinitionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of DestinationConnectorDefinitions to return. The
            service may return fewer than this value. If unspecified, at most 10
            DestinationConnectorDefinitions will be returned. The maximum value is 100;
            values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            Definition view (default is DEFINITION_VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/destination-connectors:
    get:
      summary: List all DESTINATION connectors avaiable.
      description: |-
        `ListDestinationConnectors` is a call with the method(s) `GET` within the `ConnectorPublicService`.

        This method returns a list of destination connectors in VDP.

        It takes in `ListDestinationConnectorsRequest` and returns `ListDestinationConnectorsResponse`.

        **NOTE**: if unspecified, this method returns at most 10 connector resources. The maxumum number of destination-connector resources this method can return is set to 100.
      operationId: ConnectorPublicService_ListDestinationConnectors
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListDestinationConnectorsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of connectors to return. The service may return fewer
            than this value. If unspecified, at most 10 connectors will be returned.
            The maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
    post:
      summary: Create a new DESTINATION connector.
      description: |-
        `CreateDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`.

        This method creates a new destination connector in VDP.

        It takes in `CreateDestinationConnectorRequest` and returns `CreateDestinationConnectorResponse`.

        â†’ See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for an introduction to Connectors in VDP.
      operationId: ConnectorPublicService_CreateDestinationConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateDestinationConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: destination_connector
          description: DestinationConnector resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaDestinationConnector'
            required:
              - destination_connector
      tags:
        - ConnectorPublicService
  /v1alpha/health/connector:
    get:
      summary: Check if the Connector service is alive or dead.
      description: "`Liveness` is a call with the method(s) `GET` within the `ConnectorPublicService` service. \n\nThis method returns the liveness (alive or dead) of the pipeilne service. \n\nIt takes in `LivenessRequest` and returns a `LivenessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: ConnectorPublicService_Liveness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpconnectorv1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - ConnectorPublicService
  /v1alpha/health/controller:
    get:
      summary: Check if the Controller service (private) is alive or dead.
      description: "`Liveness` is a call with the method(s) `GET within the `ControllerPrivateService` service.\n\nThis is a *private* method that is only avaible for admins and internal backend services to check the Liveness (alive or dead) of the controller service. \n\nIt takes in `LivenessRequest` and returns a `LivenessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.\n\n**NOTE**: Controller Service is a private service that is not avaiable to publics. This method is therefore implemented as a private method instead of a public."
      operationId: ControllerPrivateService_Liveness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpcontrollerv1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - ControllerPrivateService
  /v1alpha/health/mgmt:
    get:
      summary: Check if the Mgmt service is alive or dead.
      description: "`Liveness` is a call with the method(s) `GET` within the `MgmtPublicService` service. \n\nThis method returns the liveness (alive or dead) of the Mgmt service.\n\nIt takes in `LivenessRequest` and returns a `LivenessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: MgmtPublicService_Liveness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpmgmtv1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - MgmtPublicService
  /v1alpha/health/model:
    get:
      summary: Check if the Model service is alive or dead.
      description: "`Liveness` is a call with the method(s) `GET within the `ModelPublicService` service.\n\nThis method returns the liveness (alive or dead) of the Model service. \n\nIt takes in `LivenessRequest` and returns a `LivenessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: ModelPublicService_Liveness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpmodelv1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - ModelPublicService
  /v1alpha/health/pipeline:
    get:
      summary: Check if the Pipeline service is alive or dead.
      description: "`Liveness` is a call with the method(s) `GET within the `PipelinePublicService` service.\n\nThis method returns the liveness (alive or dead) of the pipeilne service. \n\nIt takes in `LivenessRequest` and returns a `LivenessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: PipelinePublicService_Liveness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdppipelinev1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - PipelinePublicService
  /v1alpha/health/usage:
    get:
      summary: |-
        Liveness method receives a LivenessRequest message and returns a
        LivenessResponse message.
        See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
      operationId: UsageService_Liveness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpusagev1alphaLivenessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - UsageService
  /v1alpha/model-definitions:
    get:
      summary: List the definition of all supported model resources
      description: "`ListModelDefinitions` is a call with the method(s) `GET` within the `ModelPublicService`. \n\nThis method returns *all* model definitions supported. \n\nIt takes in `ListModelDefinitionsRequest` and returns `ListModelDefinitionsResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 model definitions. The maxumum number of model definitions this method can return is set to 100."
      operationId: ModelPublicService_ListModelDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListModelDefinitionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            Page size: the maximum number of resources to return. The service may
            return fewer than this value. If unspecified, at most 10 ModelDefinitions
            will be returned. The maximum value is 100; values above 100 will be
            coereced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            Definition view (default is VIEW_UNSPECIFIED)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
  /v1alpha/models:
    get:
      summary: List all model resources avaiable in VDP.
      description: "`ListModels` is a call with the method(s) `GET` within the `ModelPublicService`.\n\nThis method returns a list of all existing model resources in VDP. \n\nIt takes in `ListModelsRequest` and returns `ListModelsResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 models. The maxumum number of models this method can return is set to 100."
      operationId: ModelPublicService_ListModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListModelsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            Page size: the maximum number of resources to return. The service may
            return fewer than this value. If unspecified, at most 10 models will be
            returned. The maximum value is 100; values above 100 will be coereced to
            100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            Model view (default is VIEW_UNSPECIFIED)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
    post:
      summary: Create a new model resource in VDP.
      description: "`CreateModel` is a call with the method(s) `POST` within the `ModelPublicService`.\n\nThis method creates a new model resource. \n\nIt takes in `CreateModelRequest` and returns `CreateModelResponse`.\n\nâ†’ See [Core concept - Model](https://www.instill.tech/docs/core-concepts/model) for an introduction to Model in VDP."
      operationId: ModelPublicService_CreateModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateModelResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: model
          description: |-
            The model to be created

            The `model.name` field is used to identify the model to create.
            Format: models/{model}
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaModel'
            required:
              - model
      tags:
        - ModelPublicService
  /v1alpha/operations:
    get:
      summary: List all longrunning operations.
      description: "`ListModelOperations` is a call with the method(s) `GET` within the `ModelPublicService` service. \n\nThis method returns a list of longrunning operations. \n\nIt takes in `ListModelOperationsRequest` and returns `ListModelOperationsResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 models. The maxumum number of models this method can return is set to 100."
      operationId: ModelPublicService_ListModelOperations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListModelOperationsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            Page size: the maximum number of resources to return. The service may
            return fewer than this value. If unspecified, at most 10 operations will be
            returned. The maximum value is 100; values above 100 will be coereced to
            100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: filter
          description: Filter expression to list operations
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_UNSPECIFIED)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
             - VIEW_FULL: View: FULL, full representation of the resource
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ModelPublicService
  /v1alpha/pipelines:
    get:
      summary: List all existing pipelines.
      description: "`ListPipelines` is a call with the method(s) `GET` within the `PipelinePublicService` service.\n\nThis method returns a list consisiting of all existing pipelines. \n\nIt takes in `ListPipelinesRequest` and returns `ListPipelinesResponse`.\n\nNOTE: if unspecified, this method returns at most 10 pipelines. The maxumum number of pipelines this method can return is set to 100."
      operationId: PipelinePublicService_ListPipelines
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListPipelinesResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of pipelines to return. The service may return fewer
            than this value. If unspecified, at most 10 pipelines will be returned. The
            maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
        - name: filter
          description: Filter expression to list pipelines
          in: query
          required: false
          type: string
      tags:
        - PipelinePublicService
    post:
      summary: Create a new pipeline.
      description: "`CreatePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. \n\nThis method creates a new pipelines (given a recipie consisting of *source*, *model instance* and *destination*). \n\nIt takes in `CreatePipelineRequest` and returns `CreatePipelineResponse`.\n\nâ†’ See [Core concept](https://www.instill.tech/docs/core-concepts/overview) for an introduction to Pipeline in VDP."
      operationId: PipelinePublicService_CreatePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreatePipelineResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: pipeline
          description: A pipeline resource to create
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaPipeline'
            required:
              - pipeline
      tags:
        - PipelinePublicService
  /v1alpha/ready/connector:
    get:
      summary: Check if the Connector service is ready to serve traffics
      description: "`Readiness` is a call with the method(s) `GET` within the `ConnectorPublicService` service. \n\nThis method returns the Readiness (ready or not ready) of the pipeilne service. \n\nIt takes in `ReadinessRequest` and returns a `ReadinessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: ConnectorPublicService_Readiness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpconnectorv1alphaReadinessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - ConnectorPublicService
  /v1alpha/ready/controller:
    get:
      summary: Check if the Controller service (private) is alive or dead.
      description: |-
        `Readiness` is a call with the method(s) `GET within the `ControllerPrivateService` service.

        This is a *private* method that is only avaible for admins and internal backend services to check the Readiness (ready or not ready) of the Controller service.

        It takes in `ReadinessRequest` and returns a `ReadinessResponse`.

        â†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.

        **NOTE**: Controller Service is a private service that is not avaiable to publics. This method is therefore implemented as a private method instead of a public.
      operationId: ControllerPrivateService_Readiness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpcontrollerv1alphaReadinessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - ControllerPrivateService
  /v1alpha/ready/mgmt:
    get:
      summary: Check if the Mgmt service is ready to serve traffics
      description: "`Readiness` is a call with the method(s) `GET` within the `MgmtPublicService` service. \n\nThis method returns the Readiness (ready or not ready) of the Mgmt service.\n\nIt takes in `ReadinessRequest` and returns a `ReadinessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: MgmtPublicService_Readiness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpmgmtv1alphaReadinessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - MgmtPublicService
  /v1alpha/ready/model:
    get:
      summary: Check if the Model service is ready to serve traffics
      description: "`Readiness` is a call with the method(s) `GET` within the `ModelPublicService` service. \n\nThis method returns the Readiness (ready or not ready) of the Model service.\n\nIt takes in `ReadinessRequest` and returns a `ReadinessResponse`.\n\nâ†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details."
      operationId: ModelPublicService_Readiness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdpmodelv1alphaReadinessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - ModelPublicService
  /v1alpha/ready/pipeline:
    get:
      summary: Check if the Pipeline service is ready to serve traffics
      description: |-
        `Readiness` is a call with the method(s) `GET` within the `PipelinePublicService` service.

        This method returns the Readiness (ready or not ready) of the pipeilne service.

         It takes in `ReadinessRequest` and returns a `ReadinessResponse`.

        â†’ See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
      operationId: PipelinePublicService_Readiness2
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/vdppipelinev1alphaReadinessResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: health_check_request.service
          description: Service name to check for its readiness status
          in: query
          required: false
          type: string
      tags:
        - PipelinePublicService
  /v1alpha/reports:
    post:
      summary: |-
        SendSessionReport method receives a SendSessionReportRequest message and
        returns a SendSessionReportResponse message.
      operationId: UsageService_SendSessionReport
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaSendSessionReportResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: report
          description: A report resource to create
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaSessionReport'
            required:
              - report
      tags:
        - UsageService
  /v1alpha/sessions:
    post:
      summary: |-
        CreateSession method receives a CreateSessionRequest message and returns
        a CreateSessionResponse message.
      operationId: UsageService_CreateSession
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateSessionResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: session
          description: A session resource to create
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaSession'
            required:
              - session
      tags:
        - UsageService
  /v1alpha/source-connector-definitions:
    get:
      summary: List the definition of all supported SOURCE connectors
      description: "`ListSourceConnectorDefinitions` is a call with the method(s) `GET` within the `ConnectorPublicService`. \n\nThis method returns *all* source connector definitions supported by VDP. \n\nIt takes in `ListSourceConnectorDefinitionsRequest` and returns `ListSourceConnectorDefinitionsResponse`.\n\n**NOTE**: if unspecified, this method returns at most 10 source-connector definitions. The maxumum number of source-connector definitions this method can return is set to 100."
      operationId: ConnectorPublicService_ListSourceConnectorDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListSourceConnectorDefinitionsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of SourceConnectorDefinitions to return. The service may
            return fewer than this value. If unspecified, at most 10
            SourceConnectorDefinitions will be returned. The maximum value is 100;
            values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            Definition view (default is DEFINITION_VIEW_BASIC)

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
  /v1alpha/source-connectors:
    get:
      summary: List all SOURCE connectors avaiable.
      description: |-
        `ListSourceConnectors` is a call with the method(s) `GET` within the `ConnectorPublicService`.

        This method returns a list of source connectors in VDP.

        It takes in `ListSourceConnectorsRequest` and returns `ListSourceConnectorsResponse`.

        **NOTE**: if unspecified, this method returns at most 10 connector resources. The maxumum number of connector resources this method can return is set to 100.
      operationId: ConnectorPublicService_ListSourceConnectors
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListSourceConnectorsResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of connectors to return. The service may return fewer
            than this value. If unspecified, at most 10 connectors will be returned.
            The maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View (default is VIEW_BASIC) represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

             - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
             - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
             - VIEW_FULL: View: FULL, full representation of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_UNSPECIFIED
            - VIEW_BASIC
            - VIEW_FULL
          default: VIEW_UNSPECIFIED
      tags:
        - ConnectorPublicService
    post:
      summary: Create a new SOURCE connector.
      description: |-
        `CreateSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`.

        This method creates a new source connector in VDP.

        It takes in `CreateSourceConnectorRequest` and returns `CreateSourceConnectorResponse`.

        â†’ See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for an introduction to Connectors in VDP.
      operationId: ConnectorPublicService_CreateSourceConnector
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateSourceConnectorResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: source_connector
          description: SourceConnector resource
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaSourceConnector'
            required:
              - source_connector
      tags:
        - ConnectorPublicService
  /v1alpha/tokens:
    get:
      summary: |-
        ListTokens method receives a ListTokensRequest message and returns a
        ListTokensResponse message.
      operationId: MgmtPublicService_ListTokens
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListTokensResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: page_size
          description: |-
            The maximum number of API tokens to return. The service may return fewer
            than this value. If unspecified, at most 10 API tokens will be returned. The
            maximum value is 100; values above 100 will be coerced to 100.
          in: query
          required: false
          type: string
          format: int64
        - name: page_token
          description: Page token
          in: query
          required: false
          type: string
      tags:
        - MgmtPublicService
    post:
      summary: |-
        CreateToken method receives a CreateTokenRequest message and returns
        a CreateTokenResponse message.
      operationId: MgmtPublicService_CreateToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateTokenResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: token
          description: A token resource to create
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaApiToken'
            required:
              - token
      tags:
        - MgmtPublicService
  /v1alpha/users/me:
    get:
      summary: Get user's own user information
      description: "`QueryAuthenticatedUser` is a call with the method(s) `GET` within the `MgmtPrivateService`. \n\nThis method is for an authenticated user to query it's *own* user information. \n\nIt takes in `QueryAuthenticatedUserRequest` and returns a `QueryAuthenticatedUserResponse`."
      operationId: MgmtPublicService_QueryAuthenticatedUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaQueryAuthenticatedUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      tags:
        - MgmtPublicService
    patch:
      summary: Update user's own user information
      description: "`PatchAuthenticatedUser` is a call with the method(s) `PATCH` within the `MgmtPrivateService`. \n\nThis method is for an authenticated user to update it's *own* user information.\n\nIt takes in `PatchAuthenticatedUserRequest` and returns a `PatchAuthenticatedUserResponse`."
      operationId: MgmtPublicService_PatchAuthenticatedUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaPatchAuthenticatedUserResponse'
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpcStatus'
      parameters:
        - name: user
          description: The user to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaUser'
            required:
              - user
        - name: update_mask
          description: Update mask for a user resource
          in: query
          required: true
          type: string
      tags:
        - MgmtPublicService
definitions:
  AdvancedAuthAuthFlowType:
    type: string
    enum:
      - AUTH_FLOW_TYPE_UNSPECIFIED
      - AUTH_FLOW_TYPE_OAUTH2_0
      - AUTH_FLOW_TYPE_OAUTH1_0
    default: AUTH_FLOW_TYPE_UNSPECIFIED
    description: |-
      - AUTH_FLOW_TYPE_UNSPECIFIED: AuthFlowType: AUTH_TYPE_UNSPECIFIED
       - AUTH_FLOW_TYPE_OAUTH2_0: AuthFlowType: AUTH_TYPE_OAUTH2_0
       - AUTH_FLOW_TYPE_OAUTH1_0: AuthFlowType: AUTH_TYPE_OAUTH1_0
    title: AuthFlowType enumerates the type of auth
  HealthCheckResponseServingStatus:
    type: string
    enum:
      - SERVING_STATUS_UNSPECIFIED
      - SERVING_STATUS_SERVING
      - SERVING_STATUS_NOT_SERVING
    default: SERVING_STATUS_UNSPECIFIED
    description: |-
      - SERVING_STATUS_UNSPECIFIED: Serving status: UNSPECIFIED
       - SERVING_STATUS_SERVING: Serving status: SERVING
       - SERVING_STATUS_NOT_SERVING: Serving status: NOT SERVING
    title: ServingStatus enumerates the status of a queried service
  ModelTask:
    type: string
    enum:
      - TASK_UNSPECIFIED
      - TASK_CLASSIFICATION
      - TASK_DETECTION
      - TASK_KEYPOINT
      - TASK_OCR
      - TASK_INSTANCE_SEGMENTATION
      - TASK_SEMANTIC_SEGMENTATION
      - TASK_TEXT_TO_IMAGE
      - TASK_TEXT_GENERATION
    default: TASK_UNSPECIFIED
    description: |-
      - TASK_UNSPECIFIED: Task: UNSPECIFIED
       - TASK_CLASSIFICATION: Task: CLASSIFICATION
       - TASK_DETECTION: Task: DETECTION
       - TASK_KEYPOINT: Task: KEYPOINT
       - TASK_OCR: Task: OCR
       - TASK_INSTANCE_SEGMENTATION: Task: INSTANCE SEGMENTATION
       - TASK_SEMANTIC_SEGMENTATION: Task: SEMANTIC SEGMENTATION
       - TASK_TEXT_TO_IMAGE: Task: TEXT TO IMAGE
       - TASK_TEXT_GENERATION: Task: TEXT Generation
    title: Task enumerates the task type of a model
  ModelVisibility:
    type: string
    enum:
      - VISIBILITY_UNSPECIFIED
      - VISIBILITY_PRIVATE
      - VISIBILITY_PUBLIC
    default: VISIBILITY_UNSPECIFIED
    description: |-
      - VISIBILITY_UNSPECIFIED: Visibility: UNSPECIFIED, equivalent to PRIVATE.
       - VISIBILITY_PRIVATE: Visibility: PRIVATE
       - VISIBILITY_PUBLIC: Visibility: PUBLIC
    title: Model visibility including public or private
  PipelineMode:
    type: string
    enum:
      - MODE_UNSPECIFIED
      - MODE_SYNC
      - MODE_ASYNC
    default: MODE_UNSPECIFIED
    description: |-
      - MODE_UNSPECIFIED: Mode: UNSPECIFIED
       - MODE_SYNC: Mode: SYNC
       - MODE_ASYNC: Mode: ASYNC
    title: Mode enumerates the pipeline modes
  SessionService:
    type: string
    enum:
      - SERVICE_UNSPECIFIED
      - SERVICE_MGMT
      - SERVICE_CONNECTOR
      - SERVICE_MODEL
      - SERVICE_PIPELINE
    default: SERVICE_UNSPECIFIED
    description: |-
      - SERVICE_UNSPECIFIED: Service: UNSPECIFIED
       - SERVICE_MGMT: Service: MGMT
       - SERVICE_CONNECTOR: Service: CONNECTOR
       - SERVICE_MODEL: Service: MODEL
       - SERVICE_PIPELINE: Service: PIPELINE
    title: Service enumerates the services to collect data from
  googlelongrunningOperation:
    type: object
    properties:
      name:
        type: string
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should be a resource name ending with `operations/{unique_id}`.
      metadata:
        $ref: '#/definitions/protobufAny'
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
      done:
        type: boolean
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
      error:
        $ref: '#/definitions/rpcStatus'
        description: The error result of the operation in case of failure or cancellation.
      response:
        $ref: '#/definitions/protobufAny'
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

      Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

      Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON

      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  protobufNullValue:
    type: string
    enum:
      - NULL_VALUE
    default: NULL_VALUE
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

       The JSON representation for `NullValue` is JSON `null`.

       - NULL_VALUE: Null value.
  rpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
      details:
        type: array
        items:
          $ref: '#/definitions/protobufAny'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  typeDate:
    type: object
    properties:
      year:
        type: integer
        format: int32
        description: |-
          Year of the date. Must be from 1 to 9999, or 0 to specify a date without
          a year.
      month:
        type: integer
        format: int32
        description: |-
          Month of a year. Must be from 1 to 12, or 0 to specify a year without a
          month and day.
      day:
        type: integer
        format: int32
        description: |-
          Day of a month. Must be from 1 to 31 and valid for the year and month, or 0
          to specify a year by itself or a year and month where the day isn't
          significant.
    description: |-
      * A full date, with non-zero year, month, and day values
      * A month and day value, with a zero year, such as an anniversary
      * A year on its own, with zero month and day values
      * A year and month value, with a zero day, such as a credit card expiration
      date

      Related types are [google.type.TimeOfDay][google.type.TimeOfDay] and
      `google.protobuf.Timestamp`.
    title: |-
      Represents a whole or partial calendar date, such as a birthday. The time of
      day and time zone are either specified elsewhere or are insignificant. The
      date is relative to the Gregorian Calendar. This can represent one of the
      following:
  v1alphaActivatePipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: ActivatePipelineResponse represents an activated pipeline
  v1alphaAdvancedAuth:
    type: object
    properties:
      auth_flow_type:
        $ref: '#/definitions/AdvancedAuthAuthFlowType'
        title: AdvancedAuth auth flow type
      predicate_key:
        type: array
        items:
          type: string
        title: |-
          AdvancedAuth predicate key, i.e., the JSON Path to a field in the
          connectorSpecification that should exist for the advanced auth to be
          applicable
      predicate_value:
        type: string
        title: |-
          AdvancedAuth predicate value, i.e., the value of the predicate key fields
          for the advanced auth to be applicable
      oauth_config_specification:
        $ref: '#/definitions/v1alphaOauthConfigSpecification'
        title: OauthConfigSpecification represents OAuth config specification
    description: |-
      Additional and optional specification object to describe what an 'advanced'
      Auth flow would need to function.
      - A connector should be able to fully function with the configuration as
      described by the ConnectorSpecification in a 'basic' mode.
      - The 'advanced' mode provides easier UX for the user with UI improvements
      and automations. However, this requires further setup on the server side by
      instance or workspace admins beforehand. The trade-off is that the user does
      not have to provide as many technical inputs anymore and the auth process is
      faster and easier to complete.
  v1alphaApiToken:
    type: object
    properties:
      name:
        type: string
        title: API token resource name. It must have the format of "tokens/*"
        readOnly: true
      uid:
        type: string
        title: API token UUID
        readOnly: true
      id:
        type: string
        description: |-
          API token resource ID (the last segment of the resource name) used to
          construct the resource name. This conforms to RFC-1034, which restricts to
          letters, numbers, and hyphen, with the first character a letter, the last a
          letter or a number, and a 63 character maximum.
          Use this field to define where it's being used.
      create_time:
        type: string
        format: date-time
        title: API token creation time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: API token update time
        readOnly: true
      access_token:
        type: string
        description: |-
          An opaque access token representing the API token string.
          To validate the token, the recipient of the token needs to call the server that issued the token.
        readOnly: true
      state:
        $ref: '#/definitions/v1alphaApiTokenState'
        title: API token state
        readOnly: true
      token_type:
        type: string
        title: API token type, value is fixed to "Bearer"
        readOnly: true
      lifetime:
        type: string
        format: int64
        title: The amount of time (in seconds) the API token will live. If set to -1, indicating a non-expire token
      expires_in:
        type: string
        format: int64
        title: The amount of time (in seconds) the API token will expire. If value is -1, indicating a non-expire token
        readOnly: true
    title: ApiToken represents the content of a API token
  v1alphaApiTokenState:
    type: string
    enum:
      - STATE_UNSPECIFIED
      - STATE_INACTIVE
      - STATE_ACTIVE
      - STATE_EXPIRED
    default: STATE_UNSPECIFIED
    description: |-
      - STATE_UNSPECIFIED: State: UNSPECIFIED
       - STATE_INACTIVE: State: INACTIVE
       - STATE_ACTIVE: State: ACTIVE
       - STATE_EXPIRED: State: EXPIRED
    title: State enumerates the state of an API token
  v1alphaBoundingBox:
    type: object
    properties:
      top:
        type: number
        format: float
        title: Bounding box top y-axis value
        readOnly: true
      left:
        type: number
        format: float
        title: Bounding box left x-axis value
        readOnly: true
      width:
        type: number
        format: float
        title: Bounding box width value
        readOnly: true
      height:
        type: number
        format: float
        title: Bounding box height value
        readOnly: true
    title: BoundingBox represents the bounding box data structure
  v1alphaCancelModelOperationResponse:
    type: object
    title: |-
      CancelModelOperationResponse represents a response for canceling a model
      operation
  v1alphaCheckDestinationConnectorResponse:
    type: object
    properties:
      workflow_id:
        type: string
        title: Retrieved longrunning workflow id
    title: |-
      CheckDestinationConnectorResponse represents a response to fetch a destination connector's
      current state
  v1alphaCheckSourceConnectorResponse:
    type: object
    properties:
      workflow_id:
        type: string
        title: Retrieved longrunning workflow id
    title: |-
      CheckSourceConnectorResponse represents a response to fetch a source connector's
      current state
  v1alphaClassificationInput:
    type: object
    properties:
      image_url:
        type: string
        title: Image type URL
      image_base64:
        type: string
        title: Image type base64
    title: ClassificationInput represents the input of classification task
  v1alphaClassificationInputStream:
    type: object
    properties:
      file_lengths:
        type: array
        items:
          type: string
          format: uint64
        title: The list of file length for each uploaded binary file
      content:
        type: string
        format: byte
        title: Content of images in bytes
    title: ClassificationInputStream represents the input of classification task when using stream method
    required:
      - file_lengths
      - content
  v1alphaClassificationOutput:
    type: object
    properties:
      category:
        type: string
        title: Classification category
        readOnly: true
      score:
        type: number
        format: float
        title: Classification score
        readOnly: true
    title: ClassificationOutput represents the output of classification task
  v1alphaConnectDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: A DestinationConnector resource
    title: |-
      ConnectDestinationConnectorResponse represents a connected destination
      connector
  v1alphaConnectSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: A SourceConnector resource
    title: ConnectSourceConnectorResponse represents a connected source connector
  v1alphaConnector:
    type: object
    properties:
      description:
        type: string
        title: Connector description
      configuration:
        type: object
        title: Connector configuration in JSON format
      state:
        $ref: '#/definitions/v1alphaConnectorState'
        title: Connector state
        readOnly: true
      tombstone:
        type: boolean
        title: Connector tombstone
        readOnly: true
      user:
        type: string
        description: The resource name of a user, e.g., "users/local-user".
        readOnly: true
      org:
        type: string
        title: The resource name of an organization
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: Connector creation time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: Connector update time
        readOnly: true
    description: Connector represents a connector resource.
    required:
      - configuration
  v1alphaConnectorDefinition:
    type: object
    properties:
      title:
        type: string
        title: ConnectorDefinition title
        readOnly: true
      docker_repository:
        type: string
        title: ConnectorDefinition Docker repository
        readOnly: true
      docker_image_tag:
        type: string
        title: ConnectorDefinition Docker image tag
        readOnly: true
      documentation_url:
        type: string
        title: ConnectorDefinition documentation URL
        readOnly: true
      icon:
        type: string
        title: ConnectorDefinition icon
        readOnly: true
      spec:
        $ref: '#/definitions/v1alphaSpec'
        title: ConnectorDefinition spec
        readOnly: true
      tombstone:
        type: boolean
        title: |-
          ConnectorDefinition tombstone, i.e., if not set or false, the
          configuration is active, or otherwise, if true, this configuration is
          permanently off
        readOnly: true
      public:
        type: boolean
        title: |-
          ConnectorDefinition public flag, i.e., true if this connector
          definition is available to all workspaces
        readOnly: true
      custom:
        type: boolean
        title: |-
          ConnectorDefinition custom flag, i.e., whether this is a custom
          connector definition
        readOnly: true
      release_stage:
        $ref: '#/definitions/vdpconnectorv1alphaReleaseStage'
        title: ConnectorDefinition release stage
        readOnly: true
      release_date:
        $ref: '#/definitions/typeDate'
        description: |-
          ConnectorDefinition release date, i.e., the date when this connector
          was first released, in yyyy-mm-dd format.
        readOnly: true
      resource_requirements:
        type: object
        title: ConnectorDefinition resource requirements
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: ConnectorDefinition creation time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: ConnectorDefinition update time
        readOnly: true
    title: ConnectorDefinition represents the connector definition data model
  v1alphaConnectorState:
    type: string
    enum:
      - STATE_UNSPECIFIED
      - STATE_DISCONNECTED
      - STATE_CONNECTED
      - STATE_ERROR
    default: STATE_UNSPECIFIED
    description: |-
      - STATE_UNSPECIFIED: State: UNSPECIFIED
       - STATE_DISCONNECTED: State: DISCONNECTED
       - STATE_CONNECTED: State: CONNECTED
       - STATE_ERROR: State: ERROR
    title: State enumerates the connector state
  v1alphaConnectorUsageData:
    type: object
    properties:
      usages:
        type: array
        items:
          $ref: '#/definitions/v1alphaConnectorUsageDataUserUsageData'
        title: Usage data of all users in the connector service
    title: Connector service usage data
  v1alphaConnectorUsageDataUserUsageData:
    type: object
    properties:
      user_uid:
        type: string
        title: User UUID
      source_connector_connected_state_num:
        type: string
        format: int64
        title: Number of source connectors with 'connected' state
      source_connector_disconnected_state_num:
        type: string
        format: int64
        title: Number of source connectors with 'disconneceted' state
      source_connector_definition_ids:
        type: array
        items:
          type: string
        description: |-
          Definition IDs of the source connectors. Element in the list
          should not be duplicated.
      destination_connector_connected_state_num:
        type: string
        format: int64
        title: Number of destination connectors with 'connected' state
      destination_connector_disconnected_state_num:
        type: string
        format: int64
        title: Number of destination connectors with 'disconnected' state
      destination_connector_definition_ids:
        type: array
        items:
          type: string
        description: |-
          Definition IDs of the destination connectors. Element in the
          list should not be duplicated.
    title: Per user usage data in the connector service
    required:
      - user_uid
      - source_connector_connected_state_num
      - source_connector_disconnected_state_num
      - source_connector_definition_ids
      - destination_connector_connected_state_num
      - destination_connector_disconnected_state_num
      - destination_connector_definition_ids
  v1alphaCreateDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: DestinationConnector resource
    title: |-
      CreateDestinationConnectorResponse represents a response for a
      DestinationConnector resource
  v1alphaCreateModelBinaryFileUploadResponse:
    type: object
    properties:
      operation:
        $ref: '#/definitions/googlelongrunningOperation'
        title: Create model operation message
        readOnly: true
    title: CreateModelBinaryFileUploadResponse represents a response for a model
  v1alphaCreateModelResponse:
    type: object
    properties:
      operation:
        $ref: '#/definitions/googlelongrunningOperation'
        title: Create model operation message
        readOnly: true
    title: CreateModelResponse represents a response for a model
  v1alphaCreatePipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: The created pipeline resource
    title: CreatePipelineResponse represents a response for a pipeline resource
  v1alphaCreateSessionResponse:
    type: object
    properties:
      session:
        $ref: '#/definitions/v1alphaSession'
        title: A session resource
    title: CreateSessionResponse represents a response for a session response
  v1alphaCreateSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: SourceConnector resource
    title: |-
      CreateSourceConnectorResponse represents a response for a
      SourceConnector resource
  v1alphaCreateTokenResponse:
    type: object
    properties:
      token:
        $ref: '#/definitions/v1alphaApiToken'
        title: The created API token resource
    title: CreateTokenResponse represents a response for a API token resource
  v1alphaCreateUserAdminResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUser'
        title: A user resource
    title: CreateUserAdminResponse represents a response for a user response
  v1alphaDeactivatePipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: DeactivatePipelineResponse represents an inactivated pipeline
  v1alphaDeleteDestinationConnectorResponse:
    type: object
    title: DeleteDestinationConnectorResponse represents an empty response
  v1alphaDeleteModelResponse:
    type: object
    title: DeleteModelResponse represents an empty response
  v1alphaDeletePipelineResponse:
    type: object
    title: DeletePipelineResponse represents an empty response
  v1alphaDeleteResourceResponse:
    type: object
    title: DeleteResourceResponse represents an empty response
  v1alphaDeleteSourceConnectorResponse:
    type: object
    title: DeleteSourceConnectorResponse represents an empty response
  v1alphaDeleteTokenResponse:
    type: object
    title: DeleteTokenResponse represents an empty response
  v1alphaDeleteUserAdminResponse:
    type: object
    title: DeleteUserAdminResponse represents an empty response
  v1alphaDeployModelResponse:
    type: object
    properties:
      operation:
        $ref: '#/definitions/googlelongrunningOperation'
        title: Deploy operation message
    title: DeployModelResponse represents a response for a deployed model
  v1alphaDestinationConnector:
    type: object
    properties:
      name:
        type: string
        description: |-
          Destination connector resource name. It must have the format of `destination-connectors/{connector_name}`.
          For example, `destination-connectors/postgres-db`.
        readOnly: true
      uid:
        type: string
        title: Destination connector UUID
        readOnly: true
      id:
        type: string
        description: |-
          Destination connector resource ID (the last segment of the resource name)
          used to construct the resource name. This conforms to RFC-1034, which
          restricts to letters, numbers, and hyphen, with the first character a
          letter, the last a letter or a number, and a 63 character maximum.
      destination_connector_definition:
        type: string
        title: Destination connector definition resource
      connector:
        $ref: '#/definitions/v1alphaConnector'
        title: Destination connector's connector data structure
    title: DestinationConnector represents a destination connector resource
    required:
      - connector
  v1alphaDestinationConnectorDefinition:
    type: object
    properties:
      name:
        type: string
        title: |-
          DestinationConnectorDefinition resource name. It must have the format of
          "connector-definitions/*"
        readOnly: true
      uid:
        type: string
        title: DestinationConnectorDefinition UUID
        readOnly: true
      id:
        type: string
        description: |-
          DestinationConnectorDefinition resource ID (the last segment of the
          resource name) used to construct the resource name. This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.
      connector_definition:
        $ref: '#/definitions/v1alphaConnectorDefinition'
        title: DestinationConnectorDefinition connector definition
        readOnly: true
    title: |-
      DestinationConnectorDefinition represents the destination connector
      definition resource
  v1alphaDetectionInput:
    type: object
    properties:
      image_url:
        type: string
        title: Image type URL
      image_base64:
        type: string
        title: Image type base64
    title: DetectionInput represents the input of detection task
  v1alphaDetectionInputStream:
    type: object
    properties:
      file_lengths:
        type: array
        items:
          type: string
          format: uint64
        title: The list of file length for each uploaded binary file
      content:
        type: string
        format: byte
        title: Content of images in bytes
    title: DetectionInputStream represents the input of detection task when using stream method
    required:
      - file_lengths
      - content
  v1alphaDetectionObject:
    type: object
    properties:
      category:
        type: string
        title: Detection object category
        readOnly: true
      score:
        type: number
        format: float
        title: Detection object score
        readOnly: true
      bounding_box:
        $ref: '#/definitions/v1alphaBoundingBox'
        title: Detection bounding box
        readOnly: true
    title: DetectionObject represents a predicted object
  v1alphaDetectionOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/v1alphaDetectionObject'
        title: A list of detection objects
        readOnly: true
    title: DetectionOutput represents the output of detection task
  v1alphaDisconnectDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: A DestinationConnector resource
    title: |-
      DisconnectDestinationConnectorResponse represents a disconnected destination
      connector
  v1alphaDisconnectSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: A SourceConnector resource
    title: DisconnectSourceConnectorResponse represents a disconnected source connector
  v1alphaExistUsernameResponse:
    type: object
    properties:
      exists:
        type: boolean
        title: A boolean value indicating whether the username has been occupied
    title: ExistUsernameResponse represents a response about whether the queried username has been occupied
  v1alphaGetBulkCumulativeModelOnlineRecordsResponse:
    type: object
    properties:
      bulk_cumulative_records:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetCumulativeModelOnlineRecordsResponse'
        title: A list of cumulative model online record lists
    title: GetBulkCumulativeModelOnlineRecordsResponse represents a response to GetBulkCumulativeModelOnlineRecordsRequest
    required:
      - bulk_cumulative_records
  v1alphaGetBulkCumulativePipelineTriggerRecordsResponse:
    type: object
    properties:
      bulk_cumulative_records:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetCumulativePipelineTriggerRecordsResponse'
        title: A list of cumulative pipeline trigger record lists
    title: GetBulkCumulativePipelineTriggerRecordsResponse represents a response to GetBulkCumulativePipelineTriggerRecordsRequest
    required:
      - bulk_cumulative_records
  v1alphaGetBulkModelOnlinePriceResponse:
    type: object
    properties:
      bulk_prices:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetModelOnlinePriceResponse'
        title: A list of model online price lists
    title: GetBulkModelOnlinePriceResponse represents a response to GetBulkModelOnlinePriceRequest
    required:
      - bulk_prices
  v1alphaGetBulkModelOnlineRecordsResponse:
    type: object
    properties:
      bulk_records:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetModelOnlineRecordsResponse'
        title: A list of model online record lists
    title: GetBulkModelOnlineRecordsResponse represents a response to GetBulkModelOnlineRecordsRequest
    required:
      - bulk_records
  v1alphaGetBulkModelOnlineSummaryResponse:
    type: object
    properties:
      bulk_summaries:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetModelOnlineSummaryResponse'
        title: A list of model online usage summaries
    title: GetBulkModelOnlineSummaryResponse represents a response to GetBulkModelOnlineSummaryRequest
    required:
      - bulk_summaries
  v1alphaGetBulkPipelineTriggerPriceResponse:
    type: object
    properties:
      bulk_prices:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetPipelineTriggerPriceResponse'
        title: A list of pipeline trigger price lists
    title: GetBulkPipelineTriggerPriceResponse represents a response to GetBulkPipelineTriggerPriceRequest
    required:
      - bulk_prices
  v1alphaGetBulkPipelineTriggerRecordsResponse:
    type: object
    properties:
      bulk_records:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetPipelineTriggerRecordsResponse'
        title: A list of pipeline trigger record lists
    title: GetBulkPipelineTriggerRecordsResponse represents a response to GetBulkPipelineTriggerRecordsRequest
    required:
      - bulk_records
  v1alphaGetBulkPipelineTriggerSummariesResponse:
    type: object
    properties:
      bulk_summaries:
        type: array
        items:
          $ref: '#/definitions/v1alphaGetPipelineTriggerSummaryResponse'
        title: A list of pipeline trigger usage summries
    title: GetBulkPipelineTriggerSummariesResponse represents a response to GetBulkPipelineTriggerSummariesRequest
    required:
      - bulk_summaries
  v1alphaGetConnectorOperationResponse:
    type: object
    properties:
      operation:
        $ref: '#/definitions/googlelongrunningOperation'
        title: The retrieved longrunning operation
    title: GetConnectorOperationResponse represents a response for a longrunning operation
  v1alphaGetCumulativeModelOnlineRecordsRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      model:
        $ref: '#/definitions/v1alphaModelData'
        title: Model information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetCumulativeModelOnlineRecordsRequest represents a query for cumulative model online records
    required:
      - user
      - model
      - time_interval
  v1alphaGetCumulativeModelOnlineRecordsResponse:
    type: object
    properties:
      cumulative_records:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelUsageRecord'
        title: A list of model online records in cumulative format
    title: GetCumulativeModelOnlineRecordsResponse represents a response to GetCumulativeModelOnlineRecordsRequest
    required:
      - cumulative_records
  v1alphaGetCumulativePipelineTriggerRecordsRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      pipeline:
        $ref: '#/definitions/v1alphaPipelineData'
        title: Pipeline information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetCumulativePipelineTriggerRecordsRequest represents a query for cumulative pipeline trigger records
    required:
      - user
      - pipeline
  v1alphaGetCumulativePipelineTriggerRecordsResponse:
    type: object
    properties:
      cumulative_records:
        type: array
        items:
          $ref: '#/definitions/v1alphaPipelineUsageRecord'
        title: Pipeline trigger records where values are in cumulative formats
    title: GetCumulativePipelineTriggerRecordsResponse represents a response to GetCumulativePipelineTriggerRecordsRequest
    required:
      - cumulative_records
  v1alphaGetDestinationConnectorAdminResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: DestinationConnector resource
    title: |-
      GetDestinationConnectorAdminResponse represents a response for a
      DestinationConnector resource
  v1alphaGetDestinationConnectorDefinitionResponse:
    type: object
    properties:
      destination_connector_definition:
        $ref: '#/definitions/v1alphaDestinationConnectorDefinition'
        title: A DestinationConnectorDefinition resource
    title: |-
      GetDestinationConnectorDefinitionResponse represents a
      DestinationConnectorDefinition response
  v1alphaGetDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: DestinationConnector resource
    title: |-
      GetDestinationConnectorResponse represents a response for a
      DestinationConnector resource
  v1alphaGetModelAdminResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: The retrieved model
    title: GetModelAdminResponse represents a response for a model
  v1alphaGetModelCardResponse:
    type: object
    properties:
      readme:
        $ref: '#/definitions/v1alphaModelCard'
        title: Retrieved model card
    title: GetModelCardResponse represents a response to fetch a model's README card
  v1alphaGetModelDefinitionResponse:
    type: object
    properties:
      model_definition:
        $ref: '#/definitions/v1alphaModelDefinition'
        title: A model definition instance
    title: GetModelDefinitionResponse represents a response for a model definition
  v1alphaGetModelOnlinePriceRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      model:
        $ref: '#/definitions/v1alphaModelData'
        title: Pipeline information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetPipelineTriggerPriceRequest represents a query for price data of the billing periods covered by the time interval
    required:
      - user
      - model
      - time_interval
  v1alphaGetModelOnlinePriceResponse:
    type: object
    properties:
      price:
        type: array
        items:
          $ref: '#/definitions/v1alphaPriceData'
        title: A list of model online prices given the billing periods covered by the time interval
    title: GetModelOnlinePriceResponse represents a response to GetModelOnlinePriceRequest
    required:
      - price
  v1alphaGetModelOnlineRecordsRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      model:
        $ref: '#/definitions/v1alphaModelData'
        title: Model information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetModelOnlineRecordsRequest represent a query for model online records
    required:
      - user
      - model
      - time_interval
  v1alphaGetModelOnlineRecordsResponse:
    type: object
    properties:
      records:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelUsageRecord'
        title: A list of model trigger records
    title: GetModelOnlineRecordsResponse represents a response to GetModelOnlineRecordsRequest
    required:
      - records
  v1alphaGetModelOnlineSummaryRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      model:
        $ref: '#/definitions/v1alphaModelData'
        title: Pipeline information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetModelOnlineSummaryRequest represents a query for model online summary
    required:
      - user
      - model
      - time_interval
  v1alphaGetModelOnlineSummaryResponse:
    type: object
    properties:
      summary:
        $ref: '#/definitions/v1alphaUsageSummary'
        title: The total model online usage in the time interval
    title: GetModelOnlineSummaryResponse represents a response to GetModelOnlineSummaryRequest
    required:
      - summary
  v1alphaGetModelOperationResponse:
    type: object
    properties:
      operation:
        $ref: '#/definitions/googlelongrunningOperation'
        title: The retrieved model operation
    title: GetModelOperationResponse represents a response for a model operation
  v1alphaGetModelResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: The retrieved model
    title: GetModelResponse represents a response for a model
  v1alphaGetModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelData'
        title: A list of model informations
    title: GetPipelinesResponse represents a respond to GetModelsRequest
    required:
      - models
  v1alphaGetPipelineAdminResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: GetPipelineAdminResponse represents a response for a pipeline resource
  v1alphaGetPipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: GetPipelineResponse represents a response for a pipeline resource
  v1alphaGetPipelineTriggerPriceRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      pipeline:
        $ref: '#/definitions/v1alphaPipelineData'
        title: Pipeline information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetPipelineTriggerPriceRequest represents a query for pipeline trigger prices given the billing periods covered by the time interval
    required:
      - user
      - pipeline
      - time_interval
  v1alphaGetPipelineTriggerPriceResponse:
    type: object
    properties:
      price:
        type: array
        items:
          $ref: '#/definitions/v1alphaPriceData'
        title: A list of pipeline trigger prices given the billing periods covered by the time interval
    title: GetPipelineTriggerPriceResponse represents a response to GetPipelineTriggerPriceRequest
    required:
      - price
  v1alphaGetPipelineTriggerRecordsRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      pipeline:
        $ref: '#/definitions/v1alphaPipelineData'
        title: Pipeline information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetPipelineTriggerRecordsRequest represents a query for pipeline trigger records
    required:
      - user
      - pipeline
  v1alphaGetPipelineTriggerRecordsResponse:
    type: object
    properties:
      records:
        type: array
        items:
          $ref: '#/definitions/v1alphaPipelineUsageRecord'
        title: A list of pipeline trigger records
    title: GetPipelineTriggerRecordsResponse represnets a response to GetPipelineTriggerRecordsRequest
    required:
      - records
  v1alphaGetPipelineTriggerSummaryRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      pipeline:
        $ref: '#/definitions/v1alphaPipelineData'
        title: Pipeline information
      time_interval:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time interval
    title: GetPipelineTriggerSummaryRequest represents a query for pipeline trigger summary
    required:
      - user
      - pipeline
  v1alphaGetPipelineTriggerSummaryResponse:
    type: object
    properties:
      summaries:
        $ref: '#/definitions/v1alphaUsageSummary'
        title: The total pipeline trigger usage in the time interval
    title: GetPipelineTriggerSummaryResponse represents a reqposne to GetPipelineTriggerSummaryRequest
    required:
      - summaries
  v1alphaGetPipelinesResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          $ref: '#/definitions/v1alphaPipelineData'
        title: A list of pipeline informations
    title: GetPipelinesResponse represents a respond to GetPipelineRequest
    required:
      - pipelines
  v1alphaGetResourceResponse:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1alphaResource'
        title: Retrieved resource state
    title: GetResourceResponse represents a response to fetch a resource's state
  v1alphaGetSourceConnectorAdminResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: SourceConnector resource
    title: |-
      GetSourceConnectorAdminResponse represents a response for a
      SourceConnector resource
  v1alphaGetSourceConnectorDefinitionResponse:
    type: object
    properties:
      source_connector_definition:
        $ref: '#/definitions/v1alphaSourceConnectorDefinition'
        title: A SourceConnectorDefinition resource
    title: |-
      GetSourceConnectorDefinitionResponse represents a SourceConnectorDefinition
      response
  v1alphaGetSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: SourceConnector resource
    title: |-
      GetSourceConnectorResponse represents a response for a
      SourceConnector resource
  v1alphaGetTokenResponse:
    type: object
    properties:
      token:
        $ref: '#/definitions/v1alphaApiToken'
        title: An API token resource
    title: GetTokenResponse represents a response for an API token resource
  v1alphaGetUserAdminResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUser'
        title: A user resource
    title: GetUserAdminResponse represents a response for a user resource
  v1alphaHealthCheckRequest:
    type: object
    properties:
      service:
        type: string
        title: Service name to check for its readiness status
    title: HealthCheckRequest represents a request to health check a service
  v1alphaHealthCheckResponse:
    type: object
    properties:
      status:
        $ref: '#/definitions/HealthCheckResponseServingStatus'
        title: Status is the instance of the enum type ServingStatus
    title: HealthCheckResponse represents a response for a service heath status
  v1alphaInstanceSegmentationInput:
    type: object
    properties:
      image_url:
        type: string
        title: Image type URL
      image_base64:
        type: string
        title: Image type base64
    title: InstanceSegmentationInput represents the input of instance segmentation task
  v1alphaInstanceSegmentationInputStream:
    type: object
    properties:
      file_lengths:
        type: array
        items:
          type: string
          format: uint64
        title: The list of file length for each uploaded binary file
      content:
        type: string
        format: byte
        title: Content of images in bytes
    title: InstanceSegmentationInputStream represents the input of instance segmentation task when using stream method
    required:
      - file_lengths
      - content
  v1alphaInstanceSegmentationObject:
    type: object
    properties:
      rle:
        type: string
        title: Instance RLE segmentation mask
        readOnly: true
      category:
        type: string
        title: Instance category
        readOnly: true
      score:
        type: number
        format: float
        title: Instance score
        readOnly: true
      bounding_box:
        $ref: '#/definitions/v1alphaBoundingBox'
        title: Instance bounding box
        readOnly: true
    title: InstanceSegmentationObject corresponding to a instance segmentation object
  v1alphaInstanceSegmentationOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/v1alphaInstanceSegmentationObject'
        title: A list of instance segmentation objects
        readOnly: true
    title: |-
      InstanceSegmentationOutput represents the output of instance segmentation
      task
  v1alphaKeypoint:
    type: object
    properties:
      x:
        type: number
        format: float
        title: x coordinate
        readOnly: true
      "y":
        type: number
        format: float
        title: y coordinate
        readOnly: true
      v:
        type: number
        format: float
        title: visibility
        readOnly: true
    title: Keypoint structure which include coordinate and keypoint visibility
  v1alphaKeypointInput:
    type: object
    properties:
      image_url:
        type: string
        title: Image type URL
      image_base64:
        type: string
        title: Image type base64
    title: KeypointInput represents the input of keypoint detection task
  v1alphaKeypointInputStream:
    type: object
    properties:
      file_lengths:
        type: array
        items:
          type: string
          format: uint64
        title: The list of file length for each uploaded binary file
      content:
        type: string
        format: byte
        title: Content of images in bytes
    title: KeypointInputStream represents the input of keypoint detection task when using stream method
    required:
      - file_lengths
      - content
  v1alphaKeypointObject:
    type: object
    properties:
      keypoints:
        type: array
        items:
          $ref: '#/definitions/v1alphaKeypoint'
        title: Keypoints
        readOnly: true
      score:
        type: number
        format: float
        title: Keypoint score
        readOnly: true
      bounding_box:
        $ref: '#/definitions/v1alphaBoundingBox'
        title: Bounding box object
        readOnly: true
    title: KeypointObject corresponding to a person object
  v1alphaKeypointOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/v1alphaKeypointObject'
        title: A list of keypoint objects
        readOnly: true
    title: KeypointOutput represents the output of keypoint detection task
  v1alphaListDestinationConnectorDefinitionsResponse:
    type: object
    properties:
      destination_connector_definitions:
        type: array
        items:
          $ref: '#/definitions/v1alphaDestinationConnectorDefinition'
        title: A list of DestinationConnectorDefinition resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of DestinationConnectorDefinition resources
    title: |-
      ListDestinationConnectorDefinitionsResponse represents a response for a list
      of DestinationConnectorDefinitions
  v1alphaListDestinationConnectorsAdminResponse:
    type: object
    properties:
      destination_connectors:
        type: array
        items:
          $ref: '#/definitions/v1alphaDestinationConnector'
        title: A list of DestinationConnector resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of connector resources
    title: |-
      ListDestinationConnectorsAdminResponse represents a response for a list of
      DestinationConnector resources
  v1alphaListDestinationConnectorsResponse:
    type: object
    properties:
      destination_connectors:
        type: array
        items:
          $ref: '#/definitions/v1alphaDestinationConnector'
        title: A list of DestinationConnector resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of connector resources
    title: |-
      ListDestinationConnectorsResponse represents a response for a list of
      DestinationConnector resources
  v1alphaListModelDefinitionsResponse:
    type: object
    properties:
      model_definitions:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelDefinition'
        title: a list of ModelDefinition instances
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of model definitions
    title: |-
      ListModelDefinitionsResponse represents a response to list all supported model
      definitions
  v1alphaListModelOperationsResponse:
    type: object
    properties:
      operations:
        type: array
        items:
          $ref: '#/definitions/googlelongrunningOperation'
        title: a list of model operations
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of operations
    title: |-
      ListModelOperationsResponse represents a response for a list of model
      operations including deploy and undeploy
  v1alphaListModelsAdminResponse:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/v1alphaModel'
        title: a list of Models
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of models
    title: ListModelsAdminResponse represents a response for a list of models
  v1alphaListModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          $ref: '#/definitions/v1alphaModel'
        title: a list of Models
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of models
    title: ListModelsResponse represents a response for a list of models
  v1alphaListPipelinesAdminResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          $ref: '#/definitions/v1alphaPipeline'
        title: A list of pipeline resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of pipeline resources
    title: ListPipelinesAdminResponse represents a response for a list of pipelines
  v1alphaListPipelinesResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          $ref: '#/definitions/v1alphaPipeline'
        title: A list of pipeline resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of pipeline resources
    title: ListPipelinesResponse represents a response for a list of pipelines
  v1alphaListSourceConnectorDefinitionsResponse:
    type: object
    properties:
      source_connector_definitions:
        type: array
        items:
          $ref: '#/definitions/v1alphaSourceConnectorDefinition'
        title: A list of SourceConnectorDefinition resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of SourceConnectorDefinition resources
    title: |-
      ListSourceConnectorDefinitionsResponse represents a response for a list of
      SourceConnectorDefinitions
  v1alphaListSourceConnectorsAdminResponse:
    type: object
    properties:
      source_connectors:
        type: array
        items:
          $ref: '#/definitions/v1alphaSourceConnector'
        title: A list of SourceConnector resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of connector resources
    title: |-
      ListSourceConnectorsAdminResponse represents a response for a list of
      SourceConnector resources
  v1alphaListSourceConnectorsResponse:
    type: object
    properties:
      source_connectors:
        type: array
        items:
          $ref: '#/definitions/v1alphaSourceConnector'
        title: A list of SourceConnector resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of connector resources
    title: |-
      ListSourceConnectorsResponse represents a response for a list of
      SourceConnector resources
  v1alphaListTokensResponse:
    type: object
    properties:
      tokens:
        type: array
        items:
          $ref: '#/definitions/v1alphaApiToken'
        title: A list of API tokens resources
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of API tokens resources
    title: ListTokensResponse represents a response for a list of API tokens
  v1alphaListUsersAdminResponse:
    type: object
    properties:
      users:
        type: array
        items:
          $ref: '#/definitions/v1alphaUser'
        title: A list of users
      next_page_token:
        type: string
        title: Next page token
      total_size:
        type: string
        format: int64
        title: Total count of users
    title: ListUsersAdminResponse represents a response for a list of users
  v1alphaLookUpDestinationConnectorAdminResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: DestinationConnector resource
    title: |-
      LookUpDestinationConnectorAdminResponse represents a response for a destination
      connector
  v1alphaLookUpDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: DestinationConnector resource
    title: |-
      LookUpDestinationConnectorResponse represents a response for a destination
      connector
  v1alphaLookUpModelAdminResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: A model resource
    title: LookUpModelResponse represents a response for a model
  v1alphaLookUpModelResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: A model resource
    title: LookUpModelResponse represents a response for a model
  v1alphaLookUpPipelineAdminResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: LookUpPipelineAdminResponse represents a response for a pipeline resource
  v1alphaLookUpPipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: LookUpPipelineResponse represents a response for a pipeline resource
  v1alphaLookUpSourceConnectorAdminResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: SourceConnector resource
    title: LookUpSourceConnectorAdminResponse represents a response for a source connector
  v1alphaLookUpSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: SourceConnector resource
    title: LookUpSourceConnectorResponse represents a response for a source connector
  v1alphaLookUpUserAdminResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUser'
        title: A user resource
    title: LookUpUserAdminResponse represents a response for a user resource by admin
  v1alphaMgmtUsageData:
    type: object
    properties:
      usages:
        type: array
        items:
          $ref: '#/definitions/v1alphaUser'
        title: Repeated user usage data
    title: Management service usage data
  v1alphaModel:
    type: object
    properties:
      name:
        type: string
        title: |-
          Resource name. It must have the format of "models/{model}".
          For example: "models/yolov4"
        readOnly: true
      uid:
        type: string
        title: Model ID in UUIDv4
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (the last segment of the resource name) used to construct the
          resource name. This conforms to RFC-1034, which restricts to letters,
          numbers, and hyphen, with the first character a letter, the last a letter
          or a number, and a 63 character maximum.
      description:
        type: string
        title: Model description
      model_definition:
        type: string
        title: Model definition resource name
      configuration:
        type: object
        title: |-
          Model configuration represents the configuration JSON that has been
          validated using the `model_spec` JSON schema of a ModelDefinition
      task:
        $ref: '#/definitions/ModelTask'
        title: Model task
        readOnly: true
      state:
        $ref: '#/definitions/v1alphaModelState'
        title: Model state
        readOnly: true
      visibility:
        $ref: '#/definitions/ModelVisibility'
        title: Model visibility including public or private
        readOnly: true
      user:
        type: string
        description: The resource name of a user, e.g., "users/local-user".
        readOnly: true
      org:
        type: string
        title: The resource name of an organization
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: Model create time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: Model update time
        readOnly: true
    title: Model represents a model
  v1alphaModelCard:
    type: object
    properties:
      name:
        type: string
        title: |-
          Resource name. It must have the format of
          "models/{model}/readme"
        readOnly: true
      size:
        type: integer
        format: int32
        title: Size of the file
        readOnly: true
      type:
        type: string
        description: Type of the resource. Fixed to "file".
        readOnly: true
      content:
        type: string
        format: byte
        title: Content of the README file in bytes and base64 format
        readOnly: true
      encoding:
        type: string
        description: Encoding type of the content. Fixed to "base64".
        readOnly: true
    description: |-
      ModelCard represents the README card for a model. There
      exists one and exactly one README card per model.
  v1alphaModelData:
    type: object
    properties:
      uid:
        type: string
        title: Model unique id that is auto generated
      id:
        type: string
        title: Model id that is given by the users
      instance_id:
        type: string
        title: The id of the model instance that is deployed
      task:
        type: string
        title: The AI task supported by this model
    title: Pipeline records definition
    required:
      - uid
      - id
      - instance_id
      - task
  v1alphaModelDefinition:
    type: object
    properties:
      name:
        type: string
        title: |-
          ModelDefinition resource name. It must have the format of
          "model-definitions/{model-definition}"
        readOnly: true
      uid:
        type: string
        title: ModelDefinition ID in UUIDv4
        readOnly: true
      id:
        type: string
        description: |-
          ModelDefinition resource ID (the last segment of the resource name) used to
          construct the resource name.
        readOnly: true
      title:
        type: string
        title: ModelDefinition display official title
        readOnly: true
      documentation_url:
        type: string
        title: ModelDefinition documentation url
        readOnly: true
      icon:
        type: string
        title: ModelDefinition icon
        readOnly: true
      release_stage:
        $ref: '#/definitions/vdpmodelv1alphaReleaseStage'
        title: ModelDefinition release stage
        readOnly: true
      model_spec:
        type: object
        description: |-
          ModelDefinition model specification represents the JSON schema used to
          validate the JSON configurations of a model created from a specific model
          source. Must be a valid JSON that includes what fields are needed to
          create/display a model.
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: ModelDefinition create time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: ModelDefinition update time
        readOnly: true
    title: |-
      /////////////////////////////////////////////////////////////////
      ModelDefinition represents the definition of a model
  v1alphaModelOutput:
    type: object
    properties:
      model:
        type: string
        title: The model
        readOnly: true
      task:
        $ref: '#/definitions/ModelTask'
        title: The task type
        readOnly: true
      task_outputs:
        type: array
        items:
          $ref: '#/definitions/vdppipelinev1alphaTaskOutput'
        title: |-
          The extended task outputs based on the model inference (i.e.,
          from a trigger endpoint of model-backend)
        readOnly: true
    title: ModelOutput represents one model inference result
  v1alphaModelState:
    type: string
    enum:
      - STATE_UNSPECIFIED
      - STATE_OFFLINE
      - STATE_ONLINE
      - STATE_ERROR
    default: STATE_UNSPECIFIED
    description: |-
      - STATE_UNSPECIFIED: State: UNSPECIFIED
       - STATE_OFFLINE: State: OFFLINE
       - STATE_ONLINE: State: ONLINE
       - STATE_ERROR: State: ERROR
    title: State enumerates a model state
  v1alphaModelUsageData:
    type: object
    properties:
      usages:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelUsageDataUserUsageData'
        title: Usage data of all users in the model service
    title: Model service usage data
  v1alphaModelUsageDataUserUsageData:
    type: object
    properties:
      user_uid:
        type: string
        title: User UUID
      model_online_state_num:
        type: string
        format: int64
        title: Number of 'online' models
      model_offline_state_num:
        type: string
        format: int64
        title: Number of 'offline' models
      model_definition_ids:
        type: array
        items:
          type: string
        description: |-
          Definition IDs of the model. Element in the list
          should not be duplicated.
      tasks:
        type: array
        items:
          $ref: '#/definitions/ModelTask'
        description: |-
          Tasks of the models. Element in the list should not be
          duplicated.
      test_num:
        type: string
        format: int64
        title: Number of model testing operations
    title: Per user usage data in the model service
    required:
      - user_uid
      - model_online_state_num
      - model_offline_state_num
      - model_definition_ids
      - tasks
      - test_num
  v1alphaModelUsageRecord:
    type: object
    properties:
      deploy_time:
        type: string
        format: date-time
        title: Time when the model is ONLINE
      record_time:
        type: string
        format: date-time
        title: Time when model online usage is recorded
      value:
        type: string
        format: int64
        title: The model online usage record that is logged in cumulative manner. This value records the cumulative usage since model is online in the current billing period
    title: Model online usage record definition
    required:
      - deploy_time
      - record_time
      - value
  v1alphaNullMessage:
    type: object
    title: Nul Message for gRPC REQ/RES
  v1alphaOauthConfigSpecification:
    type: object
    properties:
      oauth_user_input_from_connector_config_specification:
        type: object
        description: |-
          OAuth specific blob. This is a Json Schema used to validate Json
          configurations used as input to OAuth. Must be a valid non-nested JSON that
          refers to properties from ConnectorSpecification.connectionSpecification
          using special annotation 'path_in_connector_config'.
          These are input values the user is entering through the UI to authenticate
          to the connector, that might also shared as inputs for syncing data via the
          connector.

          Examples:

          if no connector values is shared during oauth flow,
          oauth_user_input_from_connector_config_specification=[] if connector values
          such as 'app_id' inside the top level are used to generate the API url for
          the oauth flow,
            oauth_user_input_from_connector_config_specification={
              app_id: {
                type: string
                path_in_connector_config: ['app_id']
              }
            }
          if connector values such as 'info.app_id' nested inside another object are
          used to generate the API url for the oauth flow,
           oauth_user_input_from_connector_config_specification={
             app_id: {
               type: string
               path_in_connector_config: ['info', 'app_id']
             }
           }
        readOnly: true
      complete_oauth_output_specification:
        type: object
        description: |-
          Examples:

              complete_oauth_output_specification={
                refresh_token: {
                  type: string,
                  path_in_connector_config: ['credentials', 'refresh_token']
                }
              }
        title: |-
          OAuth specific blob. This is a Json Schema used to validate Json
          configurations produced by the OAuth flows as they are returned by the
          distant OAuth APIs. Must be a valid JSON describing the fields to merge
          back to `ConnectorSpecification.connectionSpecification`. For each field, a
          special annotation `path_in_connector_config` can be specified to determine
          where to merge it,
        readOnly: true
      complete_oauth_server_input_specification:
        type: object
        description: |-
          OAuth specific blob. This is a Json Schema used to validate Json
          configurations persisted as Airbyte Server configurations. Must be a valid
          non-nested JSON describing additional fields configured by the Airbyte
          Instance or Workspace Admins to be used by the server when completing an
          OAuth flow (typically exchanging an auth code for refresh token).

          Examples:

              complete_oauth_server_input_specification={
                client_id: {
                  type: string
                },
                client_secret: {
                  type: string
                }
              }
        readOnly: true
      complete_oauth_server_output_specification:
        type: object
        description: |-
          Examples:

                complete_oauth_server_output_specification={
                  client_id: {
                    type: string,
                    path_in_connector_config: ['credentials', 'client_id']
                  },
                  client_secret: {
                    type: string,
                    path_in_connector_config: ['credentials', 'client_secret']
                  }
                }
        title: |-
          OAuth specific blob. This is a Json Schema used to validate Json
          configurations persisted as Airbyte Server configurations that also need to
          be merged back into the connector configuration at runtime. This is a
          subset configuration of `complete_oauth_server_input_specification` that
          filters fields out to retain only the ones that are necessary for the
          connector to function with OAuth. (some fields could be used during oauth
          flows but not needed afterwards, therefore they would be listed in the
          `complete_oauth_server_input_specification` but not
          `complete_oauth_server_output_specification`) Must be a valid non-nested
          JSON describing additional fields configured by the Airbyte Instance or
          Workspace Admins to be used by the connector when using OAuth flow APIs.
          These fields are to be merged back to
          `ConnectorSpecification.connectionSpecification`. For each field, a special
          annotation `path_in_connector_config` can be specified to determine where
          to merge it,
        readOnly: true
    title: OauthConfigSpecification represents oauth config specification
  v1alphaOcrInput:
    type: object
    properties:
      image_url:
        type: string
        title: Image type URL
      image_base64:
        type: string
        title: Image type base64
    title: OcrInput represents the input of ocr task
  v1alphaOcrInputStream:
    type: object
    properties:
      file_lengths:
        type: array
        items:
          type: string
          format: uint64
        title: The list of file length for each uploaded binary file
      content:
        type: string
        format: byte
        title: Content of images in bytes
    title: OcrInputStream represents the input of ocr task when using stream method
    required:
      - file_lengths
      - content
  v1alphaOcrObject:
    type: object
    properties:
      text:
        type: string
        title: OCR text
        readOnly: true
      score:
        type: number
        format: float
        title: OCR text score
        readOnly: true
      bounding_box:
        $ref: '#/definitions/v1alphaBoundingBox'
        title: OCR bounding box
        readOnly: true
    title: OcrObject represents a predicted ocr object
  v1alphaOcrOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          $ref: '#/definitions/v1alphaOcrObject'
        title: A list of OCR objects
        readOnly: true
    title: OcrOutput represents the output of ocr task
  v1alphaOwnerType:
    type: string
    enum:
      - OWNER_TYPE_UNSPECIFIED
      - OWNER_TYPE_USER
      - OWNER_TYPE_ORGANIZATION
    default: OWNER_TYPE_UNSPECIFIED
    description: |-
      - OWNER_TYPE_UNSPECIFIED: OwnerType: UNSPECIFIED
       - OWNER_TYPE_USER: OwnerType: USER
       - OWNER_TYPE_ORGANIZATION: OwnerType: ORGANIZATION
    title: OwnerType enumerates the owner type of any resource
  v1alphaPatchAuthenticatedUserResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUser'
        title: A user resource
    title: PatchAuthenticatedUserResponse represents a response for the authenticated user resource
  v1alphaPipeline:
    type: object
    properties:
      name:
        type: string
        title: Pipeline resource name. It must have the format of `pipelines/{pipeline_name}`
        readOnly: true
      uid:
        type: string
        title: Pipeline UUID
        readOnly: true
      id:
        type: string
        description: |-
          Pipeline resource ID (the last segment of the resource name) used to
          construct the resource name. This conforms to RFC-1034, which restricts to
          letters, numbers, and hyphen, with the first character a letter, the last a
          letter or a number, and a 63 character maximum.
      description:
        type: string
        title: Pipeline description
      recipe:
        $ref: '#/definitions/v1alphaRecipe'
        title: Pipeline recipe
      mode:
        $ref: '#/definitions/PipelineMode'
        title: Pipeline mode
        readOnly: true
      state:
        $ref: '#/definitions/v1alphaPipelineState'
        title: Pipeline state
        readOnly: true
      user:
        type: string
        description: The resource name of a user, e.g., "users/local-user".
        readOnly: true
      org:
        type: string
        title: The resource name of an organization
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: Pipeline creation time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: Pipeline update time
        readOnly: true
    title: Pipeline represents the content of a pipeline
  v1alphaPipelineData:
    type: object
    properties:
      uid:
        type: string
        title: Pipieline unique id that is auto generated
      id:
        type: string
        title: Pipeline id assigend by users
      task:
        type: string
        title: Pipeline task indicate the AI task this pipeline supports
    title: Pipeline records definition
    required:
      - uid
      - id
      - task
  v1alphaPipelineState:
    type: string
    enum:
      - STATE_UNSPECIFIED
      - STATE_INACTIVE
      - STATE_ACTIVE
      - STATE_ERROR
    default: STATE_UNSPECIFIED
    description: |-
      - STATE_UNSPECIFIED: State: UNSPECIFIED
       - STATE_INACTIVE: State INACTIVE indicates the pipeline is inactive
       - STATE_ACTIVE: State ACTIVE indicates the pipeline is active
       - STATE_ERROR: State ERROR indicates the pipeline has error
    title: State enumerates the state of a pipeline
  v1alphaPipelineUsageData:
    type: object
    properties:
      usages:
        type: array
        items:
          $ref: '#/definitions/v1alphaPipelineUsageDataUserUsageData'
        title: Usage data of all users in the pipeline service
    title: Pipeline service usage data
  v1alphaPipelineUsageDataUserUsageData:
    type: object
    properties:
      user_uid:
        type: string
        title: User UUID
      pipeline_active_state_num:
        type: string
        format: int64
        title: Number of pipelines with 'active' state
      pipeline_inactive_state_num:
        type: string
        format: int64
        title: Number of pipelines with 'inactive' state
      pipeline_async_mode_num:
        type: string
        format: int64
        title: Number of pipelines with 'async' mode
      pipeline_sync_mode_num:
        type: string
        format: int64
        title: Number of pipelines with 'sync' mode
      trigger_num:
        type: string
        format: int64
        title: Number of pipeline triggering operations
    title: Per user usage data in the pipeline service
    required:
      - user_uid
      - pipeline_active_state_num
      - pipeline_inactive_state_num
      - pipeline_async_mode_num
      - pipeline_sync_mode_num
      - trigger_num
  v1alphaPipelineUsageRecord:
    type: object
    properties:
      request_id:
        type: string
        description: A unique request id given by vdp when trigger the pipeline.
      operation_id:
        type: string
        title: A unique operation id given by vdp
      status:
        type: string
        title: The HTTP status received when user trigger the pipeline
      trigger_time:
        type: string
        format: date-time
        title: Time when the pipeline is triggered
      record_time:
        type: string
        format: date-time
        title: Time when the pipeline trigger usage is recorded
      value:
        type: string
        format: int64
        title: The pipeline trigger usage record. The unit of the usage should be consistent with Stripe
    title: Pipeline trigger usage record definition
    required:
      - request_id
      - operation_id
      - status
      - trigger_time
      - record_time
      - value
  v1alphaPriceData:
    type: object
    properties:
      time:
        $ref: '#/definitions/v1alphaTimeInterval'
        title: Time when the price record is generated
      currency:
        type: string
        title: The curency of the price
        readOnly: true
      amount:
        type: number
        format: float
        title: The price of the query usage in the current billing period
        readOnly: true
    title: Pricing information
    required:
      - time
  v1alphaPublishModelResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: Published model
    title: PublishModelResponse represents a response for the published model
  v1alphaQueryAuthenticatedUserResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUser'
        title: A user resource
    title: QueryAuthenticatedUserResponse represents a response for the authenticated user resource
  v1alphaReadSourceConnectorResponse:
    type: object
    properties:
      data:
        type: string
        format: byte
        title: Read data in bytes
    title: |-
      ReadSourceConnectorResponse represents the read data from a SourceConnector
      resource
  v1alphaRecipe:
    type: object
    properties:
      source:
        type: string
        title: A source connector resource
      destination:
        type: string
        title: A destination connector resource
      model:
        type: array
        items:
          type: string
        title: A list of model resources
    title: Pipeline represents a pipeline recipe
  v1alphaRenameDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: A DestinationConnector resource
    title: |-
      RenameDestinationConnectorResponse represents a renamed DestinationConnector
      resource
  v1alphaRenameModelResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: Renamed model
    title: RenameModelResponse represents a response for a model
  v1alphaRenamePipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: A pipeline resource
    title: RenamePipelineResponse represents a renamed pipeline resource
  v1alphaRenameSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: A SourceConnector resource
    title: RenameSourceConnectorResponse represents a renamed SourceConnector resource
  v1alphaReportModelOnlineRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      model:
        $ref: '#/definitions/v1alphaModelData'
        title: Model information
      cum_usage_record:
        $ref: '#/definitions/v1alphaModelUsageRecord'
        title: Model online record
    title: ReportModelOnlineRequest represents a request for reporting a model-online record
    required:
      - user
      - model
      - cum_usage_record
  v1alphaReportModelOnlineResponse:
    type: object
    properties:
      "null":
        $ref: '#/definitions/v1alphaNullMessage'
        title: Null message for empty response
    title: ReportModelOnlineResponse represents a respond to a model-online-record report request
  v1alphaReportModelOnlinesResponse:
    type: object
    properties:
      "null":
        $ref: '#/definitions/v1alphaNullMessage'
        title: Null message for empty response
    title: ReportModelOnlinesResponse represents a respond to a model-online-records reporting bulk request
  v1alphaReportPipelineTriggerRequest:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUserData'
        title: User information
      pipeline:
        $ref: '#/definitions/v1alphaPipelineData'
        title: Pipeline infomration
      usage_record:
        $ref: '#/definitions/v1alphaPipelineUsageRecord'
        title: Pipeline trigger record
    title: ReportPipelineTriggerRequest represents a request for reporting a pipeline-trigger record
    required:
      - user
      - pipeline
      - usage_record
  v1alphaReportPipelineTriggerResponse:
    type: object
    properties:
      "null":
        $ref: '#/definitions/v1alphaNullMessage'
        title: Null message for empty response
    title: ReportPipelineTriggerResponse represents a respond to a pipeline-trigger-record report request
  v1alphaReportPipelineTriggersResponse:
    type: object
    properties:
      "null":
        $ref: '#/definitions/v1alphaNullMessage'
        title: Null message for empty response
    title: ReportPipelineTriggersResponse represents a respond to a pipeline-trigger-records reporting bulk request
  v1alphaResource:
    type: object
    properties:
      name:
        type: string
        description: For example, when query for the state of a pipeline named `pipeline-1`, the resource name is `resources/pipeline-1/types/RESOURCE_TYPE_PIPELINE`
        title: |-
          Resource name is a string follows a specifit pattern: `resources/{resource_name}/types/{type}`, where `{resource}` represents an arbitrary name user defined when creating, and `{type}` falls inside the scope of:
          ```
          const (
            RESOURCE_TYPE_MODEL     = "model"
            RESOURCE_TYPE_SOURCE_CONNECTOR = "source-connectors"
            RESOURCE_TYPE_DESTINATION_CONNECTOR = "destination-connectors"
            RESOURCE_TYPE_PIPELINE  = "pipeline"
            RESOURCE_TYPE_SERVICE   = "service"
          )
          ```
      model_state:
        $ref: '#/definitions/v1alphaModelState'
        title: Model state
      pipeline_state:
        $ref: '#/definitions/v1alphaPipelineState'
        title: Pipeline state
      connector_state:
        $ref: '#/definitions/v1alphaConnectorState'
        title: Connector state
      backend_state:
        $ref: '#/definitions/HealthCheckResponseServingStatus'
        title: Backend service state
      progress:
        type: integer
        format: int32
        title: Resource longrunning progress
    title: Resource represents the current information of a resource
    required:
      - name
  v1alphaSemanticSegmentationInput:
    type: object
    properties:
      image_url:
        type: string
        title: Image type URL
      image_base64:
        type: string
        title: Image type base64
    title: SemanticSegmentationInput represents the input of semantic segmentation task
  v1alphaSemanticSegmentationInputStream:
    type: object
    properties:
      file_lengths:
        type: array
        items:
          type: string
          format: uint64
        title: The list of file length for each uploaded binary file
      content:
        type: string
        format: byte
        title: Content of images in bytes
    title: SemanticSegmentationInputStream represents the input of semantic segmentation task when using stream method
    required:
      - file_lengths
      - content
  v1alphaSemanticSegmentationOutput:
    type: object
    properties:
      stuffs:
        type: array
        items:
          $ref: '#/definitions/v1alphaSemanticSegmentationStuff'
        title: A list of semantic segmentation stuffs
        readOnly: true
    title: |-
      SemanticSegmentationOutput represents the output of semantic segmentation
      task
  v1alphaSemanticSegmentationStuff:
    type: object
    properties:
      rle:
        type: string
        title: RLE segmentation mask
        readOnly: true
      category:
        type: string
        title: Stuff category
        readOnly: true
    title: SemanticSegmentationStuff corresponding to a semantic segmentation stuff
  v1alphaSendSessionReportResponse:
    type: object
    title: SendReportResponse represents an empty response
  v1alphaSession:
    type: object
    properties:
      name:
        type: string
        title: Resource name in the format of 'sessions/uid'
        readOnly: true
      uid:
        type: string
        title: Resource UUID
        readOnly: true
      service:
        $ref: '#/definitions/SessionService'
        title: name of the service to collect data from
      edition:
        type: string
        title: 'Session edition, allowed values include: ''local-ce'' and ''local-ce:dev'''
      version:
        type: string
        title: Version of the service
      arch:
        type: string
        title: Architecture of the system
      os:
        type: string
        title: Operating system
      uptime:
        type: string
        format: int64
        title: Session service uptime
      report_time:
        type: string
        format: date-time
        title: Report time
      token:
        type: string
        description: |-
          Token to send report. The token is generated by the server and sent to
          the client. Client needs to use the token to send report to the server.
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: Session creation time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: Session update time
        readOnly: true
    title: |-
      Session represents a unique session whenever a new instance of VDP service
      gets started. The usage server returns a token that should be used as part of
      the challenge when sending a report with data collected from this session
    required:
      - service
      - edition
      - version
      - arch
      - os
      - uptime
      - report_time
  v1alphaSessionReport:
    type: object
    properties:
      session_uid:
        type: string
        title: Session uid
      token:
        type: string
        title: Session token
      pow:
        type: string
        title: Proof-of-work See https://en.wikipedia.org/wiki/Proof_of_work
      session:
        $ref: '#/definitions/v1alphaSession'
        title: Session
      mgmt_usage_data:
        $ref: '#/definitions/v1alphaMgmtUsageData'
        title: Management service usage data
      connector_usage_data:
        $ref: '#/definitions/v1alphaConnectorUsageData'
        title: Connector service usage data
      model_usage_data:
        $ref: '#/definitions/v1alphaModelUsageData'
        title: Model service usage data
      pipeline_usage_data:
        $ref: '#/definitions/v1alphaPipelineUsageData'
        title: Pipeline service usage data
    title: |-
      SessionReport represents a report to be sent to the server that includes the
      usage data of a session
    required:
      - session_uid
      - token
      - pow
      - session
  v1alphaSourceConnector:
    type: object
    properties:
      name:
        type: string
        description: |-
          Source connector resource name. It must have the format of `source-connectors/{connector_name}`.
          For example, `source-connectors/http`.
        readOnly: true
      uid:
        type: string
        title: Source connector UUID
        readOnly: true
      id:
        type: string
        description: |-
          Source connector resource ID (the last segment of the resource name) used to
          construct the resource name. This conforms to RFC-1034, which restricts to
          letters, numbers, and hyphen, with the first character a letter, the last a
          letter or a number, and a 63 character maximum.
      source_connector_definition:
        type: string
        title: Source connector definition resource
      connector:
        $ref: '#/definitions/v1alphaConnector'
        title: Source connector's connector data structure
    title: SourceConnector represents a source connector resource
    required:
      - connector
  v1alphaSourceConnectorDefinition:
    type: object
    properties:
      name:
        type: string
        title: |-
          SourceConnectorDefinition resource name. It must have the format of
          "connector-definitions/*"
        readOnly: true
      uid:
        type: string
        title: SourceConnectorDefinition UUID
        readOnly: true
      id:
        type: string
        description: |-
          SourceConnectorDefinition resource ID (the last segment of the resource
          name) used to construct the resource name. This conforms to RFC-1034, which
          restricts to letters, numbers, and hyphen, with the first character a
          letter, the last a letter or a number, and a 63 character maximum.
      connector_definition:
        $ref: '#/definitions/v1alphaConnectorDefinition'
        title: SourceConnectorDefinition connector definition
        readOnly: true
    title: SourceConnectorDefinition represents the source connector definition resource
  v1alphaSpec:
    type: object
    properties:
      documentation_url:
        type: string
        title: Spec documentation URL
        readOnly: true
      connection_specification:
        type: object
        title: Spec connection specification
      supports_incremental:
        type: boolean
        title: |-
          Spec supports incremental flag, i.e., if the connector supports incremental
          mode or not
        readOnly: true
      supports_normalization:
        type: boolean
        title: |-
          Spec supports normalization flag, i.e., if the connector supports
          normalization or not
        readOnly: true
      supports_dbt:
        type: boolean
        title: Spec supports dbt flag, i.e., if the connector supports DBT or not
        readOnly: true
      supported_destination_sync_modes:
        type: array
        items:
          $ref: '#/definitions/v1alphaSupportedDestinationSyncModes'
        title: |-
          Spec destination sync mode, i.e., a list of destination sync modes
          supported by the connector
        readOnly: true
      advanced_auth:
        $ref: '#/definitions/v1alphaAdvancedAuth'
        title: |-
          Spec advanced auth, i.e., additional and optional specification object to
          describe what an 'advanced' Auth flow would need to function
        readOnly: true
    title: |-
      //////////////////////////////////
      Spec represents a spec data model
    required:
      - connection_specification
  v1alphaSupportedDestinationSyncModes:
    type: string
    enum:
      - SUPPORTED_DESTINATION_SYNC_MODES_UNSPECIFIED
      - SUPPORTED_DESTINATION_SYNC_MODES_APPEND
      - SUPPORTED_DESTINATION_SYNC_MODES_OVERWRITE
      - SUPPORTED_DESTINATION_SYNC_MODES_APPEND_DEDUP
    default: SUPPORTED_DESTINATION_SYNC_MODES_UNSPECIFIED
    description: |-
      - SUPPORTED_DESTINATION_SYNC_MODES_UNSPECIFIED: SupportedDestinationSyncModes: DESTINATION_SYNC_MODES_UNSPECIFIED
       - SUPPORTED_DESTINATION_SYNC_MODES_APPEND: SupportedDestinationSyncModes: DESTINATION_SYNC_MODES_APPEND
       - SUPPORTED_DESTINATION_SYNC_MODES_OVERWRITE: SupportedDestinationSyncModes: DESTINATION_SYNC_MODES_OVERWRITE
       - SUPPORTED_DESTINATION_SYNC_MODES_APPEND_DEDUP: SupportedDestinationSyncModes: DESTINATION_SYNC_MODES_APPEND_DEDUP
    title: |-
      SupportedDestinationSyncModes enumerates destination sync mode (this needs to
      be in plural form to match with Airbyte protocol)
  v1alphaSupportedSyncModes:
    type: string
    enum:
      - SUPPORTED_SYNC_MODES_UNSPECIFIED
      - SUPPORTED_SYNC_MODES_FULL_REFRESH
      - SUPPORTED_SYNC_MODES_INCREMENTAL
    default: SUPPORTED_SYNC_MODES_UNSPECIFIED
    description: |-
      - SUPPORTED_SYNC_MODES_UNSPECIFIED: SupportedSyncModes: SUPPORTED_SYNC_MODES_UNSPECIFIED
       - SUPPORTED_SYNC_MODES_FULL_REFRESH: SupportedSyncModes: SUPPORTED_SYNC_MODES_FULL_REFRESH
       - SUPPORTED_SYNC_MODES_INCREMENTAL: SupportedSyncModes: SUPPORTED_SYNC_MODES_INCREMENTAL
    title: |-
      SupportedSyncModes enumerates sync mode (this needs to be in plural form to
      match with Airbyte protocol)
  v1alphaTaskInput:
    type: object
    properties:
      classification:
        $ref: '#/definitions/v1alphaClassificationInput'
        title: The classification input
      detection:
        $ref: '#/definitions/v1alphaDetectionInput'
        title: The detection input
      keypoint:
        $ref: '#/definitions/v1alphaKeypointInput'
        title: The keypoint input
      ocr:
        $ref: '#/definitions/v1alphaOcrInput'
        title: The ocr input
      instance_segmentation:
        $ref: '#/definitions/v1alphaInstanceSegmentationInput'
        title: The instance segmentation input
      semantic_segmentation:
        $ref: '#/definitions/v1alphaSemanticSegmentationInput'
        title: The semantic segmentation input
      text_to_image:
        $ref: '#/definitions/v1alphaTextToImageInput'
        title: The text to image input
      text_generation:
        $ref: '#/definitions/v1alphaTextGenerationInput'
        title: The text generation input
      unspecified:
        $ref: '#/definitions/v1alphaUnspecifiedInput'
        title: The unspecified task input
    title: Input represents the input to trigger a model
  v1alphaTaskInputStream:
    type: object
    properties:
      classification:
        $ref: '#/definitions/v1alphaClassificationInputStream'
        title: The classification input
      detection:
        $ref: '#/definitions/v1alphaDetectionInputStream'
        title: The detection input
      keypoint:
        $ref: '#/definitions/v1alphaKeypointInputStream'
        title: The keypoint input
      ocr:
        $ref: '#/definitions/v1alphaOcrInputStream'
        title: The ocr input
      instance_segmentation:
        $ref: '#/definitions/v1alphaInstanceSegmentationInputStream'
        title: The instance segmentation input
      semantic_segmentation:
        $ref: '#/definitions/v1alphaSemanticSegmentationInputStream'
        title: The semantic segmentation input
      text_to_image:
        $ref: '#/definitions/v1alphaTextToImageInput'
        title: The text to image input
      text_generation:
        $ref: '#/definitions/v1alphaTextGenerationInput'
        title: The text generation input
      unspecified:
        $ref: '#/definitions/v1alphaUnspecifiedInput'
        title: The unspecified task input
    title: TaskInputStream represents the input to trigger a model with stream method
  v1alphaTestModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        $ref: '#/definitions/ModelTask'
        title: The task type
      task_outputs:
        type: array
        items:
          $ref: '#/definitions/vdpmodelv1alphaTaskOutput'
        title: The task output from a model
    title: |-
      TestModelBinaryFileUploadResponse represents a response for the
      output for testing a model
    required:
      - task
      - task_outputs
  v1alphaTestModelResponse:
    type: object
    properties:
      task:
        $ref: '#/definitions/ModelTask'
        title: The task type
      task_outputs:
        type: array
        items:
          $ref: '#/definitions/vdpmodelv1alphaTaskOutput'
        title: The task output from a model
    title: |-
      TestModelResponse represents a response for the output for
      testing a model
    required:
      - task
      - task_outputs
  v1alphaTextGenerationInput:
    type: object
    properties:
      prompt:
        type: string
        title: The prompt text
      output_len:
        type: string
        format: int64
        title: The maximum number of tokens for model to generate
      bad_words_list:
        type: string
        title: The words not to avoid being generated by the model
      stop_words_list:
        type: string
        title: The trigger words to stop generation
      topk:
        type: string
        format: int64
        title: Top k for sampling
      seed:
        type: string
        format: int64
        title: The seed
    title: TextGenerationInput represents the input of text generation task
    required:
      - prompt
  v1alphaTextGenerationOutput:
    type: object
    properties:
      text:
        type: string
        title: The text generated by the model
        readOnly: true
    title: TextGenerationOutput represents the output of text generation task
  v1alphaTextToImageInput:
    type: object
    properties:
      prompt:
        type: string
        title: The prompt text
      steps:
        type: string
        format: int64
        title: The steps, default is 5
      cfg_scale:
        type: number
        format: float
        title: The guidance scale, default is 7.5
      seed:
        type: string
        format: int64
        title: The seed, default is 0
      samples:
        type: string
        format: int64
        title: The number of generated samples, default is 1
    title: TextToImageInput represents the input of text to image task
    required:
      - prompt
  v1alphaTextToImageOutput:
    type: object
    properties:
      images:
        type: array
        items:
          type: string
        title: List of generated images
        readOnly: true
    title: TextToImageOutput represents the output of text to image task
  v1alphaTimeInterval:
    type: object
    properties:
      start_time:
        type: string
        format: date-time
        title: Start time of the interval
      end_time:
        type: string
        format: date-time
        title: End time of the interval
    title: Time interval
    required:
      - start_time
      - end_time
  v1alphaTriggerModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        $ref: '#/definitions/ModelTask'
        title: The task type
      task_outputs:
        type: array
        items:
          $ref: '#/definitions/vdpmodelv1alphaTaskOutput'
        title: The task output from a model
    title: |-
      TriggerModelBinaryFileUploadResponse represents a response for the
      output for testing a model
    required:
      - task
      - task_outputs
  v1alphaTriggerModelResponse:
    type: object
    properties:
      task:
        $ref: '#/definitions/ModelTask'
        title: The task type
      task_outputs:
        type: array
        items:
          $ref: '#/definitions/vdpmodelv1alphaTaskOutput'
        title: The task output from a model
    title: |-
      TriggerModelResponse represents a response for the output for
      triggering a model
  v1alphaTriggerPipelineBinaryFileUploadResponse:
    type: object
    properties:
      data_mapping_indices:
        type: array
        items:
          type: string
        title: The data mapping indices stores UUID for each input
      model_outputs:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelOutput'
        title: The multiple model inference outputs
    title: |-
      TriggerPipelineBinaryFileUploadResponse represents a response for the output
      of a pipeline, i.e., the multiple model inference outputs
  v1alphaTriggerPipelineResponse:
    type: object
    properties:
      data_mapping_indices:
        type: array
        items:
          type: string
        title: The data mapping indices stores UUID for each input
      model_outputs:
        type: array
        items:
          $ref: '#/definitions/v1alphaModelOutput'
        title: The multiple model inference outputs
    title: |-
      TriggerPipelineResponse represents a response for the output
      of a pipeline, i.e., the multiple model inference outputs
  v1alphaUndeployModelResponse:
    type: object
    properties:
      operation:
        $ref: '#/definitions/googlelongrunningOperation'
        title: Undeploy operation message
    title: UndeployModelResponse represents a response for a undeployed model
  v1alphaUnpublishModelResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: Unpublished model
    title: UnpublishModelResponse represents a response for the unpublished model
  v1alphaUnspecifiedInput:
    type: object
    properties:
      raw_inputs:
        type: array
        items:
          type: object
        title: A list of unspecified task inputs
    title: UnspecifiedInput represents the input of unspecified task
  v1alphaUnspecifiedOutput:
    type: object
    properties:
      raw_outputs:
        type: array
        items:
          type: object
        title: A list of unspecified task outputs
        readOnly: true
    title: UnspecifiedOutput represents the output of unspecified task
  v1alphaUpdateDestinationConnectorResponse:
    type: object
    properties:
      destination_connector:
        $ref: '#/definitions/v1alphaDestinationConnector'
        title: DestinationConnector resource
    title: |-
      UpdateDestinationConnectorResponse represents a response for a
      DestinationConnector resource
  v1alphaUpdateModelResponse:
    type: object
    properties:
      model:
        $ref: '#/definitions/v1alphaModel'
        title: The updated model
    title: UpdateModelResponse represents a response for a model
  v1alphaUpdatePipelineResponse:
    type: object
    properties:
      pipeline:
        $ref: '#/definitions/v1alphaPipeline'
        title: An updated pipeline resource
    title: UpdatePipelineResponse represents a response for a pipeline resource
  v1alphaUpdateResourceResponse:
    type: object
    properties:
      resource:
        $ref: '#/definitions/v1alphaResource'
        title: Resource updated
    title: UpdateResourceResponse represents a response to update a resource's state
  v1alphaUpdateSourceConnectorResponse:
    type: object
    properties:
      source_connector:
        $ref: '#/definitions/v1alphaSourceConnector'
        title: SourceConnector resource
    title: |-
      UpdateSourceConnectorResponse represents a response for a
      SourceConnector resource
  v1alphaUpdateUserAdminResponse:
    type: object
    properties:
      user:
        $ref: '#/definitions/v1alphaUser'
        title: A user resource
    title: UpdateUserAdminResponse represents a response for a user resource
  v1alphaUsageSummary:
    type: object
    properties:
      time:
        type: string
        format: date-time
        title: Time when the summary is generated
      value:
        type: string
        format: int64
        title: The total usage since the beginning of the current billing period
    title: Usage summary definition
    required:
      - time
      - value
  v1alphaUser:
    type: object
    properties:
      name:
        type: string
        description: 'Resource name. It must have the format of `users/{username}`. For example: `users/local-user`.'
        readOnly: true
      uid:
        type: string
        description: User ID in UUIDv4. This field is optionally set by users (optional on resource creation, server-generated if unset).
      id:
        type: string
        description: |-
          Resource ID (the last segment of the resource name), also the user username. This conforms to RFC-1034, which restricts to letters, numbers, and hyphen, with the first character a letter, the last a letter or a number, and a 63 character maximum.

          NOTE: the ID can be updated.
      type:
        $ref: '#/definitions/v1alphaOwnerType'
        title: 'Owner type: fixed to `OWNER_TYPE_USER`'
        readOnly: true
      create_time:
        type: string
        format: date-time
        title: User creation time
        readOnly: true
      update_time:
        type: string
        format: date-time
        title: User update time
        readOnly: true
      email:
        type: string
        title: User email
      customer_id:
        type: string
        description: Stripe customer ID. This field is used in Instill Cloud.
        readOnly: true
      first_name:
        type: string
        title: User first name
      last_name:
        type: string
        title: User last name
      org_name:
        type: string
        title: User company or institution name
      role:
        type: string
        title: |-
          User role. Allowed roles:
           - "manager"
           - "ai-researcher"
           - "ai-engineer"
           - "data-engineer",
           - "data-scientist",
           - "analytics-engineer"
           - "hobbyist"
      newsletter_subscription:
        type: boolean
        title: User newsletter subscription
      cookie_token:
        type: string
        title: User console cookie token
    title: User represents the content of a user
    required:
      - id
      - email
      - newsletter_subscription
  v1alphaUserData:
    type: object
    properties:
      uid:
        type: string
        title: User unique id
      name:
        type: string
        title: User name, which is not necessry for service queries
    title: User records definition
    required:
      - uid
  v1alphaValidateTokenResponse:
    type: object
    properties:
      valid:
        type: boolean
        title: A boolean value indicating whether the token is valid
    title: |-
      ValidateTokenResponse represents a response about whether
      the queried token is valid
  v1alphaWatchDestinationConnectorResponse:
    type: object
    properties:
      state:
        $ref: '#/definitions/v1alphaConnectorState'
        title: Retrieved connector state
    title: |-
      WatchDestinationConnectorResponse represents a response to fetch a destination connector's
      current state
  v1alphaWatchModelResponse:
    type: object
    properties:
      state:
        $ref: '#/definitions/v1alphaModelState'
        title: Retrieved model state
      progress:
        type: integer
        format: int32
        title: Retrieved model logrunning progress
    title: |-
      WatchModelResponse represents a public response to
      fetch a model current state and longrunning progress
  v1alphaWatchPipelineResponse:
    type: object
    properties:
      state:
        $ref: '#/definitions/v1alphaPipelineState'
        title: Retrieved pipeline state
    title: |-
      WatchPipelineResponse represents a response to fetch a pipeline's
      current state
  v1alphaWatchSourceConnectorResponse:
    type: object
    properties:
      state:
        $ref: '#/definitions/v1alphaConnectorState'
        title: Retrieved connector state
    title: |-
      WatchSourceConnectorResponse represents a response to fetch a source connector's
      current state
  v1alphaWriteDestinationConnectorResponse:
    type: object
    title: |-
      WriteDestinationConnectorResponse represents the read data from a
      DestinationConnector resource
  vdpconnectorv1alphaLivenessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: LivenessResponse represents a response for a service liveness status
  vdpconnectorv1alphaReadinessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: ReadinessResponse represents a response for a service readiness status
  vdpconnectorv1alphaReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_UNSPECIFIED
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GENERALLY_AVAILABLE
      - RELEASE_STAGE_CUSTOM
    default: RELEASE_STAGE_UNSPECIFIED
    description: |-
      - RELEASE_STAGE_UNSPECIFIED: ReleaseStage: UNSPECIFIED
       - RELEASE_STAGE_ALPHA: ReleaseStage: ALPHA
       - RELEASE_STAGE_BETA: ReleaseStage: BETA
       - RELEASE_STAGE_GENERALLY_AVAILABLE: ReleaseStage: GENERALLY_AVAILABLE
       - RELEASE_STAGE_CUSTOM: ReleaseStage: CUSTOM
    title: ReleaseStage enumerates the release stages
  vdpconnectorv1alphaView:
    type: string
    enum:
      - VIEW_UNSPECIFIED
      - VIEW_BASIC
      - VIEW_FULL
    default: VIEW_UNSPECIFIED
    description: |-
      - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
       - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
       - VIEW_FULL: View: FULL, full representation of the resource.
    title: View enumerates the definition views
  vdpcontrollerv1alphaLivenessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: LivenessResponse represents a response for a service liveness status
  vdpcontrollerv1alphaReadinessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: ReadinessResponse represents a response for a service readiness status
  vdpmgmtv1alphaLivenessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: LivenessResponse represents a response for a service liveness status
  vdpmgmtv1alphaReadinessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: ReadinessResponse represents a response for a service readiness status
  vdpmgmtv1alphaView:
    type: string
    enum:
      - VIEW_UNSPECIFIED
      - VIEW_BASIC
      - VIEW_FULL
    default: VIEW_UNSPECIFIED
    description: |-
      View represents a view of any resource. The resource view is implemented by adding a parameter to the method request which allows the client to specify which view of the resource it wants to receive in the response.

       - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
       - VIEW_BASIC: View: BASIC, server response only include basic information of the user.
       - VIEW_FULL: View: FULL, full representation of the user
  vdpmodelv1alphaLivenessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: LivenessResponse represents a response for a service liveness status
  vdpmodelv1alphaReadinessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: ReadinessResponse represents a response for a service readiness status
  vdpmodelv1alphaReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_UNSPECIFIED
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GENERALLY_AVAILABLE
      - RELEASE_STAGE_CUSTOM
    default: RELEASE_STAGE_UNSPECIFIED
    description: |-
      - RELEASE_STAGE_UNSPECIFIED: ReleaseStage: UNSPECIFIED
       - RELEASE_STAGE_ALPHA: ReleaseStage: ALPHA
       - RELEASE_STAGE_BETA: ReleaseStage: BETA
       - RELEASE_STAGE_GENERALLY_AVAILABLE: ReleaseStage: GENERALLY_AVAILABLE
       - RELEASE_STAGE_CUSTOM: ReleaseStage: CUSTOM
    title: ReleaseStage enumerates the release stages
  vdpmodelv1alphaTaskOutput:
    type: object
    properties:
      classification:
        $ref: '#/definitions/v1alphaClassificationOutput'
        title: The classification output
        readOnly: true
      detection:
        $ref: '#/definitions/v1alphaDetectionOutput'
        title: The detection output
        readOnly: true
      keypoint:
        $ref: '#/definitions/v1alphaKeypointOutput'
        title: The keypoint output
        readOnly: true
      ocr:
        $ref: '#/definitions/v1alphaOcrOutput'
        title: The ocr output
        readOnly: true
      instance_segmentation:
        $ref: '#/definitions/v1alphaInstanceSegmentationOutput'
        title: The instance segmentation output
        readOnly: true
      semantic_segmentation:
        $ref: '#/definitions/v1alphaSemanticSegmentationOutput'
        title: The semantic segmentation output
        readOnly: true
      text_to_image:
        $ref: '#/definitions/v1alphaTextToImageOutput'
        title: The text to image output
        readOnly: true
      text_generation:
        $ref: '#/definitions/v1alphaTextGenerationOutput'
        title: The text generation output
        readOnly: true
      unspecified:
        $ref: '#/definitions/v1alphaUnspecifiedOutput'
        title: The unspecified task output
        readOnly: true
    title: TaskOutput represents the output of a CV Task result from a model
  vdpmodelv1alphaView:
    type: string
    enum:
      - VIEW_UNSPECIFIED
      - VIEW_BASIC
      - VIEW_FULL
    default: VIEW_UNSPECIFIED
    description: |-
      View represents a view of any resource. The resource view is implemented by
      adding a parameter to the method request which allows the client to specify
      which view of the resource it wants to receive in the response.

       - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
       - VIEW_BASIC: View: BASIC, omit `Model.configuration` and `ModelInstance.configuration`
       - VIEW_FULL: View: FULL, full representation of the resource
  vdppipelinev1alphaLivenessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: LivenessResponse represents a response for a service liveness status
  vdppipelinev1alphaReadinessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: ReadinessResponse represents a response for a service readiness status
  vdppipelinev1alphaTaskOutput:
    type: object
    properties:
      index:
        type: string
        title: The index of input data in a batch
        readOnly: true
      classification:
        $ref: '#/definitions/v1alphaClassificationOutput'
        title: The classification output
        readOnly: true
      detection:
        $ref: '#/definitions/v1alphaDetectionOutput'
        title: The detection output
        readOnly: true
      keypoint:
        $ref: '#/definitions/v1alphaKeypointOutput'
        title: The keypoint output
        readOnly: true
      ocr:
        $ref: '#/definitions/v1alphaOcrOutput'
        title: The ocr output
        readOnly: true
      instance_segmentation:
        $ref: '#/definitions/v1alphaInstanceSegmentationOutput'
        title: The instance segmentation output
        readOnly: true
      semantic_segmentation:
        $ref: '#/definitions/v1alphaSemanticSegmentationOutput'
        title: The semantic segmentation output
        readOnly: true
      text_to_image:
        $ref: '#/definitions/v1alphaTextToImageOutput'
        title: The text to image output
        readOnly: true
      text_generation:
        $ref: '#/definitions/v1alphaTextGenerationOutput'
        title: The text generation
        readOnly: true
      unspecified:
        $ref: '#/definitions/v1alphaUnspecifiedOutput'
        title: The unspecified task output
        readOnly: true
    description: |-
      TaskOutput represents the output of a CV Task result from a
      model, extended from model.v1alpha.TaskOutput.
      Here we don't use a model.v1alpha.TaskOutput type field but explicitly use
      the replicated oneof field because we want the CV Task output to be at the
      same message layer like the trigger output of model.
  vdppipelinev1alphaView:
    type: string
    enum:
      - VIEW_UNSPECIFIED
      - VIEW_BASIC
      - VIEW_FULL
    default: VIEW_UNSPECIFIED
    description: |-
      View represents a view of any resource. The resource view is implemented by
      adding a parameter to the method request which allows the client to specify
      which view of the resource it wants to receive in the response.

       - VIEW_UNSPECIFIED: View: UNSPECIFIED, equivalent to BASIC.
       - VIEW_BASIC: View: BASIC, server response only include basic information of the resource.
       - VIEW_FULL: View: FULL, full representation of the resource.
  vdpusagev1alphaLivenessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: LivenessResponse represents a response for a service liveness status
  vdpusagev1alphaReadinessResponse:
    type: object
    properties:
      health_check_response:
        $ref: '#/definitions/v1alphaHealthCheckResponse'
        title: HealthCheckResponse message
    title: ReadinessResponse represents a response for a service readiness status
