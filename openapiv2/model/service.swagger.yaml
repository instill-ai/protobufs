swagger: "2.0"
info:
  title: ⚗️ Model
  description: Endpoints to manage the AI model-related resources and features working with Instill VDP.
  version: v0.37.0-beta
  contact:
    name: Instill AI
    url: https://github.com/instill-ai
    email: hello@instill.tech
  license:
    name: Elastic License 2.0 (ELv2)
    url: https://github.com/instill-ai/protobufs/blob/main/LICENSE
tags:
  - name: Model Definition
    description: Model definition endpoints
  - name: Model
    description: Model endpoints
  - name: Version
    description: Model version endpoints
  - name: Trigger
    description: Model trigger endpoints
  - name: Region
    description: Model region endpoints
host: api.instill.tech
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1alpha/model-definitions:
    get:
      summary: List model definitions
      description: Returns a paginated list of model definitions.
      operationId: ModelPublicService_ListModelDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListModelDefinitionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of model definitions to return. If this parameter
            is unspecified, at most 10 definitions will be returned. The cap value for
            this parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model Definition
  /v1alpha/available-regions:
    get:
      summary: List available regions
      description: Returns a paginated list of available regions.
      operationId: ModelPublicService_ListAvailableRegions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListAvailableRegionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      tags:
        - Region
  /v1alpha/model-definitions/{modelDefinitionId}:
    get:
      summary: Get a model definition
      description: Returns the details of a model definition.
      operationId: ModelPublicService_GetModelDefinition
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelDefinitionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: modelDefinitionId
          description: |-
            The resource name of the model definition, which allows its access by ID.
            - Format: `model-definitions/{id}`.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model Definition
  /v1alpha/models:
    get:
      summary: List models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models:
    get:
      summary: List namespace models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListNamespaceModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListNamespaceModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model
    post:
      summary: Create a new model
      description: |-
        Creates a new model under the parenthood of a namespace. This is an
        asynchronous endpoint, i.e., the server will not wait for the model to be
        created in order to respond. Instead, it will return a response with the
        necessary information to access the result and status of the creation
        operation.
      operationId: ModelPublicService_CreateNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: model
          description: The properties of the model to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaModel'
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}:
    get:
      summary: Get a model
      description: Returns the detail of a model, accessing it by the model ID and its parent namespace.
      operationId: ModelPublicService_GetNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
    delete:
      summary: Delete a model
      description: |-
        Deletes a model, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model.
      operationId: ModelPublicService_DeleteNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
      tags:
        - Model
    patch:
      summary: Update a model
      description: |-
        Updates a model, accessing it by its resource name, which is defined by
        the parent namespace and the ID of the model.

        In REST requests, only the supplied model fields will be taken into
        account when updating the resource.
      operationId: ModelPublicService_UpdateNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: model
          description: The model to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaModel'
            required:
              - model
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/rename:
    post:
      summary: Rename a model
      description: |-
        Renames a model, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model.
      operationId: ModelPublicService_RenameNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenameNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceRenameNamespaceModelBody'
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/watch:
    get:
      summary: Watch the state of a model version
      description: |-
        Returns the state of a model. The model resource allocation and scaling actions take some
        time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
      tags:
        - Version
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/watch:
    get:
      summary: Watch the state of the latest model version
      description: |-
        Returns the state of the latest model version. The model resource allocation and scaling actions
        take some time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions:
    get:
      summary: List namespace model versions
      description: |-
        Returns a paginated list of version of a model namespace that belong to the specified namespace.
        Contains model version and digest.
      operationId: ModelPublicService_ListNamespaceModelVersions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListNamespaceModelVersionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of versions to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Version
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}:
    delete:
      summary: Delete a model version
      description: |-
        Deletes a model version, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model, and version.
      operationId: ModelPublicService_DeleteNamespaceModelVersion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteNamespaceModelVersionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
      tags:
        - Version
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerNamespaceModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger-async:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerAsyncNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerAsyncNamespaceModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerNamespaceLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger-async:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerAsyncNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerAsyncNamespaceLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/operation:
    get:
      summary: Get the details of the latest long-running operation from a namespace model
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as deployment.
      operationId: ModelPublicService_GetNamespaceLatestModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetNamespaceLatestModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
  /v1alpha/operations/{operationId}:
    get:
      summary: Get the details of a long-running operation
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as deployment.
      operationId: ModelPublicService_GetModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: operationId
          description: The resource name of the model, which allows its access ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
  /v1alpha/{user_name}/models:
    get:
      summary: List user models
      description: |-
        Returns a paginated list of models that belong to the specified user. The
        parent user may be different from the authenticated user, in which case
        the results will contain the models that are visible to the latter.
      operationId: ModelPublicService_ListUserModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListUserModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_name
          description: |-
            The parent resource, i.e., the user that created the models.
            - Format: `users/{user.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model (Deprecated)
      deprecated: true
    post:
      summary: Create a new model
      description: |-
        Creates a new model under the parenthood of a user. This is an
        asynchronous endpoint, i.e., the server will not wait for the model to be
        created in order to respond. Instead, it will return a response with the
        necessary information to access the result and status of the creation
        operation.
      operationId: ModelPublicService_CreateUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_name
          description: |-
            The parent resource, i.e., the user that creates the model.
            Format: `users/{user.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+
        - name: model
          description: The properties of the model to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaModel'
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}:
    get:
      summary: Get a model
      description: Returns the detail of a model, accessing it by the model ID and its parent user.
      operationId: ModelPublicService_GetUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model (Deprecated)
      deprecated: true
    delete:
      summary: Delete a model
      description: |-
        Deletes a model, accesing it by its resource name, which is defined by the
        parent user and the ID of the model.
      operationId: ModelPublicService_DeleteUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{model_name}:
    patch:
      summary: Update a model
      description: |-
        Updates a model, accessing it by its resource name, which is defined by
        the parent user and the ID of the model.

        In REST requests, only the supplied model fields will be taken into
        account when updating the resource.
      operationId: ModelPublicService_UpdateUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: model_name
          description: |-
            The resource name of the model, which allows its access by owner and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: model
          description: The model to update
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: Model UUID.
                readOnly: true
              id:
                type: string
                description: |-
                  Model resource ID (used in `name` as the last segment). This conforms to
                  RFC-1034, which restricts to letters, numbers, and hyphen, with the first
                  character a letter, the last a letter or a number, and a 63 character
                  maximum.
              description:
                type: string
                description: Model description.
              modelDefinition:
                type: string
                description: The model definition that has been used to import the model.
              configuration:
                type: object
                description: |-
                  Model configuration. This field is validated against the model
                  specification in the model definition (i.e. the `model_spec` field in the
                  model definition).
              task:
                description: Model task.
                allOf:
                  - $ref: '#/definitions/v1alphaTask'
              visibility:
                description: Model visibility.
                allOf:
                  - $ref: '#/definitions/v1alphaModelVisibility'
              createTime:
                type: string
                format: date-time
                description: Model creation time.
                readOnly: true
              updateTime:
                type: string
                format: date-time
                description: Model update time.
                readOnly: true
              deleteTime:
                type: string
                format: date-time
                description: Model deletion time.
                readOnly: true
              ownerName:
                type: string
                description: Resource name of the owner.
                readOnly: true
              owner:
                description: Model owner.
                readOnly: true
                allOf:
                  - $ref: '#/definitions/v1betaOwner'
              region:
                type: string
                description: Region of choice for the particular provider to host the model.
              hardware:
                type: string
                description: Hardware of choice to serve the model.
              readme:
                type: string
                description: README holds the model documentation.
              sourceUrl:
                type: string
                description: A link to the source code of the model (e.g. to a GitHub repository).
              documentationUrl:
                type: string
                description: A link to any extra information.
              license:
                type: string
                description: License under which the model is distributed.
              sampleInput:
                title: Sample input for this model
                readOnly: true
                allOf:
                  - $ref: '#/definitions/v1alphaTaskInput'
              sampleOutput:
                title: Sample output for this model
                readOnly: true
                allOf:
                  - $ref: '#/definitions/v1alphaTaskOutput'
              profileImage:
                type: string
                description: Model profile image in base64 format.
              permission:
                description: Permission defines how a pipeline can be used.
                readOnly: true
                allOf:
                  - $ref: '#/definitions/modelv1alphaPermission'
              inputSchema:
                type: object
                title: Input schema for the model
                readOnly: true
              outputSchema:
                type: object
                title: Output schema for the model
                readOnly: true
              tags:
                type: array
                items:
                  type: string
                description: Tags.
                readOnly: true
              versions:
                type: array
                items:
                  type: string
                description: Version names.
                readOnly: true
            title: The model to update
            required:
              - id
              - modelDefinition
              - configuration
              - task
              - visibility
              - region
              - hardware
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/rename:
    post:
      summary: Rename a model
      description: |-
        Renames a model, accesing it by its resource name, which is defined by the
        parent user and the ID of the model.
      operationId: ModelPublicService_RenameUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenameUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceRenameUserModelBody'
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/versions/{version}/watch:
    get:
      summary: Watch the state of a model version
      description: |-
        Returns the state of a model. The model resource allocation and scaling actions take some
        time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/watch:
    get:
      summary: Watch the state of the latest model version
      description: |-
        Returns the state of the latest model version. The model resource allocation and scaling actions
        take some time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchUserLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchUserLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/versions:
    get:
      summary: List user model versions
      description: |-
        Returns a paginated list of version of a model namespace that belong to the specified user.
        Contains model version and digest.
      operationId: ModelPublicService_ListUserModelVersions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListUserModelVersionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The parent resource, i.e., the user that created the models.
            - Format: `users/{user.id}`.
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: pageSize
          description: |-
            The maximum number of versions to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/versions/{version}:
    delete:
      summary: Delete a model version
      description: |-
        Deletes a model version, accesing it by its resource name, which is defined by the
        parent user and the ID of the model, and version.
      operationId: ModelPublicService_DeleteUserModelVersion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteUserModelVersionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/versions/{version}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model , which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerUserModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/versions/{version}/triggerAsync:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncUserModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerAsyncUserModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model , which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerAsyncUserModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerUserLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerUserLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model , which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerUserLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/triggerAsync:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncUserLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerAsyncUserLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model , which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerAsyncUserLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{organization_name}/models:
    get:
      summary: List organization models
      description: |-
        Returns a paginated list of models that belong to the specified organization. The
        parent organization may be different from the authenticated organization, in which case
        the results will contain the models that are visible to the latter.
      operationId: ModelPublicService_ListOrganizationModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListOrganizationModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_name
          description: |-
            The parent resource, i.e., the organization that created the models.
            - Format: `organizations/{organizations.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model (Deprecated)
      deprecated: true
    post:
      summary: Create a new model
      description: |-
        Creates a new model under the parenthood of an organization. This is an
        asynchronous endpoint, i.e., the server will not wait for the model to be
        created in order to respond. Instead, it will return a response with the
        necessary information to access the result and status of the creation
        operation.
      operationId: ModelPublicService_CreateOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaCreateOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_name
          description: |-
            The parent resource, i.e., the organization that creates the model.
            Format: `organizations/{organization.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+
        - name: model
          description: The properties of the model to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1alphaModel'
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}:
    get:
      summary: Get a model
      description: Returns the detail of a model, accessing it by the model ID and its parent organization.
      operationId: ModelPublicService_GetOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model, which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model (Deprecated)
      deprecated: true
    delete:
      summary: Delete a model
      description: |-
        Deletes a model, accesing it by its resource name, which is defined by the
        parent organization and the ID of the model.
      operationId: ModelPublicService_DeleteOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model, which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{model_name_1}:
    patch:
      summary: Update a model
      description: |-
        Updates a model, accessing it by its resource name, which is defined by
        the parent organization and the ID of the model.

        In REST requests, only the supplied model fields will be taken into
        account when updating the resource.
      operationId: ModelPublicService_UpdateOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaUpdateOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: model_name_1
          description: |-
            The resource name of the model, which allows its access by owner and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: model
          description: The model to update
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: Model UUID.
                readOnly: true
              id:
                type: string
                description: |-
                  Model resource ID (used in `name` as the last segment). This conforms to
                  RFC-1034, which restricts to letters, numbers, and hyphen, with the first
                  character a letter, the last a letter or a number, and a 63 character
                  maximum.
              description:
                type: string
                description: Model description.
              modelDefinition:
                type: string
                description: The model definition that has been used to import the model.
              configuration:
                type: object
                description: |-
                  Model configuration. This field is validated against the model
                  specification in the model definition (i.e. the `model_spec` field in the
                  model definition).
              task:
                description: Model task.
                allOf:
                  - $ref: '#/definitions/v1alphaTask'
              visibility:
                description: Model visibility.
                allOf:
                  - $ref: '#/definitions/v1alphaModelVisibility'
              createTime:
                type: string
                format: date-time
                description: Model creation time.
                readOnly: true
              updateTime:
                type: string
                format: date-time
                description: Model update time.
                readOnly: true
              deleteTime:
                type: string
                format: date-time
                description: Model deletion time.
                readOnly: true
              ownerName:
                type: string
                description: Resource name of the owner.
                readOnly: true
              owner:
                description: Model owner.
                readOnly: true
                allOf:
                  - $ref: '#/definitions/v1betaOwner'
              region:
                type: string
                description: Region of choice for the particular provider to host the model.
              hardware:
                type: string
                description: Hardware of choice to serve the model.
              readme:
                type: string
                description: README holds the model documentation.
              sourceUrl:
                type: string
                description: A link to the source code of the model (e.g. to a GitHub repository).
              documentationUrl:
                type: string
                description: A link to any extra information.
              license:
                type: string
                description: License under which the model is distributed.
              sampleInput:
                title: Sample input for this model
                readOnly: true
                allOf:
                  - $ref: '#/definitions/v1alphaTaskInput'
              sampleOutput:
                title: Sample output for this model
                readOnly: true
                allOf:
                  - $ref: '#/definitions/v1alphaTaskOutput'
              profileImage:
                type: string
                description: Model profile image in base64 format.
              permission:
                description: Permission defines how a pipeline can be used.
                readOnly: true
                allOf:
                  - $ref: '#/definitions/modelv1alphaPermission'
              inputSchema:
                type: object
                title: Input schema for the model
                readOnly: true
              outputSchema:
                type: object
                title: Output schema for the model
                readOnly: true
              tags:
                type: array
                items:
                  type: string
                description: Tags.
                readOnly: true
              versions:
                type: array
                items:
                  type: string
                description: Version names.
                readOnly: true
            title: The model to update
            required:
              - id
              - modelDefinition
              - configuration
              - task
              - visibility
              - region
              - hardware
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/rename:
    post:
      summary: Rename a model
      description: |-
        Renames a model, accesing it by its resource name, which is defined by the
        parent organization and the ID of the model.
      operationId: ModelPublicService_RenameOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaRenameOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model, which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceRenameOrganizationModelBody'
      tags:
        - Model (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/versions/{version}/watch:
    get:
      summary: Watch the state of a model version
      description: |-
        Returns the state of a model.  The model resource allocation and scaling actions
        take some time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model, which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/watch:
    get:
      summary: Watch the state of the latest model version
      description: |-
        Returns the state of the latest model version.  The model resource allocation and scaling actions
        take some time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchOrganizationLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaWatchOrganizationLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model, which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/versions:
    get:
      summary: List organization model versions
      description: |-
        Returns a paginated list of version of a model namespace that belong to the specified organization.
        Contains model version and digest.
      operationId: ModelPublicService_ListOrganizationModelVersions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaListOrganizationModelVersionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The parent resource, i.e., the user that created the models.
            - Format: `organizations/{organization.id}`.
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: pageSize
          description: |-
            The maximum number of versions to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/versions/{version}:
    delete:
      summary: Delete a model version
      description: |-
        Deletes a model version, accesing it by its resource name, which is defined by the
        parent organization and the ID of the model, and version.
      operationId: ModelPublicService_DeleteOrganizationModelVersion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaDeleteOrganizationModelVersionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The parent resource, i.e., the user that created the models.
            - Format: `organizations/{organization.id}`.
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
      tags:
        - Version (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/versions/{version}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model , which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerOrganizationModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/versions/{version}/triggerAsync:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncOrganizationModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerAsyncOrganizationModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model , which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: version
          description: Model version
          in: path
          required: true
          type: string
          pattern: '[^/]+'
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerAsyncOrganizationModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerOrganizationLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerOrganizationLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model , which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerOrganizationLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/triggerAsync:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncOrganizationLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaTriggerAsyncOrganizationLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model , which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ModelPublicServiceTriggerAsyncOrganizationLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{user_model_name}/operation:
    get:
      summary: Get the details of the latest long-running operation from a user model
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as deployment.
      operationId: ModelPublicService_GetUserLatestModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetUserLatestModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: user_model_name
          description: |-
            The resource name of the model, which allows its access by parent user
            and ID.
            - Format: `users/{user.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: users/[^/]+/models/[^/]+
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Trigger (Deprecated)
      deprecated: true
  /v1alpha/{organization_model_name}/operation:
    get:
      summary: Get the details of the latest long-running operation from a organization model
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as deployment.
      operationId: ModelPublicService_GetOrganizationLatestModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1alphaGetOrganizationLatestModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: organization_model_name
          description: |-
            The resource name of the model, which allows its access by parent organization
            and ID.
            - Format: `organizations/{organization.id}/models/{model.id}`.
          in: path
          required: true
          type: string
          pattern: organizations/[^/]+/models/[^/]+
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Trigger (Deprecated)
      deprecated: true
definitions:
  ModelPublicServiceRenameNamespaceModelBody:
    type: object
    properties:
      newModelId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `namespaces/{namespace.id}/models/{new_model_id}`.
    title: RenameNamespaceModelRequest represents a request to rename a model
    required:
      - newModelId
  ModelPublicServiceRenameOrganizationModelBody:
    type: object
    properties:
      newModelId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `organizations/{organization.id}/models/{new_model_id}`.
    title: RenameOrganizationModelRequest represents a request to rename a model
    required:
      - newModelId
  ModelPublicServiceRenameUserModelBody:
    type: object
    properties:
      newModelId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `users/{user.id}/models/{new_model_id}`.
    title: RenameUserModelRequest represents a request to rename a model
    required:
      - newModelId
  ModelPublicServiceTriggerAsyncNamespaceLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: |-
      TriggerAsyncNamespaceLatestModelRequest represents a request to trigger a model inference
      asynchronously with the latest uploaded version.
    required:
      - taskInputs
  ModelPublicServiceTriggerAsyncNamespaceModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: |-
      TriggerAsyncNamespaceModelRequest represents a request to trigger a model inference
      asynchronously.
    required:
      - taskInputs
  ModelPublicServiceTriggerAsyncOrganizationLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    title: |-
      TriggerAsyncOrganizationLatestModelRequest represents a request to trigger a model inference
      asynchronously
    required:
      - taskInputs
  ModelPublicServiceTriggerAsyncOrganizationModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    title: |-
      TriggerAsyncOrganizationModelRequest represents a request to trigger a model inference
      asynchronously
    required:
      - taskInputs
  ModelPublicServiceTriggerAsyncUserLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: |-
      TriggerAsyncUserLatestModelRequest represents a request to trigger a model inference
      asynchronously with the latest uploaded version.
    required:
      - taskInputs
  ModelPublicServiceTriggerAsyncUserModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: |-
      TriggerAsyncUserModelRequest represents a request to trigger a model inference
      asynchronously.
    required:
      - taskInputs
  ModelPublicServiceTriggerNamespaceLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: |-
      TriggerNamespaceLatestModelRequest represents a request to trigger a model inference
      with the latest uploaded version.
    required:
      - taskInputs
  ModelPublicServiceTriggerNamespaceModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: TriggerNamespaceModelRequest represents a request to trigger a model inference.
    required:
      - taskInputs
  ModelPublicServiceTriggerOrganizationLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: TriggerOrganizationLatestModelRequest represents a request to trigger a model inference.
    required:
      - taskInputs
  ModelPublicServiceTriggerOrganizationModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: TriggerOrganizationModelRequest represents a request to trigger a model inference.
    required:
      - taskInputs
  ModelPublicServiceTriggerUserLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: |-
      TriggerUserLatestModelRequest represents a request to trigger a model inference
      with the latest uploaded version.
    required:
      - taskInputs
  ModelPublicServiceTriggerUserModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskInput'
        description: Inference input parameters.
    description: TriggerUserModelRequest represents a request to trigger a model inference.
    required:
      - taskInputs
  googlelongrunningOperation:
    type: object
    properties:
      name:
        type: string
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should be a resource name ending with `operations/{unique_id}`.
      metadata:
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        allOf:
          - $ref: '#/definitions/protobufAny'
      done:
        type: boolean
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
      error:
        description: The error result of the operation in case of failure or cancellation.
        allOf:
          - $ref: '#/definitions/googlerpcStatus'
      response:
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        allOf:
          - $ref: '#/definitions/protobufAny'
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  mgmtv1betaPermission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the resource can be modified.
        readOnly: true
    description: Permission defines how a resource can be used.
  modelv1alphaPermission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the pipeline can be modified.
      canTrigger:
        type: boolean
        description: Defines whether the pipeline can be executed.
    description: Permission defines how a pipeline can be used.
  modelv1alphaState:
    type: string
    enum:
      - STATE_OFFLINE
      - STATE_SCALING
      - STATE_ACTIVE
      - STATE_IDLE
      - STATE_ERROR
      - STATE_STARTING
    description: |-
      State describes the state of a model. See [Deploy
      Models](https://www.instill.tech/docs/latest/model/deploy) for more
      information.

       - STATE_OFFLINE: Offline is the state when the model instance number is 0.
       - STATE_SCALING: Scaling is the transition state when a model instance is scaling up or down.
       - STATE_ACTIVE: Active is the state when a model is processing requests.
       - STATE_IDLE: Idle is the state when a model is alive but not processing requests.
       - STATE_ERROR: Error is the state when the model is undeployable.
       - STATE_STARTING: Starting is the state when the system is provisioning the necessary
      resources for the model
  modelv1alphaView:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a model definition is presented.

       - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
       - VIEW_FULL: Full representation.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  protobufNullValue:
    type: string
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.
  v1alphaBoundingBox:
    type: object
    properties:
      top:
        type: number
        format: float
        description: Top Y-axis.
        readOnly: true
      left:
        type: number
        format: float
        description: Left X-axis.
        readOnly: true
      width:
        type: number
        format: float
        description: Width.
        readOnly: true
      height:
        type: number
        format: float
        description: Height.
        readOnly: true
    description: |-
      BoundingBox represents a frame in an image that can be drawn when detecting
      patterns in objects.
  v1alphaClassificationInput:
    type: object
    properties:
      imageUrl:
        type: string
        description: Image URL.
      imageBase64:
        type: string
        description: Base64-encoded image.
    description: ClassificationInput is the input of an image classification task.
  v1alphaClassificationInputStream:
    type: object
    properties:
      fileLengths:
        type: array
        items:
          type: integer
          format: int64
        description: File length for each uploaded binary file.
      content:
        type: string
        format: byte
        description: Byte representation of the images.
    description: |-
      ClassificationInputStream represents the input of an image classification
      task when the input is streamed as a binary files.
    required:
      - fileLengths
      - content
  v1alphaClassificationOutput:
    type: object
    properties:
      category:
        type: string
        description: Category.
        readOnly: true
      score:
        type: number
        format: float
        description: Score.
        readOnly: true
    description: ClassificationOutput contains the result of an image classification task.
  v1alphaCreateNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The created model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: CreateNamespaceModelResponse contains the created model.
  v1alphaCreateOrganizationModelResponse:
    type: object
    properties:
      model:
        description: The created model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: CreateOrganizationModelResponse contains the created model.
  v1alphaCreateUserModelResponse:
    type: object
    properties:
      model:
        description: The created model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: CreateUserModelResponse contains the created model.
  v1alphaDeleteNamespaceModelResponse:
    type: object
    description: DeleteNamespaceModelResponse is an empty response.
  v1alphaDeleteNamespaceModelVersionResponse:
    type: object
    description: DeleteNamespaceModelVersionResponse is an empty response.
  v1alphaDeleteOrganizationModelResponse:
    type: object
    description: DeleteOrganizationModelResponse is an empty response.
  v1alphaDeleteOrganizationModelVersionResponse:
    type: object
    description: DeleteOrganizationModelVersionResponse is an empty response.
  v1alphaDeleteUserModelResponse:
    type: object
    description: DeleteUserModelResponse is an empty response.
  v1alphaDeleteUserModelVersionResponse:
    type: object
    description: DeleteUserModelVersionResponse is an empty response.
  v1alphaDeployNamespaceModelAdminResponse:
    type: object
    title: DeployNamespaceModelAdminResponse represents a response for a deployed model
  v1alphaDeployOrganizationModelAdminResponse:
    type: object
    title: DeployOrganizationModelAdminResponse represents a response for a deployed model
  v1alphaDeployUserModelAdminResponse:
    type: object
    title: DeployUserModelAdminResponse represents a response for a deployed model
  v1alphaDetectionInput:
    type: object
    properties:
      imageUrl:
        type: string
        description: Image URL.
      imageBase64:
        type: string
        description: Base64-encoded image.
    description: DetectionInput represents the input of an object detection task.
  v1alphaDetectionInputStream:
    type: object
    properties:
      fileLengths:
        type: array
        items:
          type: integer
          format: int64
        description: File length for each uploaded binary file.
      content:
        type: string
        format: byte
        description: Byte representation of the images.
    description: |-
      DetectionInputStream represents the input of an object detection task when
      the input is streamed as binary files.
    required:
      - fileLengths
      - content
  v1alphaDetectionObject:
    type: object
    properties:
      category:
        type: string
        description: Category.
        readOnly: true
      score:
        type: number
        format: float
        description: Score.
        readOnly: true
      boundingBox:
        description: Bounding box.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaBoundingBox'
    description: DetectionObject represents an identified object in an image.
  v1alphaDetectionOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaDetectionObject'
        description: A list of detected objects.
        readOnly: true
    description: DetectionOutput contains the result of an object detection task.
  v1alphaGetModelDefinitionResponse:
    type: object
    properties:
      modelDefinition:
        description: The model definition resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaModelDefinition'
    description: GetModelDefinitionResponse contains the requested model definition.
  v1alphaGetModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      GetModelOperationRequest represents a request to query a long-running
      operation.
  v1alphaGetNamespaceLatestModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      GetNamespaceLatestModelOperationRequest represents a request to query a long-running
      operation.
  v1alphaGetNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: GetNamespaceModelResponse contains the requested model.
  v1alphaGetOrganizationLatestModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      GetOrganizationLatestModelOperationRequest represents a request to query a long-running
      operation.
  v1alphaGetOrganizationModelResponse:
    type: object
    properties:
      model:
        description: The model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: GetOrganizationModelResponse contains the requested model.
  v1alphaGetUserLatestModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      GetUserLatestModelOperationRequest represents a request to query a long-running
      operation.
  v1alphaGetUserModelResponse:
    type: object
    properties:
      model:
        description: The model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: GetUserModelResponse contains the requested model.
  v1alphaImageContent:
    type: object
    properties:
      imageUrl:
        description: |-
          Image as URL or base64 code.

          NOTE: the `image_url` name comes from a convention from OpenAI, it doesn't
          determine the format of the image.
        allOf:
          - $ref: '#/definitions/v1alphaPromptImage'
      detail:
        type: string
        description: Additional information.
    description: ImageContent holds an image with some details in plain text.
  v1alphaImageToImageInput:
    type: object
    properties:
      promptImageUrl:
        type: string
        description: Image URL.
      promptImageBase64:
        type: string
        description: Base64-encoded image.
      prompt:
        type: string
        description: Input text.
      steps:
        type: integer
        format: int32
        description: Steps, defaults to 5.
      cfgScale:
        type: number
        format: float
        title: Guidance scale, defaults to 7.5
      seed:
        type: integer
        format: int32
        description: Seed, defaults to 0.
      samples:
        type: integer
        format: int32
        description: Number of generated samples, defaults to 1.
      extraParams:
        type: object
        description: Extra parameters.
    description: ImageToImageInput represents the input of an image-to-image task.
    required:
      - prompt
  v1alphaImageToImageOutput:
    type: object
    properties:
      images:
        type: array
        items:
          type: string
        description: A list of generated images.
        readOnly: true
    description: ImageToImageOutput contains the result of an image-to-image task.
  v1alphaInstanceSegmentationInput:
    type: object
    properties:
      imageUrl:
        type: string
        description: Image URL.
      imageBase64:
        type: string
        description: Base64-encoded image.
    description: |-
      InstanceSegmentationInput represents the input of an instance segmentation
      task.
  v1alphaInstanceSegmentationInputStream:
    type: object
    properties:
      fileLengths:
        type: array
        items:
          type: integer
          format: int64
        description: File length for each uploaded binary file.
      content:
        type: string
        format: byte
        description: Byte representation of the images.
    description: |-
      InstanceSegmentationInputStream represents the input of an instance
      segmentation task when the input is streamed as binary files.
    required:
      - fileLengths
      - content
  v1alphaInstanceSegmentationObject:
    type: object
    properties:
      rle:
        type: string
        description: RLE segmentation mask.
        readOnly: true
      category:
        type: string
        description: Category.
        readOnly: true
      score:
        type: number
        format: float
        description: Score.
        readOnly: true
      boundingBox:
        description: Bounding box.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaBoundingBox'
    description: |-
      InstanceSegmentationObject is an object in an image, localized and
      delineated.
  v1alphaInstanceSegmentationOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaInstanceSegmentationObject'
        description: A list of instance segmentation objects.
        readOnly: true
    description: |-
      InstanceSegmentationOutput contains the result of an instance segmentation
      task.
  v1alphaKeypoint:
    type: object
    properties:
      x:
        type: number
        format: float
        description: X coordinate.
        readOnly: true
      "y":
        type: number
        format: float
        description: Y coordinate.
        readOnly: true
      v:
        type: number
        format: float
        description: Visibility.
        readOnly: true
    description: Keypoint contains the coordinates and visibility of a keypoint in an object.
  v1alphaKeypointInput:
    type: object
    properties:
      imageUrl:
        type: string
        description: Image URL.
      imageBase64:
        type: string
        description: Base64-encoded image.
    description: KeypointInput represents the input of a keypoint detection task.
  v1alphaKeypointInputStream:
    type: object
    properties:
      fileLengths:
        type: array
        items:
          type: integer
          format: int64
        description: File length for each uploaded binary file.
      content:
        type: string
        format: byte
        description: Byte representation of the images.
    description: |-
      KeypointInputStream represents the input of a keypoint detection task when
      the input is streamed as binary files.
    required:
      - fileLengths
      - content
  v1alphaKeypointObject:
    type: object
    properties:
      keypoints:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaKeypoint'
        description: Keypoints.
        readOnly: true
      score:
        type: number
        format: float
        description: Score.
        readOnly: true
      boundingBox:
        description: Bounding box.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaBoundingBox'
    description: |-
      KeypointObject is a detected object with its keypoints, e.g. a detected
      human shape with its legs, arms, core, etc.
  v1alphaKeypointOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaKeypointObject'
        description: A list of keypoint objects.
        readOnly: true
    description: KeypointOutput represents the result of a keypoint detection task.
  v1alphaListAvailableRegionsResponse:
    type: object
    properties:
      regions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaRegion'
        title: A list of available region
    description: |-
      ListAvailableRegionsResponse contains a list of available
      regions and hardware types a model can be deployed on.
  v1alphaListModelDefinitionsResponse:
    type: object
    properties:
      modelDefinitions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModelDefinition'
        description: A list of model definition resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of model definitions.
    description: ListModelDefinitionsResponse contains a list of model definitions.
  v1alphaListModelsAdminResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModel'
        title: a list of Models
      nextPageToken:
        type: string
        title: Next page token
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    title: ListModelsAdminResponse represents a response for a list of models
  v1alphaListModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModel'
        description: A list of model resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    description: ListModelsResponse contains a list of models.
  v1alphaListNamespaceModelVersionsResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModelVersion'
        description: A list of model resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of versions.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: ListNamespaceModelVersionsResponse contains a list of models.
  v1alphaListNamespaceModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModel'
        description: A list of model resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    description: ListNamespaceModelsResponse contains a list of models.
  v1alphaListOrganizationModelVersionsResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModelVersion'
        description: A list of model resources.
      totalSize:
        type: integer
        format: int32
        description: Total number of versions.
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
      page:
        type: integer
        format: int32
        description: The requested page offset.
    description: ListOrganizationModelVersionsResponse contains a list of models.
  v1alphaListOrganizationModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModel'
        description: A list of model resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    description: ListOrganizationModelsResponse contains a list of models.
  v1alphaListUserModelVersionsResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModelVersion'
        description: A list of model resources.
      totalSize:
        type: integer
        format: int32
        description: Total number of versions.
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
      page:
        type: integer
        format: int32
        description: The requested page offset.
    description: ListUserModelVersionsResponse contains a list of models.
  v1alphaListUserModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaModel'
        description: A list of model resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    description: ListUserModelsResponse contains a list of models.
  v1alphaLookUpModelAdminResponse:
    type: object
    properties:
      model:
        title: A model resource
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    title: LookUpModelResponse represents a response for a model
  v1alphaMessage:
    type: object
    properties:
      role:
        type: string
        description: The Role of a message, e.g. `system`, `user`, etc. Defines the way the model answers questions.
      content:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaMessageContent'
        description: Message content.
    description: Message is used in chat history in text generation models.
  v1alphaMessageContent:
    type: object
    properties:
      type:
        type: string
        description: Content type.
      imageUrl:
        description: |-
          Image content.

          NOTE: the `image_url` name comes from a convention from OpenAI, it doesn't
          determine the format of the image.
        allOf:
          - $ref: '#/definitions/v1alphaImageContent'
      text:
        type: string
        description: Text content.
    description: |-
      MessageContent is a message in a chat history message, used in text
      generation models.
  v1alphaModel:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the model, which allows its access by owner and ID.
          - Format: `users/{user.id}/models/{model.id}`.
        readOnly: true
      uid:
        type: string
        description: Model UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Model resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.
      description:
        type: string
        description: Model description.
      modelDefinition:
        type: string
        description: The model definition that has been used to import the model.
      configuration:
        type: object
        description: |-
          Model configuration. This field is validated against the model
          specification in the model definition (i.e. the `model_spec` field in the
          model definition).
      task:
        description: Model task.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      visibility:
        description: Model visibility.
        allOf:
          - $ref: '#/definitions/v1alphaModelVisibility'
      createTime:
        type: string
        format: date-time
        description: Model creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Model update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Model deletion time.
        readOnly: true
      ownerName:
        type: string
        description: Resource name of the owner.
        readOnly: true
      owner:
        description: Model owner.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaOwner'
      region:
        type: string
        description: Region of choice for the particular provider to host the model.
      hardware:
        type: string
        description: Hardware of choice to serve the model.
      readme:
        type: string
        description: README holds the model documentation.
      sourceUrl:
        type: string
        description: A link to the source code of the model (e.g. to a GitHub repository).
      documentationUrl:
        type: string
        description: A link to any extra information.
      license:
        type: string
        description: License under which the model is distributed.
      sampleInput:
        title: Sample input for this model
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaTaskInput'
      sampleOutput:
        title: Sample output for this model
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaTaskOutput'
      profileImage:
        type: string
        description: Model profile image in base64 format.
      permission:
        description: Permission defines how a pipeline can be used.
        readOnly: true
        allOf:
          - $ref: '#/definitions/modelv1alphaPermission'
      inputSchema:
        type: object
        title: Input schema for the model
        readOnly: true
      outputSchema:
        type: object
        title: Output schema for the model
        readOnly: true
      tags:
        type: array
        items:
          type: string
        description: Tags.
        readOnly: true
      versions:
        type: array
        items:
          type: string
        description: Version names.
        readOnly: true
    title: |-
      Model represents an AI model, i.e. a program that performs tasks as decision
      making or or pattern recognition based on its training data
    required:
      - id
      - modelDefinition
      - configuration
      - task
      - visibility
      - region
      - hardware
  v1alphaModelDefinition:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the model, which allows its access by ID.
          - Format: `model-definitions/{id}`.
        readOnly: true
      uid:
        type: string
        description: Model definition UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Model definition resource ID (used in `name` as the last segment). This
          conforms to RFC-1034, which restricts to letters, numbers, and hyphen,
          with the first character a letter, the last a letter or a number, and a 63
          character maximum.
        readOnly: true
      title:
        type: string
        description: Official display title.
        readOnly: true
      documentationUrl:
        type: string
        description: Documentation URL.
        readOnly: true
      icon:
        type: string
        description: Display icon.
        readOnly: true
      releaseStage:
        description: Release stage.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaReleaseStage'
      modelSpec:
        type: object
        description: |-
          The model specification represented by a JSON schema. It is used to
          validate the JSON configurations of a model created from a specific model
          source, and the resource spec which the model is desired to be deployed on.
          It must be a valid JSON that includes what fields are needed to
          create or display a model.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
    description: ModelDefinition defines how to configure and import a model.
  v1alphaModelVersion:
    type: object
    properties:
      name:
        type: string
        description: |-
          The parent resource, i.e., the user that created the models.
          - Format: `users/{user.id}`.
          The resource name of the model, which allows its access by parent user
          and ID.
          - Format: `users/{user.id}/models/{model.id}`.
          The name of the Version.
          - Format: `users/{user.id}/models/{model.id}/versions/{version.id}`.
      version:
        type: string
        description: The model version identifier, which is equal to image tag.
      digest:
        type: string
        description: Unique identifier, computed from the manifest the Version refers to.
      state:
        description: Current state of this model version.
        readOnly: true
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      updateTime:
        type: string
        format: date-time
        description: Version update time, i.e. timestamp of the last push.
        readOnly: true
    description: ModelVersion contains information about the version of a model.
  v1alphaModelVisibility:
    type: string
    enum:
      - VISIBILITY_PRIVATE
      - VISIBILITY_PUBLIC
    description: |-
      Visibility defines who can access the model.

       - VISIBILITY_PRIVATE: Only the owner can see the model.
       - VISIBILITY_PUBLIC: Other users can see the model.
  v1alphaOcrInput:
    type: object
    properties:
      imageUrl:
        type: string
        description: Image URL.
      imageBase64:
        type: string
        description: Base64-encoded image.
    description: OcrInput represents the input of an OCR task.
  v1alphaOcrInputStream:
    type: object
    properties:
      fileLengths:
        type: array
        items:
          type: integer
          format: int64
        description: File length for each uploaded binary file.
      content:
        type: string
        format: byte
        description: Byte representation of the images.
    description: |-
      OcrInputStream represents the input of an OCR task when the input is
      streamed as binary files.
    required:
      - fileLengths
      - content
  v1alphaOcrObject:
    type: object
    properties:
      text:
        type: string
        description: Text.
        readOnly: true
      score:
        type: number
        format: float
        description: Score.
        readOnly: true
      boundingBox:
        description: Bounding box.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaBoundingBox'
    description: |-
      OcrObject is a text object within an image. OCR stands for Optical Character
      Recognition.
  v1alphaOcrOutput:
    type: object
    properties:
      objects:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaOcrObject'
        description: A list of text objects.
        readOnly: true
    description: OcrOutput contains the result of an OCR task.
  v1alphaPromptImage:
    type: object
    properties:
      promptImageUrl:
        type: string
        description: Image URL.
      promptImageBase64:
        type: string
        description: Base64-encoded image.
    description: PromptImage is an image input for model inference.
  v1alphaRegion:
    type: object
    properties:
      regionName:
        type: string
        title: Concate name of provider and region
      hardware:
        type: array
        items:
          type: string
        title: Hardware describes the available hardware types in this region
    description: |-
      Region describes the supported cloud provider and regions, with
      their supported GPU respectively.
  v1alphaReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GENERALLY_AVAILABLE
      - RELEASE_STAGE_CUSTOM
    description: |-
      ReleaseStage defines the stage of a release.

       - RELEASE_STAGE_ALPHA: Alpha.
       - RELEASE_STAGE_BETA: Beta.
       - RELEASE_STAGE_GENERALLY_AVAILABLE: Generally available.
       - RELEASE_STAGE_CUSTOM: Custom.
  v1alphaRenameNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The renamed model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: RenameNamespaceModelResponse contains a renamed model.
  v1alphaRenameOrganizationModelResponse:
    type: object
    properties:
      model:
        description: The renamed model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: RenameOrganizationModelResponse contains a renamed model.
  v1alphaRenameUserModelResponse:
    type: object
    properties:
      model:
        description: The renamed model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: RenameUserModelResponse contains a renamed model.
  v1alphaSemanticSegmentationInput:
    type: object
    properties:
      imageUrl:
        type: string
        description: Image URL.
      imageBase64:
        type: string
        description: Base64-encoded image.
    description: |-
      SemanticSegmentationInput represents the input of a semantic segmentation
      task.
  v1alphaSemanticSegmentationInputStream:
    type: object
    properties:
      fileLengths:
        type: array
        items:
          type: integer
          format: int64
        description: File length for each uploaded binary file.
      content:
        type: string
        format: byte
        description: Byte representation of the images.
    description: |-
      SemanticSegmentationInputStream represents the input of a semantic
      segmentation task when the input is streamed as a binary files.
    required:
      - fileLengths
      - content
  v1alphaSemanticSegmentationOutput:
    type: object
    properties:
      stuffs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaSemanticSegmentationStuff'
        description: A list of detected objects classified into categories.
        readOnly: true
    description: |-
      SemanticSegmentationOutput represents the output of a semantic segmentation
      task.
  v1alphaSemanticSegmentationStuff:
    type: object
    properties:
      rle:
        type: string
        description: RLE segmentation mask.
        readOnly: true
      category:
        type: string
        description: Category.
        readOnly: true
    description: |-
      SemanticSegmentationStuff is an object detected within an image and
      classified into a predefined category.
  v1alphaTask:
    type: string
    enum:
      - TASK_CLASSIFICATION
      - TASK_DETECTION
      - TASK_KEYPOINT
      - TASK_OCR
      - TASK_INSTANCE_SEGMENTATION
      - TASK_SEMANTIC_SEGMENTATION
      - TASK_TEXT_TO_IMAGE
      - TASK_TEXT_GENERATION
      - TASK_TEXT_GENERATION_CHAT
      - TASK_VISUAL_QUESTION_ANSWERING
      - TASK_IMAGE_TO_IMAGE
      - TASK_TEXT_EMBEDDINGS
      - TASK_SPEECH_RECOGNITION
    description: |-
      Task enumerates the AI task that a model is designed to solve.

       - TASK_CLASSIFICATION: Image Classification - classify images into predefined categories.
       - TASK_DETECTION: Object Detection - detect and localize multiple objects in images.
       - TASK_KEYPOINT: Keypoint Detection - detect and localize multiple keypoints of objects in images.
       - TASK_OCR: OCR (Optical Character Recognition) - detect and recognize text in images.
       - TASK_INSTANCE_SEGMENTATION: Instance Segmentation - detect, localize and delineate multiple objects in images.
       - TASK_SEMANTIC_SEGMENTATION: Semantic Segmentation - classify image pixels into predefined categories.
       - TASK_TEXT_TO_IMAGE: Text to Image - generate images from input text prompts.
       - TASK_TEXT_GENERATION: Text Generation - generate texts from input text prompts.
       - TASK_TEXT_GENERATION_CHAT: Conversational Text Generation - generate text as responses to a dialog input.
       - TASK_VISUAL_QUESTION_ANSWERING: Visual Question Answering - generate text as a response to a visual prompt.
       - TASK_IMAGE_TO_IMAGE: Image to Image - generate an image from another image.
       - TASK_TEXT_EMBEDDINGS: Text Embeddings - generate an embedding (a representation as coordinates) from a text input.
       - TASK_SPEECH_RECOGNITION: Speech Recognition - transcribe the words in an audio input.
  v1alphaTaskInput:
    type: object
    properties:
      classification:
        description: Image classification input.
        allOf:
          - $ref: '#/definitions/v1alphaClassificationInput'
      detection:
        description: Object detection input.
        allOf:
          - $ref: '#/definitions/v1alphaDetectionInput'
      keypoint:
        description: Keypoint detection input.
        allOf:
          - $ref: '#/definitions/v1alphaKeypointInput'
      ocr:
        description: Optical Character Recognition input.
        allOf:
          - $ref: '#/definitions/v1alphaOcrInput'
      instanceSegmentation:
        description: Instance segmentation input.
        allOf:
          - $ref: '#/definitions/v1alphaInstanceSegmentationInput'
      semanticSegmentation:
        description: Semantic segmentation input.
        allOf:
          - $ref: '#/definitions/v1alphaSemanticSegmentationInput'
      textToImage:
        description: Text to image input.
        allOf:
          - $ref: '#/definitions/v1alphaTextToImageInput'
      imageToImage:
        description: Image to image input.
        allOf:
          - $ref: '#/definitions/v1alphaImageToImageInput'
      textGeneration:
        description: Text generation input.
        allOf:
          - $ref: '#/definitions/v1alphaTextGenerationInput'
      textGenerationChat:
        description: Conversational text generation input.
        allOf:
          - $ref: '#/definitions/v1alphaTextGenerationChatInput'
      visualQuestionAnswering:
        description: Visual question answering input.
        allOf:
          - $ref: '#/definitions/v1alphaVisualQuestionAnsweringInput'
      unspecified:
        description: Unspecified task input.
        allOf:
          - $ref: '#/definitions/v1alphaUnspecifiedInput'
    description: TaskInput represents a question or task for an AI model.
  v1alphaTaskInputStream:
    type: object
    properties:
      classification:
        title: The classification input
        allOf:
          - $ref: '#/definitions/v1alphaClassificationInputStream'
      detection:
        title: The detection input
        allOf:
          - $ref: '#/definitions/v1alphaDetectionInputStream'
      keypoint:
        title: The keypoint input
        allOf:
          - $ref: '#/definitions/v1alphaKeypointInputStream'
      ocr:
        title: The ocr input
        allOf:
          - $ref: '#/definitions/v1alphaOcrInputStream'
      instanceSegmentation:
        title: The instance segmentation input
        allOf:
          - $ref: '#/definitions/v1alphaInstanceSegmentationInputStream'
      semanticSegmentation:
        title: The semantic segmentation input
        allOf:
          - $ref: '#/definitions/v1alphaSemanticSegmentationInputStream'
      textToImage:
        title: The text to image input
        allOf:
          - $ref: '#/definitions/v1alphaTextToImageInput'
      imageToImage:
        title: The image to image input
        allOf:
          - $ref: '#/definitions/v1alphaImageToImageInput'
      textGeneration:
        title: The text generation input
        allOf:
          - $ref: '#/definitions/v1alphaTextGenerationInput'
      textGenerationChat:
        title: The text generation chat input
        allOf:
          - $ref: '#/definitions/v1alphaTextGenerationChatInput'
      visualQuestionAnswering:
        title: The visual question answering input
        allOf:
          - $ref: '#/definitions/v1alphaVisualQuestionAnsweringInput'
      unspecified:
        title: The unspecified task input
        allOf:
          - $ref: '#/definitions/v1alphaUnspecifiedInput'
    title: TaskInputStream represents the input to trigger a model with stream method
  v1alphaTaskOutput:
    type: object
    properties:
      classification:
        description: Image classification output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaClassificationOutput'
      detection:
        description: Object detection output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaDetectionOutput'
      keypoint:
        description: Keypoint detection output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaKeypointOutput'
      ocr:
        description: Optical Character Recognition output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaOcrOutput'
      instanceSegmentation:
        description: Instance segmentation output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaInstanceSegmentationOutput'
      semanticSegmentation:
        description: Semantic segmentation output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaSemanticSegmentationOutput'
      textToImage:
        description: Text to image output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaTextToImageOutput'
      imageToImage:
        description: Image to image output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaImageToImageOutput'
      textGeneration:
        description: Text generation output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaTextGenerationOutput'
      textGenerationChat:
        description: Conversational text generation output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaTextGenerationChatOutput'
      visualQuestionAnswering:
        description: Visual question answering output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaVisualQuestionAnsweringOutput'
      unspecified:
        description: Unspecified task output.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaUnspecifiedOutput'
    description: TaskOutput represents the result of an AI task performed by a model.
  v1alphaTextGenerationChatInput:
    type: object
    properties:
      prompt:
        type: string
        description: Prompt text.
      promptImages:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaPromptImage'
        description: Prompt images.
      chatHistory:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaMessage'
        description: Chat history.
      systemMessage:
        type: string
        description: System message, which sets the behaviour of the assistant.
      maxNewTokens:
        type: integer
        format: int32
        description: Maximum number of generation tokens.
      temperature:
        type: number
        format: float
        description: Sampling temperature.
      topK:
        type: integer
        format: int32
        description: |-
          Sampling Top K, number of tokens at the top from which the model will
          sample.
      seed:
        type: integer
        format: int32
        description: Seed.
      extraParams:
        type: object
        description: Extra parameters.
    description: TextGenerationChatInput represents the input of a text generation chat task.
    required:
      - prompt
  v1alphaTextGenerationChatOutput:
    type: object
    properties:
      text:
        type: string
        description: Text generated by the model.
        readOnly: true
    description: TextGenerationChatOutput contains the result of a text generation chat task.
  v1alphaTextGenerationInput:
    type: object
    properties:
      prompt:
        type: string
        description: Prompt text.
      promptImages:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaPromptImage'
        description: Prompt images.
      chatHistory:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaMessage'
        description: Chat history.
      systemMessage:
        type: string
        description: System message, which sets the behaviour of the assistant.
      maxNewTokens:
        type: integer
        format: int32
        description: Maximum number of generation tokens.
      temperature:
        type: number
        format: float
        description: Sampling temperature.
      topK:
        type: integer
        format: int32
        description: |-
          Sampling Top K, number of tokens at the top from which the model will
          sample.
      seed:
        type: integer
        format: int32
        description: Seed.
      extraParams:
        type: object
        description: Extra parameters.
    description: TextGenerationInput represents the input of a text generation task.
    required:
      - prompt
  v1alphaTextGenerationOutput:
    type: object
    properties:
      text:
        type: string
        description: Text generated by the model.
        readOnly: true
    description: TextGenerationOutput contains the result of a text generation task.
  v1alphaTextToImageInput:
    type: object
    properties:
      prompt:
        type: string
        description: Prompt text.
      promptImageUrl:
        type: string
        description: Image URL.
      promptImageBase64:
        type: string
        description: Base64-encoded image.
      steps:
        type: integer
        format: int32
        description: Steps, defaults to 5.
      cfgScale:
        type: number
        format: float
        description: Guidance scale, defaults to 7.5.
      seed:
        type: integer
        format: int32
        description: Seed, defaults to 0.
      samples:
        type: integer
        format: int32
        description: Number of generated samples, default is 1.
      extraParams:
        type: object
        description: Extra parameters.
    description: TextToImageInput represents the input of a text-to-image task.
    required:
      - prompt
  v1alphaTextToImageOutput:
    type: object
    properties:
      images:
        type: array
        items:
          type: string
        description: A list of generated images, encoded in base64.
        readOnly: true
    description: TextToImageOutput contains the result of a text-to-image task.
  v1alphaTriggerAsyncNamespaceLatestModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncNamespaceLatestModelResponse contains the information to access the
      status of an asynchronous model inference.
  v1alphaTriggerAsyncNamespaceModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncNamespaceModelResponse contains the information to access the
      status of an asynchronous model inference.
  v1alphaTriggerAsyncOrganizationLatestModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncOrganizationLatestModelResponse contains the information to access the
      status of an asynchronous model inference.
  v1alphaTriggerAsyncOrganizationModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncOrganizationModelResponse contains the information to access the
      status of an asynchronous model inference.
  v1alphaTriggerAsyncUserLatestModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncUserLatestModelResponse contains the information to access the
      status of an asynchronous model inference.
  v1alphaTriggerAsyncUserModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncUserModelResponse contains the information to access the
      status of an asynchronous model inference.
  v1alphaTriggerNamespaceLatestModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerNamespaceLatestModelBinaryFileUploadResponse contains the model inference results.
    required:
      - task
      - taskOutputs
  v1alphaTriggerNamespaceLatestModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerNamespaceLatestModelResponse contains the model inference results.
  v1alphaTriggerNamespaceModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
      version:
        type: string
        title: Model version
    description: TriggerNamespaceModelBinaryFileUploadResponse contains the model inference results.
    required:
      - task
      - taskOutputs
      - version
  v1alphaTriggerNamespaceModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerNamespaceModelResponse contains the model inference results.
  v1alphaTriggerOrganizationLatestModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerOrganizationLatestModelResponse contains the model inference results.
  v1alphaTriggerOrganizationModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerOrganizationModelBinaryFileUploadResponse contains the model inference results.
    required:
      - task
      - taskOutputs
  v1alphaTriggerOrganizationModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerOrganizationModelResponse contains the model inference results.
  v1alphaTriggerUserLatestModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerUserLatestModelResponse contains the model inference results.
  v1alphaTriggerUserModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
      version:
        type: string
        title: Model version
    description: TriggerUserModelBinaryFileUploadResponse contains the model inference results.
    required:
      - task
      - taskOutputs
      - version
  v1alphaTriggerUserModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/v1alphaTask'
      taskOutputs:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaTaskOutput'
        description: Model inference outputs.
    description: TriggerUserModelResponse contains the model inference results.
  v1alphaUndeployNamespaceModelAdminResponse:
    type: object
    title: UndeployNamespaceModelAdminResponse represents a response for a undeployed model
  v1alphaUndeployOrganizationModelAdminResponse:
    type: object
    title: UndeployOrganizationModelAdminResponse represents a response for a undeployed model
  v1alphaUndeployUserModelAdminResponse:
    type: object
    title: UndeployUserModelAdminResponse represents a response for a undeployed model
  v1alphaUnspecifiedInput:
    type: object
    properties:
      rawInputs:
        type: array
        items:
          type: object
        description: A list of values for the task.
    description: UnspecifiedInput represents the input of an unspecified task.
  v1alphaUnspecifiedOutput:
    type: object
    properties:
      rawOutputs:
        type: array
        items:
          type: object
        description: The task outputs.
        readOnly: true
    description: UnspecifiedOutput contains the result of an unspecified task.
  v1alphaUpdateNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The updated model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: UpdateNamespaceModelResponse contains the updated model.
  v1alphaUpdateOrganizationModelResponse:
    type: object
    properties:
      model:
        description: The updated model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: UpdateOrganizationModelResponse contains the updated model.
  v1alphaUpdateUserModelResponse:
    type: object
    properties:
      model:
        description: The updated model resource.
        allOf:
          - $ref: '#/definitions/v1alphaModel'
    description: UpdateUserModelResponse contains the updated model.
  v1alphaVisualQuestionAnsweringInput:
    type: object
    properties:
      prompt:
        type: string
        description: Prompt text.
      promptImages:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaPromptImage'
        description: Prompt images.
      chatHistory:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alphaMessage'
        description: Chat history.
      systemMessage:
        type: string
        description: System message, which sets the behaviour of the assistant.
      maxNewTokens:
        type: integer
        format: int32
        description: Maximum number of generation tokens.
      temperature:
        type: number
        format: float
        description: Sampling temperature.
      topK:
        type: integer
        format: int32
        description: |-
          Sampling Top K, number of tokens at the top from which the model will
          sample.
      seed:
        type: integer
        format: int32
        description: Seed.
      extraParams:
        type: object
        description: Extra parameters.
    description: |-
      VisualQuestionAnsweringInput represents the input of a visual
      question-answering task.
    required:
      - prompt
  v1alphaVisualQuestionAnsweringOutput:
    type: object
    properties:
      text:
        type: string
        description: The text generated by the model.
        readOnly: true
    description: |-
      VisualQuestionAnsweringOutput contains the result of a visual
      question-answering task.
  v1alphaWatchNamespaceLatestModelResponse:
    type: object
    properties:
      state:
        description: State.
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      message:
        type: string
        title: Detail description of the state
    description: WatchNamespaceLatestModelResponse contains the state of the latest model version.
  v1alphaWatchNamespaceModelResponse:
    type: object
    properties:
      state:
        description: State.
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      message:
        type: string
        title: Detail description of the state
    description: WatchNamespaceModelResponse contains the state of a model.
  v1alphaWatchOrganizationLatestModelResponse:
    type: object
    properties:
      state:
        description: State.
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      message:
        type: string
        title: Detail description of the state
    description: WatchOrganizationLatestModelResponse contains the state of the latest model version.
  v1alphaWatchOrganizationModelResponse:
    type: object
    properties:
      state:
        description: State.
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      message:
        type: string
        title: Detail description of the state
    description: WatchOrganizationModelResponse contains the state of a model.
  v1alphaWatchUserLatestModelResponse:
    type: object
    properties:
      state:
        description: State.
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      message:
        type: string
        title: Detail description of the state
    description: WatchUserLatestModelResponse contains the state of the latest model version.
  v1alphaWatchUserModelResponse:
    type: object
    properties:
      state:
        description: State.
        allOf:
          - $ref: '#/definitions/modelv1alphaState'
      message:
        type: string
        title: Detail description of the state
    description: WatchUserModelResponse contains the state of a model.
  v1betaOrganization:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the organization, defined by its ID.
          - Format: `organization/{organization.id}`.
        readOnly: true
      uid:
        type: string
        description: Organization UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      owner:
        description: The user that owns the organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaUser'
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/v1betaOrganizationProfile'
      permission:
        title: Permission
        readOnly: true
        allOf:
          - $ref: '#/definitions/mgmtv1betaPermission'
    description: |-
      Organizations group several users. As entities, they can own resources such
      as pipelines or releases.
    required:
      - profile
  v1betaOrganizationProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the organization's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: OrganizationProfile describes the public data of an organization.
  v1betaOwner:
    type: object
    properties:
      user:
        description: User.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaUser'
      organization:
        description: Organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaOrganization'
    description: Owner is a wrapper for User and Organization, used to embed owner information in other resources.
  v1betaUser:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/v1betaUserProfile'
    description: |-
      User describes an individual that interacts with Instill AI. It doesn't
      contain any private information about the user.
  v1betaUserProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      companyName:
        type: string
        description: Company name.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the user's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: UserProfile describes the public data of a user.
securityDefinitions:
  Bearer:
    type: apiKey
    description: Enter the token with the `Bearer ` prefix, e.g. `Bearer abcde12345`
    name: Authorization
    in: header
    x-default: Bearer instill_sk_***
security:
  - Bearer: []
externalDocs:
  description: More about Instill AI
  url: https://www.instill.tech/docs
