swagger: "2.0"
info:
  title: "\U0001F4A7 VDP"
  description: VDP endpoints to manage pipeline resources
  version: v0.41.0-beta
  contact:
    name: Instill AI
    url: https://github.com/instill-ai
    email: hello@instill.tech
  license:
    name: Elastic License 2.0 (ELv2)
    url: https://github.com/instill-ai/protobufs/blob/main/LICENSE
tags:
  - name: Component
    description: Component endpoints
  - name: Pipeline
    description: Pipeline endpoints
  - name: Release
    description: Pipeline Release endpoints
  - name: Trigger
    description: Pipeline Trigger endpoints
  - name: Secret
    description: Namespace Secret endpoints
  - name: Integration
    description: Namespace Integration endpoints
  - name: Utils
    description: Utils endpoints
host: api.instill.tech
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1beta/pipelines:
    get:
      summary: List accessible pipelines
      description: Returns a paginated list of pipelines that are visible to the requester.
      operationId: PipelinePublicService_ListPipelines
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListPipelinesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of pipelines to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
            - Example:
            `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
          in: query
          required: false
          type: string
        - name: showDeleted
          description: Include soft-deleted pipelines in the result.
          in: query
          required: false
          type: boolean
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the user can see the pipeline.
             - VISIBILITY_PUBLIC: Other users can see the pipeline.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
  /v1beta/namespaces/{namespaceId}/pipelines:
    get:
      summary: List namespace pipelines
      description: Returns a paginated list of pipelines of a namespace
      operationId: PipelinePublicService_ListNamespacePipelines
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListNamespacePipelinesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of pipelines to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
            - Example:
            `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
          in: query
          required: false
          type: string
        - name: showDeleted
          description: Include soft-deleted pipelines in the result.
          in: query
          required: false
          type: boolean
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the user can see the pipeline.
             - VISIBILITY_PUBLIC: Other users can see the pipeline.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
    post:
      summary: Create a new pipeline
      description: Creates a new pipeline under a namespace.
      operationId: PipelinePublicService_CreateNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaCreateNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: The namespace that creates the pipeline.
          in: path
          required: true
          type: string
        - name: pipeline
          description: The properties of the pipeline to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1betaPipeline'
      tags:
        - Pipeline
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}:
    get:
      summary: Get a pipeline
      description: Returns the details of a pipeline.
      operationId: PipelinePublicService_GetNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaGetNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
      tags:
        - Pipeline
    delete:
      summary: Delete a pipeline
      description: |-
        Deletes a pipeline, accesing it by its resource name, which is defined by
        the parent namespace and the ID of the pipeline. The authenticated namespace must be
        the parent of the pipeline in order to delete it.
      operationId: PipelinePublicService_DeleteNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaDeleteNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
      tags:
        - Pipeline
    patch:
      summary: Update a pipeline
      description: |-
        Udpates a pipeline, accessing it by its resource name, which is defined by
        the parent namespace and the ID of the pipeline. The authenticated namespace must be
        the parent of the pipeline in order to modify it.

        In REST requests, only the supplied pipeline fields will be taken into
        account when updating the resource.
      operationId: PipelinePublicService_UpdateNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaUpdateNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: pipeline
          description: The pipeline fields that will replace the existing ones.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1betaPipeline'
      tags:
        - Pipeline
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/validate:
    post:
      summary: Validate a pipeline
      description: |-
        Validates a pipeline by its resource name, which is defined by the parent
        namespace and the ID of the pipeline.

        Validation checks the recipe of the pipeline and the status of its components.
      operationId: PipelinePublicService_ValidateNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaValidateNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceValidateNamespacePipelineBody'
      tags:
        - Pipeline
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/rename:
    post:
      summary: Rename a pipeline
      description: |-
        Updates the ID of a pipeline. Since this is an output-only field, a custom
        method is required to modify it.

        The pipeline name will be updated accordingly, as it is  composed by the
        parent namespace and ID of the pipeline (e.g.
        `namespaces/luigi/pipelines/pizza-recipe-generator`).

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_RenameNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaRenameNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceRenameNamespacePipelineBody'
      tags:
        - Pipeline
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/clone:
    post:
      summary: Clone a pipeline
      description: |-
        Clones a pipeline owned by a namespace. The new pipeline may have a different
        parent, and this can be either a namespace or an organization.
      operationId: PipelinePublicService_CloneNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaCloneNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceCloneNamespacePipelineBody'
      tags:
        - Pipeline
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger:
    post:
      summary: Trigger a pipeline
      description: |-
        Triggers the execution of a pipeline synchronously, i.e., the result is
        sent back to the namespace right after the data is processed. This method is
        intended for real-time inference when low latency is of concern.

        The pipeline is identified by its resource name, formed by the parent namespace
        and ID of the pipeline.

        For more information, see [Run NamespacePipeline](https://www.instill.tech/docs/vdp/run).
      operationId: PipelinePublicService_TriggerNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaTriggerNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceTriggerNamespacePipelineBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger-stream:
    post:
      summary: Trigger a pipeline via streaming
      description: |-
        Triggers the execution of a pipeline asynchronously and streams back the response.
        This method is intended for real-time inference when low latency is of concern
        and the response needs to be processed incrementally.

        The pipeline is identified by its resource name, formed by the parent namespace
        and ID of the pipeline.
      operationId: PipelinePublicService_TriggerNamespacePipelineWithStream
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/v1betaTriggerNamespacePipelineWithStreamResponse'
              error:
                $ref: '#/definitions/googlerpcStatus'
            title: Stream result of v1betaTriggerNamespacePipelineWithStreamResponse
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceTriggerNamespacePipelineWithStreamBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger-async:
    post:
      summary: Trigger a pipeline asynchronously
      description: |-
        Triggers the execution of a pipeline asynchronously, i.e., the result
        contains the necessary information to access the result and status of the
        operation. This method is intended for cases that require long-running
        workloads.

        The pipeline is identified by its resource name, formed by the parent namespace
        and ID of the pipeline.

        For more information, see [Run NamespacePipeline](https://www.instill.tech/docs/vdp/run).
      operationId: PipelinePublicService_TriggerAsyncNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaTriggerAsyncNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceTriggerAsyncNamespacePipelineBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases:
    get:
      summary: List the releases in a pipeline
      description: |-
        Lists the commited versions of a pipeline, identified by its resource
        name, which is formed by the parent namespace and ID of the pipeline.
      operationId: PipelinePublicService_ListNamespacePipelineReleases
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListNamespacePipelineReleasesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of releases to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: showDeleted
          description: Include soft-deleted pipelines in the result.
          in: query
          required: false
          type: boolean
      tags:
        - Release
    post:
      summary: Create a pipeline release
      description: |-
        Commits the version of a pipeline, identified by its resource name, which
        is formed by the parent namespace and ID of the pipeline.

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_CreateNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaCreateNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: release
          description: The release information.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1betaPipelineRelease'
      tags:
        - Release
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}:
    get:
      summary: Get a pipeline release
      description: |-
        Gets the details of a pipeline release, where the pipeline is identified
        by its resource name, formed by its parent namespace and ID.
      operationId: PipelinePublicService_GetNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaGetNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
      tags:
        - Release
    delete:
      summary: Delete a pipeline release
      description: |-
        Deletes a pipeline release, where the pipeline is identified by its
        resource name, formed by its parent namespace and ID.

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_DeleteNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaDeleteNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
      tags:
        - Release
    patch:
      summary: Update a pipeline release
      description: |-
        Updates the details of a pipeline release, where the pipeline is
        identified by its resource name, formed by its parent namespace and ID.

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_UpdateNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaUpdateNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: release
          description: |-
            The pipeline release fields that will replace the existing ones.
            A pipeline release resource to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1betaPipelineRelease'
      tags:
        - Release
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/clone:
    post:
      summary: Clone a pipeline release
      description: |-
        Clones a pipeline release owned by a namespace. The new pipeline may have a different
        parent, and this can be either a namespace or an organization.
      operationId: PipelinePublicService_CloneNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaCloneNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceCloneNamespacePipelineReleaseBody'
      tags:
        - Release
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/trigger:
    post:
      summary: Trigger a pipeline release
      description: |-
        Triggers the synchronous execution of of a pipeline. While the trigger
        endpoint (where the release version isn't specified) triggers the pipeline
        at its latest release, this method allows the client to specified any
        committed release.

        The pipeline is identified by its resource name, formed by its parent namespace
        and ID.
      operationId: PipelinePublicService_TriggerNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaTriggerNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceTriggerNamespacePipelineReleaseBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/trigger-async:
    post:
      summary: Trigger a pipeline release asynchronously
      description: |-
        Triggers the asynchronous execution of of a pipeline. While the trigger
        endpoint (where the release version isn't specified) triggers the pipeline
        at its latest release, this method allows the client to specified any
        committed release.

        The pipeline is identified by its resource name, formed by its parent namespace
        and ID.
      operationId: PipelinePublicService_TriggerAsyncNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaTriggerAsyncNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelinePublicServiceTriggerAsyncNamespacePipelineReleaseBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/secrets:
    get:
      summary: List secrets
      description: |-
        Returns a paginated list of secrets that belong to the specified
        namespace.
      operationId: PipelinePublicService_ListNamespaceSecrets
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListNamespaceSecretsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of secrets to return. If this parameter is unspecified,
            at most 10 pipelines will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page secret.
          in: query
          required: false
          type: string
      tags:
        - Secret
    post:
      summary: Create a secret
      description: Creates a new secret under the parenthood of an namespace.
      operationId: PipelinePublicService_CreateNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaCreateNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secret
          description: The properties of the secret to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1betaSecret'
      tags:
        - Secret
  /v1beta/namespaces/{namespaceId}/secrets/{secretId}:
    get:
      summary: Get a secret
      description: |-
        Returns the details of an namespace-owned secret by its resource name,
        which is defined by the parent namespace and the ID of the secret.
      operationId: PipelinePublicService_GetNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaGetNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secretId
          description: Secret ID
          in: path
          required: true
          type: string
      tags:
        - Secret
    delete:
      summary: Delete a secret
      description: |-
        Deletes a secret, accesing it by its resource name, which is defined by
        the parent namespace and the ID of the secret.
      operationId: PipelinePublicService_DeleteNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaDeleteNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secretId
          description: Secret ID
          in: path
          required: true
          type: string
      tags:
        - Secret
    patch:
      summary: Update a secret
      description: |-
        Udpates a secret, accessing it by its resource name, which is defined by

        In REST requests, only the supplied secret fields will be taken into
        account when updating the resource.
      operationId: PipelinePublicService_UpdateNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaUpdateNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secretId
          description: Secret ID
          in: path
          required: true
          type: string
        - name: secret
          description: The secret fields to update.
          in: body
          required: true
          schema:
            $ref: '#/definitions/v1betaSecret'
      tags:
        - Secret
  /v1beta/component-definitions:
    get:
      summary: List component definitions
      description: |-
        Returns a paginated list of component definitions, regardless their type.
        This offers a single source of truth, with pagination and filter
        capabilities, for the components that might be used in a VDP pipeline.
      operationId: PipelinePublicService_ListComponentDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListComponentDefinitionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of component definitions to return. If this parameter
            is unspecified, at most 10 definitions will be returned. The cap value for
            this parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (removes the `spec`
            field).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `component_type="COMPONENT_TYPE_AI"`.
            - Example: `tasks:"TASK_TEXT_GENERATION"`.
          in: query
          required: false
          type: string
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Component
  /v1beta/operations/{operationId}:
    get:
      summary: Get the details of a long-running operation
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations such as asynchronous pipeline triggers.
      operationId: PipelinePublicService_GetOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaGetOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: operationId
          description: |-
            The name of the operation resource. Asynchronous methods will contain this
            information in their response.
          in: path
          required: true
          type: string
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/runs:
    get:
      summary: List Pipeline Runs
      description: |-
        Returns a paginated list of runs for a given pipeline. When the requester
        is the owner of the pipeline, they will be able to all the pipeline runs,
        regardless the requester. Other requesters will only be able to see the
        runs requested by themselves.
      operationId: PipelinePublicService_ListPipelineRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListPipelineRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: The ID of the owner of the pipeline.
          in: path
          required: true
          type: string
        - name: pipelineId
          description: The ID of the pipeline for which the runs will be listed.
          in: path
          required: true
          type: string
        - name: page
          description: The page number to retrieve.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          description: |-
            The maximum number of items per page to return. The default and cap values
            are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: view
          description: |-
            View allows clients to specify the desired run view in the response.
            The basic view excludes input / output data.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Trigger
  /v1beta/pipeline-runs/{pipelineRunId}/component-runs:
    get:
      summary: List Component runs
      description: Returns the information of each component execution within a pipeline run.
      operationId: PipelinePublicService_ListComponentRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListComponentRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: pipelineRunId
          description: The unique identifier of the pipeline run to list component runs for.
          in: path
          required: true
          type: string
        - name: page
          description: The page number to retrieve.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          description: |-
            The maximum number of items per page to return. The default and cap values
            are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired run view in the response.
            The basic view excludes input / output data.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
      tags:
        - Trigger
  /v1beta/namespaces/{namespaceId}/connections:
    get:
      summary: List namespace connections
      description: Returns a paginated list of connections created by a namespace.
      operationId: PipelinePublicService_ListNamespaceConnections
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListNamespaceConnectionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: pageSize
          description: The maximum number of items to return. The default and cap values are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token. By default, the first page will be returned.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
            The following filters are supported:
            - `integrationId`
            - `qConnection` (fuzzy search on connection ID, integration title or vendor)

            **Examples**:
            - List connections where app name, vendor or connection ID match `googl`: `q="googl"`.
            - List connections where the component type is `openai` (e.g. to setup a connector within a pipeline): `integrationId="openai"`.
          in: query
          required: false
          type: string
      tags:
        - Integration
  /v1beta/namespaces/{namespaceId}/connections/{connectionId}:
    get:
      summary: Get a namespace connection
      description: Returns the details of a connection.
      operationId: PipelinePublicService_GetNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaGetNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired view in the response.

             - VIEW_BASIC: Default view.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Integration
    delete:
      summary: Delete a connection
      description: Deletes a connection.
      operationId: PipelinePublicService_DeleteNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaDeleteNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
      tags:
        - Integration
  /v1beta/namespaces/{connection.namespaceId}/connections:
    post:
      summary: Create a connection
      description: Creates a connection under the ownership of a namespace.
      operationId: PipelinePublicService_CreateNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaCreateNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: connection.namespaceId
          description: ID of the namespace owning the connection.
          in: path
          required: true
          type: string
        - name: connection
          description: Properties of the connection to be created.
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: UUID-formatted unique identifier.
                readOnly: true
              id:
                type: string
                description: ID.
              integrationId:
                type: string
                description: |-
                  Integration ID. It determines for which type of components can reference
                  this connection.
              integrationTitle:
                type: string
                description: |-
                  Integration title. This helps the console display the results grouped by
                  integration ID without needing an extra call to fetch title by integration
                  ID.
                readOnly: true
              method:
                description: |-
                  Connection method. It references the setup schema provided by the
                  integration.
                allOf:
                  - $ref: '#/definitions/ConnectionMethod'
              setup:
                type: object
                description: |-
                  Connection details. This field is required on creation, optional on view.
                  When viewing the connection details, the setup values will be redacted.
              scopes:
                type: array
                items:
                  type: string
                description: |-
                  A list of scopes that identify the resources that the connection will be
                  able to access on the user's behalf. This is typically passed on creation
                  when the setup has been generated through an OAuth flow with a limited set
                  of scopes.
              identity:
                type: string
                description: |-
                  When the connection method is METHOD_OAUTH, this field will hold the
                  identity (e.g., email, username) with which the access token has been
                  generated.
              oAuthAccessDetails:
                type: object
                description: |-
                  When the connection method is METHOD_OAUTH, the access token might come
                  with some extra information that might vary across vendors. This
                  information is passed as connection metadata.
              view:
                title: |-
                  View defines how the connection is presented. The following fields are
                  only shown in the FULL view:
                  - setup
                  - scopes
                  - oAuthAccessDetails
                readOnly: true
                allOf:
                  - $ref: '#/definitions/vdppipelinev1betaView'
              createTime:
                type: string
                format: date-time
                description: Creation timestamp.
                readOnly: true
              updateTime:
                type: string
                format: date-time
                description: Last update timestamp.
                readOnly: true
            title: Properties of the connection to be created.
            required:
              - id
              - integrationId
              - method
              - setup
      tags:
        - Integration
  /v1beta/namespaces/{connection.namespaceId}/connections/{connectionId}:
    patch:
      summary: Update a connection
      description: Updates a connection with the supplied connection fields.
      operationId: PipelinePublicService_UpdateNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaUpdateNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: connection.namespaceId
          description: ID of the namespace owning the connection.
          in: path
          required: true
          type: string
        - name: connectionId
          description: ID of the connection to be updated, as present in the database.
          in: path
          required: true
          type: string
        - name: connection
          description: |-
            Connection object with the new properties to be updated. Immutable and
            output-only fields will be ignored. The Setup property must be updated
            in block (no partial update is supported).
          in: body
          required: true
          schema:
            type: object
            properties:
              uid:
                type: string
                description: UUID-formatted unique identifier.
                readOnly: true
              id:
                type: string
                description: ID.
              integrationId:
                type: string
                description: |-
                  Integration ID. It determines for which type of components can reference
                  this connection.
              integrationTitle:
                type: string
                description: |-
                  Integration title. This helps the console display the results grouped by
                  integration ID without needing an extra call to fetch title by integration
                  ID.
                readOnly: true
              method:
                description: |-
                  Connection method. It references the setup schema provided by the
                  integration.
                allOf:
                  - $ref: '#/definitions/ConnectionMethod'
              setup:
                type: object
                description: |-
                  Connection details. This field is required on creation, optional on view.
                  When viewing the connection details, the setup values will be redacted.
              scopes:
                type: array
                items:
                  type: string
                description: |-
                  A list of scopes that identify the resources that the connection will be
                  able to access on the user's behalf. This is typically passed on creation
                  when the setup has been generated through an OAuth flow with a limited set
                  of scopes.
              identity:
                type: string
                description: |-
                  When the connection method is METHOD_OAUTH, this field will hold the
                  identity (e.g., email, username) with which the access token has been
                  generated.
              oAuthAccessDetails:
                type: object
                description: |-
                  When the connection method is METHOD_OAUTH, the access token might come
                  with some extra information that might vary across vendors. This
                  information is passed as connection metadata.
              view:
                title: |-
                  View defines how the connection is presented. The following fields are
                  only shown in the FULL view:
                  - setup
                  - scopes
                  - oAuthAccessDetails
                readOnly: true
                allOf:
                  - $ref: '#/definitions/vdppipelinev1betaView'
              createTime:
                type: string
                format: date-time
                description: Creation timestamp.
                readOnly: true
              updateTime:
                type: string
                format: date-time
                description: Last update timestamp.
                readOnly: true
            title: |-
              Connection object with the new properties to be updated. Immutable and
              output-only fields will be ignored. The Setup property must be updated
              in block (no partial update is supported).
            required:
              - id
              - integrationId
              - method
              - setup
      tags:
        - Integration
  /v1beta/namespaces/{namespaceId}/connections/{connectionId}/test:
    post:
      summary: Test a connection
      description: |-
        Makes a request to the 3rd party app that the connection is configured to
        communicate with, and checks the result of the call. If the test fails,
        the response status and error message will provide more information about
        the failure.

        Note that this action might affect the quota or billing of the integrated
        account in the 3rd party app.
      operationId: PipelinePublicService_TestNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaTestNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
      tags:
        - Integration
  /v1beta/namespaces/{namespaceId}/connections/{connectionId}/referenced-pipelines:
    get:
      summary: List pipelines that reference a connection
      description: |-
        Returns a paginated list with the IDs of the pipelines that reference a
        given connection. All the pipelines will belong to the same namespace as
        the connection.
      operationId: PipelinePublicService_ListPipelineIDsByConnectionID
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListPipelineIDsByConnectionIDResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
        - name: pageSize
          description: The maximum number of items to return. The default and cap values are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token. By default, the first page will be returned.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
            The following filters are supported:
            - `q` (fuzzy search on pipeline ID)
          in: query
          required: false
          type: string
      tags:
        - Integration
  /v1beta/integrations:
    get:
      summary: List integrations
      description: Returns a paginated list of available integrations.
      operationId: PipelinePublicService_ListIntegrations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaListIntegrationsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: pageSize
          description: The maximum number of items to return. The default and cap values are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token. By default, the first page will be returned.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
            The following filters are supported:
            - `qIntegration` (fuzzy search on title or vendor)

            **Examples**:
            - List integrations where app name or vendor match `googl`: `q="googl"`.
          in: query
          required: false
          type: string
      tags:
        - Integration
  /v1beta/integrations/{integrationId}:
    get:
      summary: Get an integration
      description: Returns the details of an integration.
      operationId: PipelinePublicService_GetIntegration
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/v1betaGetIntegrationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/googlerpcStatus'
      parameters:
        - name: integrationId
          description: Integration ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired view in the response.

             - VIEW_BASIC: Default view.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Integration
definitions:
  ComponentDefinitionReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_OPEN_FOR_CONTRIBUTION
      - RELEASE_STAGE_COMING_SOON
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GA
    description: |-
      - RELEASE_STAGE_OPEN_FOR_CONTRIBUTION: This component is unimplemented and community contributions are welcome
      for this component.

      It is recommended that the major and minor versions for definitions at
      this release stage is kept at 0, e.g., `0.0.1`, `0.0.4`, etc.
       - RELEASE_STAGE_COMING_SOON: The implementation of this component is planned and will be tackled by
      the Instill AI team.

      It is recommended that the major and minor versions for definitions at
      this release stage is kept at 0, e.g., `0.0.1`, `0.0.4`, etc.
       - RELEASE_STAGE_ALPHA: Initial implementation intended to gather feedback and issues from early
      adopters. Alpha releases are discouraged for production use cases.

      The `version` field in the definition must have `alpha` as its first
      pre-release identifier, e.g., `0.1.0-alpha`, `0.1.3-alpha.1`.
       - RELEASE_STAGE_BETA: The component has reached stability and no backwards incompatible
      changes are expected. Before reaching general availability, it should be
      validated by a broader group of users. Some fixes might be added during
      this process.

      The `version` field in the definition must have `beta` as its first
      pre-release identifier, e.g., `0.1.0-beta`, `0.1.3-beta.1`.
       - RELEASE_STAGE_GA: Generally available - ready for use in production and fully supported by
      Instill AI.
    title: |-
      ReleaseStage defines the release stage of a component. This is used to
      group components with the same pre-relase groups (e.g. `0.1.0-beta`,
      `0.1.0-beta.1` -> `RELEASE_STAGE_BETA`) and to include other "in progress"
      (i.e. coming soon, open for contributions) stages that may not be relevant
      within semantic versioning.
      See the documentation of each value for potential constraints between
      `version` and `release_stage` fields.`
  ComponentDefinitionSpec:
    type: object
    properties:
      componentSpecification:
        type: object
        description: Component specification.
      dataSpecifications:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1betaDataSpecification'
        description: |-
          Data specifications.
          The key represents the task, and the value is the corresponding data_specification.
    description: Spec represents a specification data model.
    required:
      - componentSpecification
      - dataSpecifications
  ConnectionMethod:
    type: string
    enum:
      - METHOD_DICTIONARY
      - METHOD_OAUTH
    description: |-
      Method defines how the connection is set up.

       - METHOD_DICTIONARY: Key-value collection. The user is responsible of fetching the connection
      details from the 3rd party service.
       - METHOD_OAUTH: Access token created via OAuth 2.0 authorization.
  EndpointsWebhookEndpoint:
    type: object
    properties:
      url:
        type: string
        description: Webhook URL.
        readOnly: true
      description:
        type: string
        description: Description.
        readOnly: true
    description: WebhookEndpoint describe a webhook endpoint.
  IntegrationLink:
    type: object
    properties:
      text:
        type: string
        description: Text contains the message to display.
        readOnly: true
      url:
        type: string
        description: URL contains the reference the link will redirect to.
        readOnly: true
    description: Link contains the information to display an reference to an external URL.
  IntegrationOAuthConfig:
    type: object
    properties:
      authUrl:
        type: string
        description: |-
          The URL of the OAuth server to initiate the authentication and
          authorization process.
        readOnly: true
      accessUrl:
        type: string
        description: |-
          The URL of the OAuth server to exchange the authorization code for an
          access token.
        readOnly: true
      scopes:
        type: array
        items:
          type: string
        description: |-
          A list of scopes that identify the resources that the connection will be
          able to access on the user's behalf.
        readOnly: true
    description: |-
      OAuthConfig contains the configuration parameters for fetching an access
      token via an OAuth 2.0 flow.
  IntegrationSetupSchema:
    type: object
    properties:
      method:
        description: The connection method, which will define the fields in the schema.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ConnectionMethod'
      schema:
        type: object
        description: |-
          The connection setup field definitions. Each integration will require
          different data to connect to the 3rd party app.
        readOnly: true
    description: |-
      SetupSchema defines the schema for a connection setup.
      This message is deprecated.
  PipelinePublicServiceCloneNamespacePipelineBody:
    type: object
    properties:
      target:
        type: string
        title: |-
          The target pipeline. It can be under a user or an organization
          namespace, so the following formats are accepted:
          - `{user.id}/{pipeline.id}`
          - `{organization.id}/{pipeline.id}`
      description:
        type: string
        description: Pipeline description.
      sharing:
        description: Pipeline sharing information.
        allOf:
          - $ref: '#/definitions/v1betaSharing'
    description: |-
      CloneNamespacePipelineRequest represents a request to clone a pipeline owned by a
      user.
    required:
      - target
  PipelinePublicServiceCloneNamespacePipelineReleaseBody:
    type: object
    properties:
      target:
        type: string
        title: |-
          The target pipeline. It can be under a user or an organization
          namespace, so the following formats are accepted:
          - `{user.id}/{pipeline.id}`
          - `{organization.id}/{pipeline.id}`
      description:
        type: string
        description: Pipeline description.
      sharing:
        description: Pipeline sharing information.
        allOf:
          - $ref: '#/definitions/v1betaSharing'
    description: |-
      CloneNamespacePipelineReleaseRequest represents a request to clone a pipeline
      release owned by a user.
    required:
      - target
  PipelinePublicServiceRenameNamespacePipelineBody:
    type: object
    properties:
      newPipelineId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `namespaces/{namespace.id}/pipelines/{new_pipeline_id}`.
    description: |-
      RenameNamespacePipelineRequest represents a request to rename the name of a
      pipeline owned by a namespace.
    required:
      - newPipelineId
  PipelinePublicServiceTriggerAsyncNamespacePipelineBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaTriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineRequest represents a request to trigger a user-owned
      pipeline synchronously.
  PipelinePublicServiceTriggerAsyncNamespacePipelineReleaseBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaTriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineReleaseRequest represents a request to trigger a pinned
      release of a user-owned pipeline asynchronously.
  PipelinePublicServiceTriggerNamespacePipelineBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaTriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineRequest represents a request to trigger a user-owned
      pipeline synchronously.
    required:
      - inputs
      - data
  PipelinePublicServiceTriggerNamespacePipelineReleaseBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaTriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineReleaseRequest represents a request to trigger a pinned
      release of a user-owned pipeline.
  PipelinePublicServiceTriggerNamespacePipelineWithStreamBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaTriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineWithStreamRequest represents a request to trigger a user-owned
      pipeline synchronously and streams back the results.
  PipelinePublicServiceValidateNamespacePipelineBody:
    type: object
    description: |-
      ValidateNamespacePipelineRequest represents a request to validate a pipeline
      owned by a user.
  PipelineStats:
    type: object
    properties:
      numberOfRuns:
        type: integer
        format: int32
        description: Number of pipeline runs.
        readOnly: true
      lastRunTime:
        type: string
        format: date-time
        description: Last run time.
        readOnly: true
      numberOfClones:
        type: integer
        format: int32
        description: Number of times this pipeline has been cloned.
        readOnly: true
    title: Statistic data
  SharingShareCode:
    type: object
    properties:
      user:
        type: string
        description: |-
          Defines which users will be able to access the resource through the
          code. This is a pattern that will be checked against user names.

          For now, the only accepted value is `*/*`.
      code:
        type: string
        description: The public URL that allows users to access the resource.
      enabled:
        type: boolean
        description: Defines whether the sharing option via link is enabled.
      role:
        description: Defines the role users will have over the resource.
        allOf:
          - $ref: '#/definitions/v1betaRole'
    description: ShareCode describes a sharing configuration through a link.
  coremgmtv1betaPermission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the resource can be modified.
        readOnly: true
    description: Permission defines how a resource can be used.
  googlelongrunningOperation:
    type: object
    properties:
      name:
        type: string
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should be a resource name ending with `operations/{unique_id}`.
      metadata:
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        allOf:
          - $ref: '#/definitions/protobufAny'
      done:
        type: boolean
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
      error:
        description: The error result of the operation in case of failure or cancellation.
        allOf:
          - $ref: '#/definitions/googlerpcStatus'
      response:
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        allOf:
          - $ref: '#/definitions/protobufAny'
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
  googlerpcStatus:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/protobufAny'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  mgmtv1betaUser:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/v1betaUserProfile'
    description: |-
      User describes an individual that interacts with Instill AI. It doesn't
      contain any private information about the user.
  protobufAny:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  protobufNullValue:
    type: string
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.
  v1alphaRunSource:
    type: string
    enum:
      - RUN_SOURCE_CONSOLE
      - RUN_SOURCE_API
    description: |-
      RunSource defines the source of a pipeline or model run.

       - RUN_SOURCE_CONSOLE: Run from frontend UI.
       - RUN_SOURCE_API: Run from API or SDK.
  v1alphaRunStatus:
    type: string
    enum:
      - RUN_STATUS_PROCESSING
      - RUN_STATUS_COMPLETED
      - RUN_STATUS_FAILED
      - RUN_STATUS_QUEUED
    description: |-
      RunStatus defines the status of a pipeline or model run.

       - RUN_STATUS_PROCESSING: Run in progress.
       - RUN_STATUS_COMPLETED: Run succeeded.
       - RUN_STATUS_FAILED: Run failed.
       - RUN_STATUS_QUEUED: Run is waiting to be executed.
  v1betaCloneNamespacePipelineReleaseResponse:
    type: object
    description: CloneNamespacePipelineReleaseResponse contains a cloned pipeline.
  v1betaCloneNamespacePipelineResponse:
    type: object
    description: CloneNamespacePipelineResponse contains a cloned pipeline.
  v1betaComponentDefinition:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of the component definition, defined by its ID.
          - Format: `component-definitions/{id}`
        readOnly: true
      uid:
        type: string
        description: Component definition UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Component definition resource ID (used in `name` as the last segment). This
          conforms to RFC-1034, which restricts to letters, numbers, and hyphen,
          with the first character a letter, the last a letter or a number, and a 63
          character maximum.
      title:
        type: string
        description: Component definition title.
        readOnly: true
      documentationUrl:
        type: string
        description: Component definition documentation URL.
        readOnly: true
      icon:
        type: string
        description: |-
          Component definition icon. This is a path that's relative to the root of
          the component implementation (see `source_url`) and that allows
          frontend applications to pull and locate the icons.
        readOnly: true
      spec:
        description: Component definition specification.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ComponentDefinitionSpec'
      type:
        description: Component definition type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaComponentType'
      tombstone:
        type: boolean
        description: |-
          Component definition tombstone. If true, this configuration is permanently
          off. Otherwise, the configuration is active.
        readOnly: true
      public:
        type: boolean
        description: |-
          The public flag determines whether this connector definition is available
          to all workspaces.
        readOnly: true
      custom:
        type: boolean
        description: |-
          Component definition custom flag, i.e., whether this is a custom
          component definition.
        readOnly: true
      vendor:
        type: string
        description: Component definition vendor name.
        readOnly: true
      vendorAttributes:
        type: object
        description: Vendor-specific attributes.
        readOnly: true
      sourceUrl:
        type: string
        description: |-
          Source code URL. This points to the source code where the component is
          implemented.
        readOnly: true
      version:
        type: string
        description: |-
          Component definition version. This is a string that fulfills the SemVer
          specification (e.g. `1.0.0-beta`).
        readOnly: true
      tasks:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaComponentTask'
        description: List of tasks that can be executed by the component.
        readOnly: true
      description:
        type: string
        description: Short description of the component.
        readOnly: true
      releaseStage:
        description: Release stage.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ComponentDefinitionReleaseStage'
    description: ComponentDefinition describes a certain type of Component.
  v1betaComponentDefinitionView:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a component definition is presented.

       - VIEW_BASIC: Default view, only includes basic information (removes the `spec`
      field).
       - VIEW_FULL: Full representation.
  v1betaComponentRun:
    type: object
    properties:
      pipelineRunUid:
        type: string
        description: Links to the parent PipelineRun.
        readOnly: true
      componentId:
        type: string
        description: Unique identifier for each pipeline component.
        readOnly: true
      status:
        description: Completion status of the component.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaRunStatus'
      totalDuration:
        type: integer
        format: int32
        description: Time taken to execute the component in milliseconds.
        readOnly: true
      startTime:
        type: string
        format: date-time
        description: Time when the component started execution.
        readOnly: true
      completeTime:
        type: string
        format: date-time
        description: Time when the component finished execution.
        readOnly: true
      error:
        type: string
        description: Error message if the component failed.
        readOnly: true
      inputsReference:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaFileReference'
        description: Input files for the run.
        readOnly: true
      inputs:
        type: array
        items:
          type: object
        description: Component input parameters.
        readOnly: true
      outputsReference:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaFileReference'
        description: Output files from the run.
        readOnly: true
      outputs:
        type: array
        items:
          type: object
        description: Component inference outputs.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: Credits used of internal accounting metric.
        readOnly: true
    description: ComponentRun represents the execution details of a single component within a pipeline run.
  v1betaComponentTask:
    type: object
    properties:
      name:
        type: string
        description: The task name, e.g. `TASK_TEXT_GENERATION`.
        readOnly: true
      title:
        type: string
        description: Title is the task name in a human-friendly format.
        readOnly: true
      description:
        type: string
        description: Description contains information about the task.
        readOnly: true
    description: |-
      ComponentTask contains information about a task that a component can
      perform.
  v1betaComponentType:
    type: string
    enum:
      - COMPONENT_TYPE_AI
      - COMPONENT_TYPE_DATA
      - COMPONENT_TYPE_OPERATOR
      - COMPONENT_TYPE_APPLICATION
      - COMPONENT_TYPE_GENERIC
    description: |-
      ComponentType defines the component type based on its task features.

       - COMPONENT_TYPE_AI: Connect with an AI model.
       - COMPONENT_TYPE_DATA: Connect with a remote data source.
       - COMPONENT_TYPE_OPERATOR: Manipulate data.
       - COMPONENT_TYPE_APPLICATION: Connect with an external application.
       - COMPONENT_TYPE_GENERIC: Generic.
  v1betaConnection:
    type: object
    properties:
      uid:
        type: string
        description: UUID-formatted unique identifier.
        readOnly: true
      id:
        type: string
        description: ID.
      namespaceId:
        type: string
        description: ID of the namespace owning the connection.
      integrationId:
        type: string
        description: |-
          Integration ID. It determines for which type of components can reference
          this connection.
      integrationTitle:
        type: string
        description: |-
          Integration title. This helps the console display the results grouped by
          integration ID without needing an extra call to fetch title by integration
          ID.
        readOnly: true
      method:
        description: |-
          Connection method. It references the setup schema provided by the
          integration.
        allOf:
          - $ref: '#/definitions/ConnectionMethod'
      setup:
        type: object
        description: |-
          Connection details. This field is required on creation, optional on view.
          When viewing the connection details, the setup values will be redacted.
      scopes:
        type: array
        items:
          type: string
        description: |-
          A list of scopes that identify the resources that the connection will be
          able to access on the user's behalf. This is typically passed on creation
          when the setup has been generated through an OAuth flow with a limited set
          of scopes.
      identity:
        type: string
        description: |-
          When the connection method is METHOD_OAUTH, this field will hold the
          identity (e.g., email, username) with which the access token has been
          generated.
      oAuthAccessDetails:
        type: object
        description: |-
          When the connection method is METHOD_OAUTH, the access token might come
          with some extra information that might vary across vendors. This
          information is passed as connection metadata.
      view:
        title: |-
          View defines how the connection is presented. The following fields are
          only shown in the FULL view:
          - setup
          - scopes
          - oAuthAccessDetails
        readOnly: true
        allOf:
          - $ref: '#/definitions/vdppipelinev1betaView'
      createTime:
        type: string
        format: date-time
        description: Creation timestamp.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Last update timestamp.
        readOnly: true
    description: |-
      Connection contains the parameters to communicate with a 3rd party app. A
      component may reference a connection in their setup. One connection may be
      used by several components and pipelines.
    required:
      - id
      - namespaceId
      - integrationId
      - method
      - setup
  v1betaCreateNamespaceConnectionResponse:
    type: object
    properties:
      connection:
        description: The created connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaConnection'
    description: CreateNamespaceConnectionResponse contains the created connection.
  v1betaCreateNamespacePipelineReleaseResponse:
    type: object
    properties:
      release:
        description: The created pipeline release object.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipelineRelease'
    description: CreateNamespacePipelineReleaseResponse contains the created release.
  v1betaCreateNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The created pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipeline'
    description: CreateNamespacePipelineResponse contains the created pipeline.
  v1betaCreateNamespaceSecretResponse:
    type: object
    properties:
      secret:
        description: The created secret resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaSecret'
    description: CreateNamespaceSecretResponse contains the created secret.
  v1betaDataSpecification:
    type: object
    properties:
      input:
        type: object
        description: JSON schema describing the component input data.
        readOnly: true
      output:
        type: object
        description: JSON schema describing the component output data.
        readOnly: true
    description: DataSpecification describes the JSON schema of component input and output.
  v1betaDeleteNamespaceConnectionResponse:
    type: object
    description: DeleteNamespaceConnectionResponse is an empty response.
  v1betaDeleteNamespacePipelineReleaseResponse:
    type: object
    description: DeleteNamespacePipelineReleaseResponse is an empty response.
  v1betaDeleteNamespacePipelineResponse:
    type: object
    description: DeleteNamespacePipelineResponse is an empty response.
  v1betaDeleteNamespaceSecretResponse:
    type: object
    description: DeleteNamespaceSecretResponse is an empty response.
  v1betaEndpoints:
    type: object
    properties:
      webhooks:
        type: object
        additionalProperties:
          $ref: '#/definitions/EndpointsWebhookEndpoint'
        description: Webhook endpoints.
        readOnly: true
    description: Endpoints describe the endpoints of a pipeline.
  v1betaErrPipelineValidation:
    type: object
    properties:
      location:
        type: string
        title: Location
      error:
        type: string
        title: error
    description: |-
      ErrPipelineValidation contains information about a failed pipeline
      validation.
  v1betaFileReference:
    type: object
    properties:
      name:
        type: string
        description: Name of the file.
      type:
        type: string
        description: Format of the file (e.g., PDF, TXT, JPG).
      size:
        type: string
        format: int64
        description: Size of the file in bytes.
      url:
        type: string
        description: URL of the file (e.g., S3 URL).
    description: FileReference represents metadata for a file.
    required:
      - name
      - type
      - size
      - url
  v1betaGetIntegrationResponse:
    type: object
    properties:
      integration:
        description: The requested integration.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaIntegration'
    description: GetIntegrationResponse contains the requested integration.
  v1betaGetNamespaceConnectionResponse:
    type: object
    properties:
      connection:
        description: The requested connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaConnection'
    description: GetNamespaceConnectionResponse contains the requested connection.
  v1betaGetNamespacePipelineReleaseResponse:
    type: object
    properties:
      release:
        description: The pipeline release resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipelineRelease'
    description: GetNamespacePipelineReleaseResponse contains the requested pipeline release.
  v1betaGetNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipeline'
    description: GetNamespacePipelineResponse contains the requested pipeline.
  v1betaGetNamespaceSecretResponse:
    type: object
    properties:
      secret:
        description: The secret resource.
        allOf:
          - $ref: '#/definitions/v1betaSecret'
    description: GetNamespaceSecretResponse contains the requested secret.
  v1betaGetOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: GetOperationResponse contains the long-running operation details.
  v1betaIntegration:
    type: object
    properties:
      uid:
        type: string
        description: UUID-formatted unique identifier. It references a component definition.
        readOnly: true
      id:
        type: string
        description: |-
          Identifier of the integration, which references a component definition.
          Components with that definition ID will be able to use the connections
          produced by this integration.
        readOnly: true
      title:
        type: string
        description: Title, reflects the app name.
        readOnly: true
      description:
        type: string
        description: Short description of the integrated app.
        readOnly: true
      vendor:
        type: string
        description: Integrated app vendor name.
        readOnly: true
      icon:
        type: string
        description: |-
          Integration icon. This is a path that's relative to the root of
          the component implementation and that allows frontend applications to pull
          and locate the icons.
          See the `icon` field in the `ComponentDefinition` entity for more
          information.
        readOnly: true
      helpLink:
        description: Reference to the vendor's documentation to expand the integration details.
        readOnly: true
        allOf:
          - $ref: '#/definitions/IntegrationLink'
      setupSchema:
        type: object
        description: |-
          The connection setup field definitions. Each integration will require
          different data to connect to the 3rd party app.
        readOnly: true
      oAuthConfig:
        description: |-
          Configuration parameters required for the OAuth setup flow. This field
          will be present only if the integration supports OAuth 2.0.
        readOnly: true
        allOf:
          - $ref: '#/definitions/IntegrationOAuthConfig'
      view:
        title: |-
          View defines how the integration is presented. The following fields are
          only shown in the FULL view:
          - schemas
          - setupSchema
          - oAuthConfig
        readOnly: true
        allOf:
          - $ref: '#/definitions/vdppipelinev1betaView'
      schemas:
        type: array
        items:
          type: object
          $ref: '#/definitions/IntegrationSetupSchema'
        description: |-
          Schemas defines the supported schemas for the connection setup.
          We haven't found a case for a schema that changes on the connection method
          (components don't care about how the connection was built), so the schema
          will be provided in the setupSchema field and the OAuth support and
          configuration will be provided in oAuthConfig.
        readOnly: true
    description: |-
      Integration contains the parameters to create a connection between
      components and 3rd party apps.
  v1betaListComponentDefinitionsResponse:
    type: object
    properties:
      componentDefinitions:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaComponentDefinition'
        description: A list of component definition resources.
      totalSize:
        type: integer
        format: int32
        description: Total number of component definitions.
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
      page:
        type: integer
        format: int32
        description: The requested page offset.
    description: ListComponentDefinitionsResponse contains a list of component definitions.
  v1betaListComponentRunsResponse:
    type: object
    properties:
      componentRuns:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaComponentRun'
        description: The list of component runs.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: The total number of component runs matching the request.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The current page number.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The number of items per page.
        readOnly: true
    description: ListComponentRunsResponse is the response message for ListComponentRuns.
  v1betaListIntegrationsResponse:
    type: object
    properties:
      integrations:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaIntegration'
        description: A list of integrations matching the request parameters.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of items.
        readOnly: true
    description: ListIntegrationsResponse contains a paginated list of integrations.
  v1betaListNamespaceConnectionsResponse:
    type: object
    properties:
      connections:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaConnection'
        description: A list of connections matching the request parameters.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of items.
        readOnly: true
    description: ListNamespaceConnectionsResponse contains a paginated list of connections.
  v1betaListNamespacePipelineReleasesResponse:
    type: object
    properties:
      releases:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipelineRelease'
        description: A list of pipeline release resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of pipeline releases.
        readOnly: true
    description: ListNamespacePipelineReleasesResponse contains a list of pipeline releases.
  v1betaListNamespacePipelinesResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipeline'
        description: A list of pipeline resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of pipelines.
        readOnly: true
    description: ListNamespacePipelinesResponse contains a list of pipelines.
  v1betaListNamespaceSecretsResponse:
    type: object
    properties:
      secrets:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaSecret'
        description: A list of secret resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page secret.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of secret resources.
        readOnly: true
    description: ListNamespaceSecretsResponse contains a list of secrets.
  v1betaListPipelineIDsByConnectionIDResponse:
    type: object
    properties:
      pipelineIds:
        type: array
        items:
          type: string
        description: A list of pipeline IDs matching the request parameters.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of items.
        readOnly: true
    description: ListPipelineIDsByConnectionIDResponse contains a paginated list of integrations.
  v1betaListPipelineReleasesAdminResponse:
    type: object
    properties:
      releases:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipelineRelease'
        description: A list of pipeline releases.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of pipeline releases.
    description: |-
      ListPipelineReleasesAdminResponse contains a list of pipeline releases
      requested by an admin user.
      For the moment, the pipeline recipes will be UID-based (permalink) instead
      of name-based. This is a temporary solution.
  v1betaListPipelineRunsResponse:
    type: object
    properties:
      pipelineRuns:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipelineRun'
        description: The list of pipeline runs.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: The total number of pipeline runs matching the request.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The current page number.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The number of items per page.
        readOnly: true
    description: ListPipelineRunsResponse is the response message for ListPipelineRuns.
  v1betaListPipelinesAdminResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipeline'
        description: A list of pipeline resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of pipelines.
    description: |-
      ListPipelinesAdminResponse contains a list of pipelines requested by an
      admin user.
      For the moment, the pipeline recipes will be UID-based (permalink) instead
      of name-based. This is a temporary solution.
  v1betaListPipelinesResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipeline'
        description: A list of pipeline resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of pipelines.
        readOnly: true
    description: ListPipelinesResponse contains a list of pipelines.
  v1betaLookUpPipelineAdminResponse:
    type: object
    properties:
      pipeline:
        description: The requested pipeline.
        allOf:
          - $ref: '#/definitions/v1betaPipeline'
    description: LookUpPipelineAdminResponse contains the requested pipeline.
  v1betaOrganization:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the organization, defined by its ID.
          - Format: `organization/{organization.id}`.
        readOnly: true
      uid:
        type: string
        description: Organization UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      owner:
        description: The user that owns the organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/mgmtv1betaUser'
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/v1betaOrganizationProfile'
      permission:
        title: Permission
        readOnly: true
        allOf:
          - $ref: '#/definitions/coremgmtv1betaPermission'
    description: |-
      Organizations group several users. As entities, they can own resources such
      as pipelines or releases.
    required:
      - profile
  v1betaOrganizationProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the organization's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: OrganizationProfile describes the public data of an organization.
  v1betaOwner:
    type: object
    properties:
      user:
        description: User.
        readOnly: true
        allOf:
          - $ref: '#/definitions/mgmtv1betaUser'
      organization:
        description: Organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaOrganization'
    description: Owner is a wrapper for User and Organization, used to embed owner information in other resources.
  v1betaPipeline:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the pipeline, defined by its parent and ID.
          - Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}`.
        readOnly: true
      uid:
        type: string
        description: Pipeline UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Pipeline resource ID (used in `name` as the last segment). This conforms
          to RFC-1034, which restricts to letters, numbers, and hyphen, with the
          first character a letter, the last a letter or a number, and a 63
          character maximum.
      description:
        type: string
        description: Pipeline description.
      recipe:
        type: object
        description: Recipe describes the components of a Pipeline and how they are connected.
      createTime:
        type: string
        format: date-time
        description: Pipeline creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Pipeline update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Pipeline delete time.
        readOnly: true
      sharing:
        description: Pipeline sharing information.
        allOf:
          - $ref: '#/definitions/v1betaSharing'
      metadata:
        type: object
        description: Metadata holds console-related data such as the pipeline builder layout.
      ownerName:
        type: string
        description: Owner Name.
        readOnly: true
      releases:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaPipelineRelease'
        description: Releases holds the history of pipeline versions.
        readOnly: true
      readme:
        type: string
        description: README holds the pipeline documentation.
      permission:
        description: Permission defines how a pipeline can be used.
        readOnly: true
        allOf:
          - $ref: '#/definitions/vdppipelinev1betaPermission'
      visibility:
        description: Pipeline visibility.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipelineVisibility'
      owner:
        description: Pipeline owner.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaOwner'
      dataSpecification:
        description: Data specifications.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaDataSpecification'
      tags:
        type: array
        items:
          type: string
        description: Tags.
      stats:
        description: Statistic data.
        readOnly: true
        allOf:
          - $ref: '#/definitions/PipelineStats'
      rawRecipe:
        type: string
        description: |-
          Recipe in YAML format describes the components of a pipeline and how they
          are connected.
      sourceUrl:
        type: string
        description: A link to the source code of the pipeline (e.g. to a GitHub repository).
      documentationUrl:
        type: string
        description: A link to any extra information.
      license:
        type: string
        description: License under which the pipeline is distributed.
      profileImage:
        type: string
        description: Pipeline profile image in base64 format.
      endpoints:
        description: Pipeline endpoints.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaEndpoints'
    description: |-
      A Pipeline is an end-to-end workflow that automates a sequence of components
      to process data.

      For more information, see [Pipeline](https://www.instill.tech/docs/vdp/introduction) in
      the official documentation.
    required:
      - recipe
  v1betaPipelineRelease:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the release, defined by its parent and ID.
          - Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}/releases/{release.id}`.
        readOnly: true
      uid:
        type: string
        description: Release UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Release resource ID (used in `name` as the last segment). It must be a
          sematic version vX.Y.Z.
      description:
        type: string
        description: Release description.
      recipe:
        type: object
        description: Recipe of the versioned pipeline.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Pipeline creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Pipeline update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Pipeline deletion time.
        readOnly: true
      alias:
        type: string
        description: Alias.
        readOnly: true
      metadata:
        type: object
        description: |-
          Key-value object with console-related data such as the pipeline builder
          layout.
      readme:
        type: string
        description: README.
      dataSpecification:
        description: Data specifications.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaDataSpecification'
      rawRecipe:
        type: string
        description: |-
          Recipe in YAML format describes the components of a pipeline and how they
          are connected.
      endpoints:
        description: Pipeline endpoints.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaEndpoints'
    description: |-
      Pipeline releases contain the version control information of a pipeline.
      This allows users to track changes in the pipeline over time.
  v1betaPipelineRun:
    type: object
    properties:
      pipelineUid:
        type: string
        description: Unique identifier for the pipeline.
        readOnly: true
      pipelineRunUid:
        type: string
        description: Unique identifier for each run.
        readOnly: true
      pipelineVersion:
        type: string
        description: Pipeline version used in the run.
        readOnly: true
      status:
        description: Current status of the run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaRunStatus'
      source:
        description: Origin of the run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alphaRunSource'
      totalDuration:
        type: integer
        format: int32
        description: Time taken to complete the run in milliseconds.
        readOnly: true
      runnerId:
        type: string
        description: Runner ID. If current viewing requester does not have enough permission, it will return null.
        readOnly: true
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters.
        readOnly: true
      outputs:
        type: array
        items:
          type: object
        description: Pipeline inference outputs.
        readOnly: true
      recipeSnapshot:
        type: object
        description: Snapshot of the pipeline recipe used for this run.
        readOnly: true
      startTime:
        type: string
        format: date-time
        description: Time when the run started execution.
        readOnly: true
      completeTime:
        type: string
        format: date-time
        description: Time when the run completed.
        readOnly: true
      error:
        type: string
        description: Error message if the run failed.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: Credits used of internal accounting metric.
        readOnly: true
      dataSpecification:
        description: Data specifications.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaDataSpecification'
    description: PipelineRun represents a single execution of a pipeline.
  v1betaPipelineView:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
      - VIEW_RECIPE
    description: |-
      View defines how a Pipeline is presented.

       - VIEW_BASIC: Default view, only includes basic information.
       - VIEW_FULL: Full representation.
       - VIEW_RECIPE: Contains the recipe of the resource.
  v1betaPipelineVisibility:
    type: string
    enum:
      - VISIBILITY_PRIVATE
      - VISIBILITY_PUBLIC
    description: |-
      Visibility defines who can access the pipeline.

       - VISIBILITY_PRIVATE: Only the user can see the pipeline.
       - VISIBILITY_PUBLIC: Other users can see the pipeline.
  v1betaRenameNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The renamed pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipeline'
    description: RenameNamespacePipelineResponse contains a renamed pipeline.
  v1betaRole:
    type: string
    enum:
      - ROLE_VIEWER
      - ROLE_EXECUTOR
    description: |-
      Role describes the permissions a user has over a resource.

       - ROLE_VIEWER: Viewers can see the resource properties.
       - ROLE_EXECUTOR: Executors can execute the resource (e.g. trigger a pipeline).
  v1betaSecret:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the secret, define by its ID.
          - Format: `secrets/{secret.id}`.
        readOnly: true
      uid:
        type: string
        description: Secret UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Secret resource ID (used in `name` as the last segment). This conforms
          to RFC-1034, which restricts to letters, numbers, and hyphen, with the
          first character a letter, the last a letter or a number, and a 63
          character maximum.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      value:
        type: string
        description: The value of the secret, which is input-only and will never be returned in API responses.
      description:
        type: string
        title: Description
    description: API secrets allow users to make requests to the Instill AI API.
  v1betaSharing:
    type: object
    properties:
      users:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1betaSharingUser'
        description: |-
          Defines sharing rules for a set of user resource names.

          Each key in this object should contain a pattern that can be matched
          against user names.

          Each value is a user sharing configuration.

          **NOTE**: For now, the only accepted key is `*/*`.
      shareCode:
        description: Defines the configuration to share a resource via link.
        allOf:
          - $ref: '#/definitions/SharingShareCode'
    description: |-
      Sharing contains the information to share a resource with other users.

      For more information, see [Share Pipelines](https://www.instill.tech/docs/vdp/share).
  v1betaSharingUser:
    type: object
    properties:
      enabled:
        type: boolean
        description: Defines whether the sharing option with this user is enabled.
      role:
        description: Defines the role the user will have over the resource.
        allOf:
          - $ref: '#/definitions/v1betaRole'
    description: Describes the sharing configuration with a given user.
  v1betaTestNamespaceConnectionResponse:
    type: object
    description: TestNamespaceConnectionResponse is an empty response.
  v1betaTrace:
    type: object
    properties:
      statuses:
        type: array
        items:
          $ref: '#/definitions/v1betaTraceStatus'
        description: Statuses contains an execution status per input.
        readOnly: true
      inputs:
        type: array
        items:
          type: object
        description: Component inputs.
        readOnly: true
      outputs:
        type: array
        items:
          type: object
        description: Component outputs.
        readOnly: true
      error:
        type: object
        description: Error details.
        readOnly: true
      computeTimeInSeconds:
        type: number
        format: float
        description: Computation time in seconds.
        readOnly: true
    description: Trace contains the execution details of a component.
  v1betaTraceStatus:
    type: string
    enum:
      - STATUS_COMPLETED
      - STATUS_SKIPPED
      - STATUS_ERROR
    description: |-
      Status holds the the component execution outcome.

       - STATUS_COMPLETED: Successfully completed.
       - STATUS_SKIPPED: Skipped.
       - STATUS_ERROR: Aborted with error.
  v1betaTriggerAsyncNamespacePipelineReleaseResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncNamespacePipelineReleaseResponse contains the information to access
      the status of an asynchronous pipeline execution.
  v1betaTriggerAsyncNamespacePipelineResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/googlelongrunningOperation'
    description: |-
      TriggerAsyncNamespacePipelineResponse contains the information to access the
      status of an asynchronous pipeline execution.
  v1betaTriggerData:
    type: object
    properties:
      variable:
        type: object
        title: Variables
      secret:
        type: object
        additionalProperties:
          type: string
        title: Variables
    title: Data
  v1betaTriggerMetadata:
    type: object
    properties:
      traces:
        type: object
        additionalProperties:
          $ref: '#/definitions/v1betaTrace'
        description: |-
          Each key in the `traces` object is a component ID. The value is a Trace
          object containing the execution details.
        readOnly: true
    description: TriggerMetadata contains the traces of the pipeline inference.
  v1betaTriggerNamespacePipelineReleaseResponse:
    type: object
    properties:
      outputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      metadata:
        description: Traces of the pipeline inference.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaTriggerMetadata'
    description: |-
      TriggerNamespacePipelineReleaseResponse contains the pipeline execution results,
      i.e., the multiple model inference outputs.
  v1betaTriggerNamespacePipelineResponse:
    type: object
    properties:
      outputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      metadata:
        description: Traces of the pipeline inference.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaTriggerMetadata'
    description: |-
      TriggerNamespacePipelineResponse contains the pipeline execution results, i.e.,
      the multiple model inference outputs.
  v1betaTriggerNamespacePipelineWithStreamResponse:
    type: object
    properties:
      outputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      metadata:
        description: Traces of the pipeline inference.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaTriggerMetadata'
    description: |-
      TriggerNamespacePipelineWithStreamResponse contains the pipeline execution results, i.e.,
      the multiple model inference outputs.
  v1betaUpdateNamespaceConnectionResponse:
    type: object
    properties:
      connection:
        description: The created connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaConnection'
    description: UpdateNamespaceConnectionResponse contains the updated connection.
  v1betaUpdateNamespacePipelineReleaseResponse:
    type: object
    properties:
      release:
        description: The updated pipeline release resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipelineRelease'
    description: UpdateNamespacePipelineReleaseResponse contains the updated pipeline release.
  v1betaUpdateNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The updated pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1betaPipeline'
    description: UpdateNamespacePipelineResponse contains the updated pipeline.
  v1betaUpdateNamespaceSecretResponse:
    type: object
    properties:
      secret:
        description: The updated secret resource.
        allOf:
          - $ref: '#/definitions/v1betaSecret'
    description: UpdateNamespaceSecretResponse contains the updated secret.
  v1betaUserProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      companyName:
        type: string
        description: Company name.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the user's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: UserProfile describes the public data of a user.
  v1betaValidateNamespacePipelineResponse:
    type: object
    properties:
      success:
        type: boolean
        title: Success
        readOnly: true
      errors:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1betaErrPipelineValidation'
        description: The validated pipeline resource.
        readOnly: true
    description: ValidateNamespacePipelineResponse contains a validated pipeline.
  vdppipelinev1betaPermission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the pipeline can be modified.
      canTrigger:
        type: boolean
        description: Defines whether the pipeline can be executed.
      canRelease:
        type: boolean
        description: Defines whether the pipeline can be released.
    description: Permission defines how a pipeline can be used.
  vdppipelinev1betaView:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a resource is presented. Most resources can share this view
      definition, the particular meaning of each value should be defined in the
      resource itself. Certain resources might have their own View definition if
      they need to implement more than 2 (basic / full) views.

       - VIEW_BASIC: Default view.
       - VIEW_FULL: Full representation.
securityDefinitions:
  Bearer:
    type: apiKey
    description: Enter the token with the `Bearer ` prefix, e.g. `Bearer abcde12345`
    name: Authorization
    in: header
    x-default: Bearer instill_sk_***
security:
  - Bearer: []
externalDocs:
  description: More about Instill AI
  url: https://www.instill.tech/docs
