# This file is auto-generated. DO NOT EDIT.
swagger: "2.0"
info:
  title: Instill Core API
  description: Interact with Instill Core through API
  version: v0.56.0
  contact:
    name: Instill AI
    url: https://github.com/instill-ai
    email: support@instill-ai.com
  license:
    name: MIT
    url: https://github.com/instill-ai/protobufs/blob/main/LICENSE
tags:
  - name: Namespace
    description: Namespaces (e.g. User, Organization) that structure the resource hierarchy.
  - name: Pipeline
    description: Pipeline orchestration.
  - name: Artifact
    description: Data orchestration for unified unstructured data representation.
  - name: Model
    description: AI Model orchestration
  - name: Metrics
    description: Resource usage metrics.
host: api.instill-ai.com
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1alpha/namespaces/{namespaceId}/catalogs:
    get:
      summary: Get all catalogs info
      description: Returns a paginated list of catalogs.
      operationId: ArtifactPublicService_ListCatalogs
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListCatalogsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: User ID for which to list the catalogs
          in: path
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
    post:
      summary: Create a catalog
      description: Creates a catalog.
      operationId: ArtifactPublicService_CreateCatalog
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateCatalogResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The catalog's owner(namespaces).
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CreateCatalogBody'
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}:
    get:
      summary: Get the catalog file.
      description: |-
        Returns a view of the file within the catalog, with the text and chunks it
        generated after being processed.
      operationId: ArtifactPublicService_GetFileCatalog
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetFileCatalogResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: catalogId
          description: Catalog ID.
          in: path
          required: true
          type: string
        - name: fileUid
          description: File UID.
          in: query
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
    delete:
      summary: Delete a catalog
      description: Deletes a catalog.
      operationId: ArtifactPublicService_DeleteCatalog
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteCatalogResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The owner's id. i.e. namespace.
          in: path
          required: true
          type: string
        - name: catalogId
          description: The catalog id.
          in: path
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
    put:
      summary: Update a catalog info
      description: Updates the information of a catalog.
      operationId: ArtifactPublicService_UpdateCatalog
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateCatalogResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The catalog owner(namespace).
          in: path
          required: true
          type: string
        - name: catalogId
          description: The catalog id.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateCatalogBody'
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files:
    get:
      summary: List catalog files
      description: Returns a paginated list of catalog files.
      operationId: ArtifactPublicService_ListCatalogFiles
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListCatalogFilesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The owner/namespace uid id.
          in: path
          required: true
          type: string
        - name: catalogId
          description: The catalog id.
          in: path
          required: true
          type: string
        - name: pageSize
          description: The page size (default:10; max 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: The next page token(default from first file's token).
          in: query
          required: false
          type: string
        - name: filter.fileUids
          description: File UIDs.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: filter.processStatus
          description: |-
            Processing status of the files.

             - FILE_PROCESS_STATUS_NOTSTARTED: NOTSTARTED
             - FILE_PROCESS_STATUS_WAITING: file is waiting for embedding process
             - FILE_PROCESS_STATUS_CONVERTING: file is converting
             - FILE_PROCESS_STATUS_CHUNKING: file is chunking
             - FILE_PROCESS_STATUS_EMBEDDING: file is embedding
             - FILE_PROCESS_STATUS_COMPLETED: completed
             - FILE_PROCESS_STATUS_FAILED: failed
             - FILE_PROCESS_STATUS_SUMMARIZING: file is summarizing
          in: query
          required: false
          type: string
          enum:
            - FILE_PROCESS_STATUS_NOTSTARTED
            - FILE_PROCESS_STATUS_WAITING
            - FILE_PROCESS_STATUS_CONVERTING
            - FILE_PROCESS_STATUS_CHUNKING
            - FILE_PROCESS_STATUS_EMBEDDING
            - FILE_PROCESS_STATUS_COMPLETED
            - FILE_PROCESS_STATUS_FAILED
            - FILE_PROCESS_STATUS_SUMMARIZING
      tags:
        - Artifact
      x-stage: alpha
    post:
      summary: Create a file
      description: Creates a file.
      operationId: ArtifactPublicService_UploadCatalogFile
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UploadCatalogFileResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: owner/namespace uid
          in: path
          required: true
          type: string
        - name: catalogId
          description: catalog id
          in: path
          required: true
          type: string
        - name: file
          description: file
          in: body
          required: true
          schema:
            $ref: '#/definitions/File'
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/catalogs/files:
    delete:
      summary: Delete a file
      description: Deletes a file.
      operationId: ArtifactPublicService_DeleteCatalogFile
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteCatalogFileResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: fileUid
          description: The file uid.
          in: query
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/catalogs/files/processAsync:
    post:
      summary: Process catalog files
      description: Processes catalog files.
      operationId: ArtifactPublicService_ProcessCatalogFiles
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ProcessCatalogFilesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ProcessCatalogFilesRequest'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files/{fileUid}:
    get:
      summary: Get catalog file
      description: Gets the file of a catalog.
      operationId: ArtifactPublicService_GetCatalogFile
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetCatalogFileResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The namespace id.
          in: path
          required: true
          type: string
        - name: catalogId
          description: The catalog id.
          in: path
          required: true
          type: string
        - name: fileUid
          description: The file uid.
          in: path
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/chunks:
    get:
      summary: List catalog chunks
      description: Returns a paginated list of catalog chunks.
      operationId: ArtifactPublicService_ListChunks
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListChunksResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: owner/namespace id (not uid)
          in: path
          required: true
          type: string
        - name: catalogId
          description: catalog id (not uid)
          in: path
          required: true
          type: string
        - name: fileUid
          description: unique identifier of the file
          in: query
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/chunks:
    get:
      summary: Search catalog chunks
      description: Returns a paginated list of catalog chunks based on search criteria.
      operationId: ArtifactPublicService_SearchChunks
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/SearchChunksResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: owner/namespace id (not uid)
          in: path
          required: true
          type: string
        - name: chunkUids
          description: chunk uids
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      tags:
        - Artifact
      x-stage: beta
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files/{fileUid}/source:
    get:
      summary: Get catalog single-source-of-truth file
      description: Gets the single-source-of-truth file of a catalog.
      operationId: ArtifactPublicService_GetSourceFile
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetSourceFileResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: owner/namespace id
          in: path
          required: true
          type: string
        - name: catalogId
          description: catalog id
          in: path
          required: true
          type: string
        - name: fileUid
          description: unique identifier of the original uploaded file
          in: path
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files/{fileUid}/summary:
    get:
      summary: Get summary from a catalog file
      description: Gets summary from a catalog file
      operationId: ArtifactPublicService_GetFileSummary
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetFileSummaryResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: owner/namespace id
          in: path
          required: true
          type: string
        - name: catalogId
          description: catalog id
          in: path
          required: true
          type: string
        - name: fileUid
          description: unique identifier of the original uploaded file
          in: path
          required: true
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/source-files:
    get:
      summary: Search single-source-of-truth files
      description: Searches the single-source-of-truth files of a catalog.
      operationId: ArtifactPublicService_SearchSourceFiles
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/SearchSourceFilesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: owner/namespace id
          in: path
          required: true
          type: string
        - name: fileUids
          description: search file uid
          in: query
          required: true
          type: array
          items:
            type: string
          collectionFormat: multi
      tags:
        - Artifact
      x-stage: beta
  /v1alpha/chunks/{chunkUid}:
    post:
      summary: Update catalog chunk
      description: Updates a catalog chunk.
      operationId: ArtifactPublicService_UpdateChunk
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateChunkResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: chunkUid
          description: chunk uid
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateChunkBody'
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/chunks/retrieve:
    post:
      summary: Retrieve similar chunks
      description: Returns the top-K most similar chunks to a text prompt.
      operationId: ArtifactPublicService_SimilarityChunksSearch
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/SimilarityChunksSearchResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: ID of the namespace owning the catalog.
          in: path
          required: true
          type: string
        - name: catalogId
          description: ID of the catalog.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SimilarityChunksSearchBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/ask:
    post:
      summary: Answer a question
      description: |-
        Provides the response to the prompted question, returning contextual
        information like the chunks used to build the answer.
      operationId: ArtifactPublicService_QuestionAnswering
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/QuestionAnsweringResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: ID of the namespace owning the catalog.
          in: path
          required: true
          type: string
        - name: catalogId
          description: ID of the catalog.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/QuestionAnsweringBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/runs:
    get:
      summary: List Catalog Runs
      description: Returns a paginated list of catalog runs.
      operationId: ArtifactPublicService_ListCatalogRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListCatalogRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The ID of the owner of the catalog.
          in: path
          required: true
          type: string
        - name: catalogId
          description: The ID of the catalog for which the runs will be listed.
          in: path
          required: true
          type: string
        - name: page
          description: The page number to retrieve.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          description: |-
            The maximum number of items per page to return. The default and cap values
            are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/object-upload-url:
    get:
      summary: Get Object Upload URL
      description: Returns the upload URL of an object.
      operationId: ArtifactPublicService_GetObjectUploadURL
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetObjectUploadURLResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: id of the namespace
          in: path
          required: true
          type: string
        - name: objectName
          description: |-
            name of the object with length limit to 1024 characters.
            this is the unique identifier of the object in the namespace
          in: query
          required: true
          type: string
        - name: urlExpireDays
          description: |-
            expiration time in days for the URL.
            maximum is 7 days. if set to 0, URL will not expire.
          in: query
          required: false
          type: integer
          format: int32
        - name: lastModifiedTime
          description: |-
            last modified time this value is provided by the client when the object url is created
            it must be in RFC3339 formatted date-time string
          in: query
          required: false
          type: string
          format: date-time
        - name: objectExpireDays
          description: |-
            object live time in days
            minimum is 1 day. if set to 0, the object will not be deleted automatically
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/object-download-url:
    get:
      summary: Get Object Download URL
      description: Returns the download URL of an object.
      operationId: ArtifactPublicService_GetObjectDownloadURL
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetObjectDownloadURLResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: id of the namespace
          in: path
          required: true
          type: string
        - name: objectUid
          description: uid of the object
          in: query
          required: true
          type: string
        - name: urlExpireDays
          description: |-
            expiration time in days for the URL.
            maximum is 7 days. if set to 0, URL will not expire.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Artifact
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/catalogs/{catalogId}/files:move:
    post:
      summary: Move file to another catalog
      description: Moves a file to another catalog.
      operationId: ArtifactPublicService_MoveFileToCatalog
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/MoveFileToCatalogResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: namespace id
          in: path
          required: true
          type: string
        - name: catalogId
          description: catalog id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/MoveFileToCatalogBody'
      tags:
        - Artifact
      x-stage: alpha
  /v1beta/user:
    get:
      summary: Get the authenticated user
      description: Returns the details of the authenticated user.
      operationId: MgmtPublicService_GetAuthenticatedUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetAuthenticatedUserResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - Namespace
      x-stage: beta
    patch:
      summary: Update the authenticated user
      description: |-
        Updates the information of the authenticated user.

        In REST requests, only the supplied user fields will be taken into account
        when updating the resource.
      operationId: MgmtPublicService_PatchAuthenticatedUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/PatchAuthenticatedUserResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: user
          description: The user fields that will replace the existing ones.
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthenticatedUser'
            required:
              - user
      tags:
        - Namespace
      x-stage: beta
  /v1beta/users:
    get:
      summary: List users
      description: Returns a paginated list of users.
      operationId: MgmtPublicService_ListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListUsersResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of users to return. If this parameter is unspecified,
            at most 10 pipelines will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
      tags:
        - Namespace
      x-stage: beta
  /v1beta/users/{userId}:
    get:
      summary: Get a user
      description: Returns the details of a user by their ID.
      operationId: MgmtPublicService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetUserResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Namespace
      x-stage: beta
  /v1beta/organizations:
    get:
      summary: List organizations
      description: Returns a paginated list of organizations.
      operationId: MgmtPublicService_ListOrganizations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListOrganizationsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of organizations to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
      tags:
        - Namespace
      x-stage: beta
    post:
      summary: Create an organization
      description: Creates an organization.
      operationId: MgmtPublicService_CreateOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organization
          description: The properties of the organization to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Organization'
      tags:
        - Namespace
      x-stage: beta
  /v1beta/organizations/{organizationId}:
    get:
      summary: Get an organization
      description: Returns the organization details by its ID.
      operationId: MgmtPublicService_GetOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Namespace
      x-stage: beta
    delete:
      summary: Delete an organization
      description: Accesses and deletes an organization by ID.
      operationId: MgmtPublicService_DeleteOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
    patch:
      summary: Update an organization
      description: |-
        Accesses and updates an organization by ID.

        In REST requests, only the supplied organization fields will be taken into
        account when updating the resource.
      operationId: MgmtPublicService_UpdateOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: organization
          description: The organization fields that will replace the existing ones.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Organization'
      tags:
        - Namespace
      x-stage: beta
  /v1beta/users/{userId}/memberships:
    get:
      summary: List user memberships
      description: Returns the memberships of a user.
      operationId: MgmtPublicService_ListUserMemberships
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListUserMembershipsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
  /v1beta/users/{userId}/memberships/{organizationId}:
    get:
      summary: Get a user membership
      description: |-
        Returns the details of the relationship between a user and an
        organization. The authenticated must match the membership parent.
      operationId: MgmtPublicService_GetUserMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetUserMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Namespace
      x-stage: beta
    delete:
      summary: Delete a user membership
      description: Accesses and deletes a user membership by parent and membership IDs.
      operationId: MgmtPublicService_DeleteUserMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteUserMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
    put:
      summary: Update a user membership
      description: Accesses and updates a user membership by parent and membership IDs.
      operationId: MgmtPublicService_UpdateUserMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateUserMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: membership
          description: The membership fields to update.
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserMembership'
            required:
              - membership
        - name: updateMask
          description: |-
            The update mask specifies the subset of fields that should be modified.

            For more information about this field, see
            https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
          in: query
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
  /v1beta/organizations/{organizationId}/memberships:
    get:
      summary: List organization memberships
      description: Returns a paginated list of the user memberships in an organization.
      operationId: MgmtPublicService_ListOrganizationMemberships
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListOrganizationMembershipsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
  /v1beta/organizations/{organizationId}/memberships/{userId}:
    get:
      summary: Get an organization membership
      description: Returns the details of a user membership within an organization.
      operationId: MgmtPublicService_GetOrganizationMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetOrganizationMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Namespace
      x-stage: beta
    delete:
      summary: Delete an organization membership
      description: Deletes a user membership within an organization.
      operationId: MgmtPublicService_DeleteOrganizationMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteOrganizationMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
    put:
      summary: Update an organization membership
      description: Updates a user membership within an organization.
      operationId: MgmtPublicService_UpdateOrganizationMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateOrganizationMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: membership
          description: The membership fields to update.
          in: body
          required: true
          schema:
            $ref: '#/definitions/OrganizationMembership'
            required:
              - membership
        - name: updateMask
          description: |-
            The update mask specifies the subset of fields that should be modified.

            For more information about this field, see
            https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
          in: query
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
  /v1beta/organizations/{organizationId}/invite-members:
    post:
      summary: Invite members to an organization
      description: Invites members to an organization.
      operationId: MgmtPublicService_InviteOrganizationMembers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/InviteOrganizationMembersResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: The organization ID.
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/InviteOrganizationMembersBody'
      tags:
        - Namespace
      x-stage: beta
  /v1beta/tokens:
    get:
      summary: List API tokens
      description: Returns a paginated list of the API tokens of the authenticated user.
      operationId: MgmtPublicService_ListTokens
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListTokensResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of tokens to return. If this parameter is unspecified,
            at most 10 pipelines will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
      tags:
        - Namespace
      x-stage: beta
    post:
      summary: Create an API token
      description: Creates an API token for the authenticated user.
      operationId: MgmtPublicService_CreateToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: token
          description: The properties of the token to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/ApiToken'
      tags:
        - Namespace
      x-stage: beta
  /v1beta/tokens/{tokenId}:
    get:
      summary: Get an API token
      description: Returns the details of an API token.
      operationId: MgmtPublicService_GetToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: tokenId
          description: Token ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
    delete:
      summary: Delete an API token
      description: Deletes an API token.
      operationId: MgmtPublicService_DeleteToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: tokenId
          description: Token ID
          in: path
          required: true
          type: string
      tags:
        - Namespace
      x-stage: beta
  /v1beta/validate_token:
    post:
      summary: Validate an API token
      description: Validates an API token.
      operationId: MgmtPublicService_ValidateToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ValidateTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - Namespace
      x-stage: beta
  /v1beta/check-namespace:
    post:
      summary: Check if a namespace is in use
      description: |-
        Returns the availability of a namespace or, alternatively, the type of
        resource that is using it.
      operationId: MgmtPublicService_CheckNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CheckNamespaceResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: body
          description: |-
            CheckNamespaceRequest represents a request to verify if a namespace is
            available.
          in: body
          required: true
          schema:
            $ref: '#/definitions/CheckNamespaceRequest'
      tags:
        - Namespace
      x-stage: beta
  /v1beta/pipeline-runs/query-charts:
    get:
      summary: List pipeline trigger time charts
      description: |-
        Returns a timeline of pipeline trigger counts for a given requester. The
        response will contain one set of records (datapoints), representing the
        amount of triggers in a time bucket.
      operationId: MgmtPublicService_ListPipelineTriggerChartRecords
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelineTriggerChartRecordsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: requesterId
          description: The ID of the namespace that requested the pipeline triggers.
          in: query
          required: true
          type: string
        - name: aggregationWindow
          description: |-
            Aggregation window. The value is a positive duration string, i.e. a
            sequence of decimal numbers, each with optional fraction and a unit
            suffix, such as "300ms", "1.5h" or "2h45m".
            The minimum (and default) window is 1h.
          in: query
          required: false
          type: string
        - name: start
          description: |-
            Beginning of the time range from which the records will be fetched.
            The default value is the beginning of the current day, in UTC.
          in: query
          required: false
          type: string
          format: date-time
        - name: stop
          description: |-
            End of the time range from which the records will be fetched.
            The default value is the current timestamp.
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Metrics
      x-stage: beta
  /v1beta/model-runs/query-charts:
    get:
      summary: List model trigger time charts
      description: |-
        Returns a timeline of model trigger counts for a given requester. The
        response will contain one set of records (datapoints), representing the
        amount of triggers in a time bucket.
      operationId: MgmtPublicService_ListModelTriggerChartRecords
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelTriggerChartRecordsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: requesterId
          description: The ID of the namespace that requested the model triggers.
          in: query
          required: true
          type: string
        - name: aggregationWindow
          description: |-
            Aggregation window. The value is a positive duration string, i.e. a
            sequence of decimal numbers, each with optional fraction and a unit
            suffix, such as "300ms", "1.5h" or "2h45m".
            The minimum (and default) window is 1h.
          in: query
          required: false
          type: string
        - name: start
          description: |-
            Beginning of the time range from which the records will be fetched.
            The default value is the beginning of the current day, in UTC.
          in: query
          required: false
          type: string
          format: date-time
        - name: stop
          description: |-
            End of the time range from which the records will be fetched.
            The default value is the current timestamp.
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Metrics
      x-stage: beta
  /v1alpha/model-definitions:
    get:
      summary: List model definitions
      description: Returns a paginated list of model definitions.
      operationId: ModelPublicService_ListModelDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelDefinitionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of model definitions to return. If this parameter
            is unspecified, at most 10 definitions will be returned. The cap value for
            this parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
      x-stage: alpha
  /v1alpha/available-regions:
    get:
      summary: List available regions
      description: Returns a paginated list of available regions.
      operationId: ModelPublicService_ListAvailableRegions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListAvailableRegionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - Model
      x-stage: alpha
  /v1alpha/model-definitions/{modelDefinitionId}:
    get:
      summary: Get a model definition
      description: Returns the details of a model definition.
      operationId: ModelPublicService_GetModelDefinition
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetModelDefinitionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: modelDefinitionId
          description: |-
            The resource name of the model definition, which allows its access by ID.
            - Format: `model-definitions/{id}`.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
      x-stage: alpha
  /v1alpha/models:
    get:
      summary: List models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or
            `update_time`. Format: `order_by=id` or `order_by=create_time desc`,
            default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models:
    get:
      summary: List namespace models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListNamespaceModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespaceModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or
            `update_time`. Format: `order_by=id` or `order_by=create_time desc`,
            default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
    post:
      summary: Create a new model
      description: |-
        Creates a new model under the parenthood of a namespace. This is an
        asynchronous endpoint, i.e., the server will not wait for the model to be
        created in order to respond. Instead, it will return a response with the
        necessary information to access the result and status of the creation
        operation.
      operationId: ModelPublicService_CreateNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: model
          description: The properties of the model to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Model'
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}:
    get:
      summary: Get a model
      description: |-
        Returns the detail of a model, accessing it by the model ID and its parent
        namespace.
      operationId: ModelPublicService_GetNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
      x-stage: alpha
    delete:
      summary: Delete a model
      description: |-
        Deletes a model, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model.
      operationId: ModelPublicService_DeleteNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
      tags:
        - Model
      x-stage: alpha
    patch:
      summary: Update a model
      description: |-
        Updates a model, accessing it by its resource name, which is defined by
        the parent namespace and the ID of the model.

        In REST requests, only the supplied model fields will be taken into
        account when updating the resource.
      operationId: ModelPublicService_UpdateNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: model
          description: The model to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/Model'
            required:
              - model
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/rename:
    post:
      summary: Rename a model
      description: |-
        Renames a model, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model.
      operationId: ModelPublicService_RenameNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/RenameNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RenameNamespaceModelBody'
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/watch:
    get:
      summary: Watch the state of a model version
      description: |-
        Returns the state of a model. The model resource allocation and scaling
        actions take some time, during which a model will be in various state. This
        endpoint allows clients to track the state.
      operationId: ModelPublicService_WatchNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/WatchNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/watch:
    get:
      summary: Watch the state of the latest model version
      description: |-
        Returns the state of the latest model version. The model resource
        allocation and scaling actions take some time, during which a model will be
        in various state. This endpoint allows clients to track the state.
      operationId: ModelPublicService_WatchNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/WatchNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions:
    get:
      summary: List namespace model versions
      description: |-
        Returns a paginated list of version of a model namespace that belong to the
        specified namespace. Contains model version and digest.
      operationId: ModelPublicService_ListNamespaceModelVersions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespaceModelVersionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of versions to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}:
    delete:
      summary: Delete a model version
      description: |-
        Deletes a model version, accesing it by its resource name, which is defined
        by the parent namespace and the ID of the model, and version.
      operationId: ModelPublicService_DeleteNamespaceModelVersion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespaceModelVersionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespaceModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger-async:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers the latest deployed model version to infer the result of a set of
        task or questions.
      operationId: ModelPublicService_TriggerNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespaceLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger-async:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers the latest deployed model version to infer the result of a set of
        task or questions.
      operationId: ModelPublicService_TriggerAsyncNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/operation:
    get:
      summary: |-
        Get the details of the long-running operation from a namespace model
        with a particular version
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as trigger.
      operationId: ModelPublicService_GetNamespaceModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the
            response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/operation:
    get:
      summary: Get the details of the latest long-running operation from a namespace model
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as trigger.
      operationId: ModelPublicService_GetNamespaceLatestModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceLatestModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the
            response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
      x-stage: alpha
  /v1alpha/operations/{operationId}:
    get:
      summary: Get the details of a long-running operation
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as trigger.
      operationId: ModelPublicService_GetModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: operationId
          description: The resource name of the model, which allows its access ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
      x-stage: alpha
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/runs:
    get:
      summary: List Model Runs
      description: |-
        Returns a paginated list of runs for a given model. When the requester is
        the owner of the model, they will be able to all the model runs,
        regardless who requested the trigger (the view will be partial to hide
        sensitive data like e.g. the trigger input and output). Other requesters
        will only be able to see the runs requested by themselves.
      operationId: ModelPublicService_ListModelRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID.
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of runs to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
        - name: orderBy
          description: |-
            Sort the results by the given expression.
            Format: `field [ASC | DESC], where `field` can be:
            - `create_time`
            - `update_time`
            By default, results are sorted by descending creation time.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
            The filter can be applied to the following fields:
            - `create_time`
          in: query
          required: false
          type: string
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1alpha/dashboard/models/runs:
    get:
      summary: List Model Runs By Requester
      description: |-
        Returns a paginated list of runs requested by a namespace. The response
        may contain runs from several models.
      operationId: ModelPublicService_ListModelRunsByRequester
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelRunsByRequesterResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of runs to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
        - name: orderBy
          description: |-
            Sort the results by the given expression.
            Format: `field [ASC | DESC], where `field` can be:
            - `create_time`
            - `update_time`
            By default, results are sorted by descending creation time.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `status="RUN_STATUS_COMPLETED"`.
            The filter can be applied to the following fields:
            - `status`
            - `source`
          in: query
          required: false
          type: string
        - name: start
          description: |-
            Beginning of the time range from which the records will be fetched.
            The default value is the beginning of the current day, in UTC.
          in: query
          required: false
          type: string
          format: date-time
        - name: stop
          description: |-
            End of the time range from which the records will be fetched.
            The default value is the current timestamp.
          in: query
          required: false
          type: string
          format: date-time
        - name: requesterId
          description: Requester ID.
          in: query
          required: true
          type: string
      tags:
        - Model
      x-stage: alpha
  /v1beta/pipelines:
    get:
      summary: List accessible pipelines
      description: Returns a paginated list of pipelines that are visible to the requester.
      operationId: PipelinePublicService_ListPipelines
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelinesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of pipelines to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
            - Example:
            `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
          in: query
          required: false
          type: string
        - name: showDeleted
          description: Include soft-deleted pipelines in the result.
          in: query
          required: false
          type: boolean
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the user can see the pipeline.
             - VISIBILITY_PUBLIC: Other users can see the pipeline.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines:
    get:
      summary: List namespace pipelines
      description: Returns a paginated list of pipelines of a namespace
      operationId: PipelinePublicService_ListNamespacePipelines
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespacePipelinesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of pipelines to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
            - Example:
            `recipe.components.definition_name:"operator-definitions/2ac8be70-0f7a-4b61-a33d-098b8acfa6f3"`.
          in: query
          required: false
          type: string
        - name: showDeleted
          description: Include soft-deleted pipelines in the result.
          in: query
          required: false
          type: boolean
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the user can see the pipeline.
             - VISIBILITY_PUBLIC: Other users can see the pipeline.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
    post:
      summary: Create a new pipeline
      description: Creates a new pipeline under a namespace.
      operationId: PipelinePublicService_CreateNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The namespace that creates the pipeline.
          in: path
          required: true
          type: string
        - name: pipeline
          description: The properties of the pipeline to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}:
    get:
      summary: Get a pipeline
      description: Returns the details of a pipeline.
      operationId: PipelinePublicService_GetNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
      tags:
        - Pipeline
      x-stage: beta
    delete:
      summary: Delete a pipeline
      description: |-
        Deletes a pipeline, accesing it by its resource name, which is defined by
        the parent namespace and the ID of the pipeline. The authenticated
        namespace must be the parent of the pipeline in order to delete it.
      operationId: PipelinePublicService_DeleteNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
    patch:
      summary: Update a pipeline
      description: |-
        Udpates a pipeline, accessing it by its resource name, which is defined by
        the parent namespace and the ID of the pipeline. The authenticated
        namespace must be the parent of the pipeline in order to modify it.

        In REST requests, only the supplied pipeline fields will be taken into
        account when updating the resource.
      operationId: PipelinePublicService_UpdateNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: pipeline
          description: The pipeline fields that will replace the existing ones.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Pipeline'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/validate:
    post:
      summary: Validate a pipeline
      description: |-
        Validates a pipeline by its resource name, which is defined by the parent
        namespace and the ID of the pipeline.

        Validation checks the recipe of the pipeline and the status of its
        components.
      operationId: PipelinePublicService_ValidateNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ValidateNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/ValidateNamespacePipelineBody'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/rename:
    post:
      summary: Rename a pipeline
      description: |-
        Updates the ID of a pipeline. Since this is an output-only field, a custom
        method is required to modify it.

        The pipeline name will be updated accordingly, as it is  composed by the
        parent namespace and ID of the pipeline (e.g.
        `namespaces/luigi/pipelines/pizza-recipe-generator`).

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_RenameNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/RenameNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RenameNamespacePipelineBody'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/clone:
    post:
      summary: Clone a pipeline
      description: |-
        Clones a pipeline owned by a namespace. The new pipeline may have a
        different parent, and this can be either a namespace or an organization.
      operationId: PipelinePublicService_CloneNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CloneNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CloneNamespacePipelineBody'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger:
    post:
      summary: Trigger a pipeline
      description: |-
        Triggers the execution of a pipeline synchronously, i.e., the result is
        sent back to the namespace right after the data is processed. This method
        is intended for real-time inference when low latency is of concern.

        The pipeline is identified by its resource name, formed by the parent
        namespace and ID of the pipeline.

        For more information, see [Run
        NamespacePipeline](https://instill-ai.dev/docs/pipeline/run-pipeline).
      operationId: PipelinePublicService_TriggerNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespacePipelineBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger-stream:
    post:
      summary: Trigger a pipeline via streaming
      description: |-
        Triggers the execution of a pipeline asynchronously and streams back the
        response. This method is intended for real-time inference when low latency
        is of concern and the response needs to be processed incrementally.

        The pipeline is identified by its resource name, formed by the parent
        namespace and ID of the pipeline.
      operationId: PipelinePublicService_TriggerNamespacePipelineWithStream
      responses:
        "200":
          description: A successful response.(streaming responses)
          schema:
            type: object
            properties:
              result:
                $ref: '#/definitions/TriggerNamespacePipelineWithStreamResponse'
              error:
                $ref: '#/definitions/rpc.Status'
            title: Stream result of TriggerNamespacePipelineWithStreamResponse
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespacePipelineWithStreamBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/trigger-async:
    post:
      summary: Trigger a pipeline asynchronously
      description: |-
        Triggers the execution of a pipeline asynchronously, i.e., the result
        contains the necessary information to access the result and status of the
        operation. This method is intended for cases that require long-running
        workloads.

        The pipeline is identified by its resource name, formed by the parent
        namespace and ID of the pipeline.

        For more information, see [Run
        NamespacePipeline](https://instill-ai.dev/docs/pipeline/run-pipeline).
      operationId: PipelinePublicService_TriggerAsyncNamespacePipeline
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerAsyncNamespacePipelineResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerAsyncNamespacePipelineBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases:
    get:
      summary: List the releases in a pipeline
      description: |-
        Lists the commited versions of a pipeline, identified by its resource
        name, which is formed by the parent namespace and ID of the pipeline.
      operationId: PipelinePublicService_ListNamespacePipelineReleases
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespacePipelineReleasesResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of releases to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: showDeleted
          description: Include soft-deleted pipelines in the result.
          in: query
          required: false
          type: boolean
      tags:
        - Pipeline
      x-stage: beta
    post:
      summary: Create a pipeline release
      description: |-
        Commits the version of a pipeline, identified by its resource name, which
        is formed by the parent namespace and ID of the pipeline.

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_CreateNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: release
          description: The release information.
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelineRelease'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}:
    get:
      summary: Get a pipeline release
      description: |-
        Gets the details of a pipeline release, where the pipeline is identified
        by its resource name, formed by its parent namespace and ID.
      operationId: PipelinePublicService_GetNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired pipeline view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
      tags:
        - Pipeline
      x-stage: beta
    delete:
      summary: Delete a pipeline release
      description: |-
        Deletes a pipeline release, where the pipeline is identified by its
        resource name, formed by its parent namespace and ID.

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_DeleteNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
    patch:
      summary: Update a pipeline release
      description: |-
        Updates the details of a pipeline release, where the pipeline is
        identified by its resource name, formed by its parent namespace and ID.

        The authenticated namespace must be the parent of the pipeline in order to
        perform this action.
      operationId: PipelinePublicService_UpdateNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: release
          description: |-
            The pipeline release fields that will replace the existing ones.
            A pipeline release resource to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/PipelineRelease'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/clone:
    post:
      summary: Clone a pipeline release
      description: |-
        Clones a pipeline release owned by a namespace. The new pipeline may have a
        different parent, and this can be either a namespace or an organization.
      operationId: PipelinePublicService_CloneNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CloneNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/CloneNamespacePipelineReleaseBody'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/trigger:
    post:
      summary: Trigger a pipeline release
      description: |-
        Triggers the synchronous execution of of a pipeline. While the trigger
        endpoint (where the release version isn't specified) triggers the pipeline
        at its latest release, this method allows the client to specified any
        committed release.

        The pipeline is identified by its resource name, formed by its parent
        namespace and ID.
      operationId: PipelinePublicService_TriggerNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespacePipelineReleaseBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/releases/{releaseId}/trigger-async:
    post:
      summary: Trigger a pipeline release asynchronously
      description: |-
        Triggers the asynchronous execution of of a pipeline. While the trigger
        endpoint (where the release version isn't specified) triggers the pipeline
        at its latest release, this method allows the client to specified any
        committed release.

        The pipeline is identified by its resource name, formed by its parent
        namespace and ID.
      operationId: PipelinePublicService_TriggerAsyncNamespacePipelineRelease
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerAsyncNamespacePipelineReleaseResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pipelineId
          description: Pipeline ID
          in: path
          required: true
          type: string
        - name: releaseId
          description: Release ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerAsyncNamespacePipelineReleaseBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/secrets:
    get:
      summary: List secrets
      description: |-
        Returns a paginated list of secrets that belong to the specified
        namespace.
      operationId: PipelinePublicService_ListNamespaceSecrets
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespaceSecretsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of secrets to return. If this parameter is unspecified,
            at most 10 pipelines will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page secret.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
    post:
      summary: Create a secret
      description: Creates a new secret under the parenthood of an namespace.
      operationId: PipelinePublicService_CreateNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secret
          description: The properties of the secret to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Secret'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/secrets/{secretId}:
    get:
      summary: Get a secret
      description: |-
        Returns the details of an namespace-owned secret by its resource name,
        which is defined by the parent namespace and the ID of the secret.
      operationId: PipelinePublicService_GetNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secretId
          description: Secret ID
          in: path
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
    delete:
      summary: Delete a secret
      description: |-
        Deletes a secret, accesing it by its resource name, which is defined by
        the parent namespace and the ID of the secret.
      operationId: PipelinePublicService_DeleteNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secretId
          description: Secret ID
          in: path
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
    patch:
      summary: Update a secret
      description: |-
        Udpates a secret, accessing it by its resource name, which is defined by

        In REST requests, only the supplied secret fields will be taken into
        account when updating the resource.
      operationId: PipelinePublicService_UpdateNamespaceSecret
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateNamespaceSecretResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: secretId
          description: Secret ID
          in: path
          required: true
          type: string
        - name: secret
          description: The secret fields to update.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Secret'
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/component-definitions:
    get:
      summary: List component definitions
      description: |-
        Returns a paginated list of component definitions, regardless their type.
        This offers a single source of truth, with pagination and filter
        capabilities, for the components that might be used in a pipeline.
      operationId: PipelinePublicService_ListComponentDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListComponentDefinitionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of component definitions to return. If this parameter
            is unspecified, at most 10 definitions will be returned. The cap value for
            this parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (removes the `spec`
            field).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `component_type="COMPONENT_TYPE_AI"`.
            - Example: `tasks:"TASK_TEXT_GENERATION"`.
          in: query
          required: false
          type: string
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/operations/{operationId}:
    get:
      summary: Get the details of a long-running operation
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations such as asynchronous pipeline triggers.
      operationId: PipelinePublicService_GetOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: operationId
          description: |-
            The name of the operation resource. Asynchronous methods will contain this
            information in their response.
          in: path
          required: true
          type: string
        - name: Instill-Requester-Uid
          description: Indicates the authenticated user is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/pipelines/{pipelineId}/runs:
    get:
      summary: List Pipeline Runs
      description: |-
        Returns a paginated list of runs for a given pipeline. When the requester
        is the owner of the pipeline, they will be able to all the pipeline runs,
        regardless who requested the trigger (the view will be partial to hide
        sensitive data like e.g. the trigger input and output). Other requesters
        will only be able to see the runs requested by themselves.
      operationId: PipelinePublicService_ListPipelineRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelineRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The ID of the owner of the pipeline.
          in: path
          required: true
          type: string
        - name: pipelineId
          description: The ID of the pipeline for which the runs will be listed.
          in: path
          required: true
          type: string
        - name: page
          description: The page number to retrieve.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          description: |-
            The maximum number of items per page to return. The default and cap values
            are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/pipeline-runs/{pipelineRunId}/component-runs:
    get:
      summary: List Component Runs
      description: Returns the information of each component execution within a pipeline run.
      operationId: PipelinePublicService_ListComponentRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListComponentRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pipelineRunId
          description: The unique identifier of the pipeline run to list component runs for.
          in: path
          required: true
          type: string
        - name: page
          description: The page number to retrieve.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          description: |-
            The maximum number of items per page to return. The default and cap values
            are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired run view in the response.
            The basic view excludes input / output data.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
             - VIEW_RECIPE: Contains the recipe of the resource.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
            - VIEW_RECIPE
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/dashboard/pipelines/runs:
    get:
      summary: List Pipeline Runs By Requester
      description: |-
        Returns a paginated list of runs for requested by a namespace. The
        response may contain runs from several pipelines.
      operationId: PipelinePublicService_ListPipelineRunsByRequester
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelineRunsByRequesterResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: page
          description: The page number to retrieve.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageSize
          description: |-
            The maximum number of items per page to return. The default and cap values
            are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            The following filters are supported:
            - `status`
            - `source`

            **Example**: `status="RUN_STATUS_COMPLETED"`.
          in: query
          required: false
          type: string
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
        - name: start
          description: |-
            Beginning of the time range from which the records will be fetched.
            The default value is the beginning of the current day, in UTC.
          in: query
          required: false
          type: string
          format: date-time
        - name: stop
          description: |-
            End of the time range from which the records will be fetched.
            The default value is the current timestamp.
          in: query
          required: false
          type: string
          format: date-time
        - name: requesterId
          description: Requester ID.
          in: query
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/connections:
    get:
      summary: List namespace connections
      description: Returns a paginated list of connections created by a namespace.
      operationId: PipelinePublicService_ListNamespaceConnections
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespaceConnectionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: pageSize
          description: The maximum number of items to return. The default and cap values are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token. By default, the first page will be returned.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
            The following filters are supported:
            - `integrationId`
            - `qConnection` (fuzzy search on connection ID, integration title or vendor)

            **Examples**:
            - List connections where app name, vendor or connection ID match `googl`: `q="googl"`.
            - List connections where the component type is `openai` (e.g. to setup a connector within a pipeline): `integrationId="openai"`.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
    post:
      summary: Create a connection
      description: Creates a connection under the ownership of a namespace.
      operationId: PipelinePublicService_CreateNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: ID of the namespace that owns the connection.
          in: path
          required: true
          type: string
        - name: connection
          description: Properties of the connection to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Connection'
            required:
              - connection
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/connections/{connectionId}:
    get:
      summary: Get a namespace connection
      description: Returns the details of a connection.
      operationId: PipelinePublicService_GetNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired view in the response.

             - VIEW_BASIC: Default view.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Pipeline
      x-stage: beta
    delete:
      summary: Delete a connection
      description: Deletes a connection.
      operationId: PipelinePublicService_DeleteNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
    patch:
      summary: Update a connection
      description: Updates a connection with the supplied connection fields.
      operationId: PipelinePublicService_UpdateNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: ID of the namespace that owns the connection.
          in: path
          required: true
          type: string
        - name: connectionId
          description: ID of the connection to be updated, as present in the database.
          in: path
          required: true
          type: string
        - name: connection
          description: |-
            Connection object with the new properties to be updated. Immutable and
            output-only fields will be ignored. The Setup property must be updated
            in block (no partial update is supported).
          in: body
          required: true
          schema:
            $ref: '#/definitions/Connection'
            required:
              - connection
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/connections/{connectionId}/test:
    post:
      summary: Test a connection
      description: |-
        Makes a request to the 3rd party app that the connection is configured to
        communicate with, and checks the result of the call. If the test fails,
        the response status and error message will provide more information about
        the failure.

        Note that this action might affect the quota or billing of the integrated
        account in the 3rd party app.
      operationId: PipelinePublicService_TestNamespaceConnection
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TestNamespaceConnectionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/namespaces/{namespaceId}/connections/{connectionId}/referenced-pipelines:
    get:
      summary: List pipelines that reference a connection
      description: |-
        Returns a paginated list with the IDs of the pipelines that reference a
        given connection. All the pipelines will belong to the same namespace as
        the connection.
      operationId: PipelinePublicService_ListPipelineIDsByConnectionID
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelineIDsByConnectionIDResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: connectionId
          description: Connection ID.
          in: path
          required: true
          type: string
        - name: pageSize
          description: The maximum number of items to return. The default and cap values are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token. By default, the first page will be returned.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
            The following filters are supported:
            - `q` (fuzzy search on pipeline ID)
          in: query
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/integrations:
    get:
      summary: List integrations
      description: Returns a paginated list of available integrations.
      operationId: PipelinePublicService_ListIntegrations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListIntegrationsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: The maximum number of items to return. The default and cap values are 10 and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token. By default, the first page will be returned.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter expression.
            The following filters are supported:
            - `qIntegration` (fuzzy search on title or vendor)

            **Examples**:
            - List integrations where app name or vendor match `googl`: `q="googl"`.
          in: query
          required: false
          type: string
      tags:
        - Pipeline
      x-stage: beta
  /v1beta/integrations/{integrationId}:
    get:
      summary: Get an integration
      description: Returns the details of an integration.
      operationId: PipelinePublicService_GetIntegration
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetIntegrationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: integrationId
          description: Integration ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired view in the response.

             - VIEW_BASIC: Default view.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Pipeline
      x-stage: beta
definitions:
  Any:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  ApiToken:
    type: object
    properties:
      lastUseTime:
        type: string
        format: date-time
        description: |-
          When users trigger a pipeline which uses an API token, the token is
          updated with the current time. This field is used to track the last time
          the token was used.
      name:
        type: string
        description: |-
          The name of the token, define by its ID.
          - Format: `tokens/{token.id}`.
        readOnly: true
      uid:
        type: string
        description: API token UUID.
        readOnly: true
      id:
        type: string
        description: |-
          API token resource ID (used in `name` as the last segment). This conforms
          to RFC-1034, which restricts to letters, numbers, and hyphen, with the
          first character a letter, the last a letter or a number, and a 63
          character maximum.

          This field can reflect the client(s) that will use the token.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      accessToken:
        type: string
        description: |-
          An opaque access token representing the API token string.

          To validate the token, the recipient of the token needs to call the server
          that issued the token.
        readOnly: true
      state:
        description: State.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ApiToken.State'
      tokenType:
        type: string
        description: Token type. Value is fixed to "Bearer".
        readOnly: true
      ttl:
        type: integer
        format: int32
        description: The time-to-live in seconds for this resource.
      expireTime:
        type: string
        format: date-time
        description: Expiration time.
    description: API tokens allow users to make requests to the Instill AI API.
  ApiToken.State:
    type: string
    enum:
      - STATE_INACTIVE
      - STATE_ACTIVE
      - STATE_EXPIRED
    description: |-
      State describes the state of an API token.

       - STATE_INACTIVE: Inactive.
       - STATE_ACTIVE: Active.
       - STATE_EXPIRED: Expired.
  AuthenticatedUser:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      email:
        type: string
        description: Email.
      customerId:
        type: string
        description: Stripe customer ID. This field is used in Instill Cloud.
        readOnly: true
      role:
        type: string
        description: |-
          Role.

          It must be one of the following allowed roles:
          - `manager`
          - `ai-researcher`
          - `ai-engineer`
          - `data-engineer`
          - `data-scientist`
          - `analytics-engineer`
          - `hobbyist`
      newsletterSubscription:
        type: boolean
        description: This defines whether the user is subscribed to Instill AI's newsletter.
      cookieToken:
        type: string
        description: Console cookie token.
      onboardingStatus:
        description: Onboarding Status.
        allOf:
          - $ref: '#/definitions/OnboardingStatus'
      profile:
        description: Profile.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserProfile'
      isEligibleForOrganizationTrial:
        type: boolean
        description: Is eligible for organization trial.
        readOnly: true
    description: |-
      AuthenticatedUser contains the information of an authenticated user, i.e.,
      the public user information plus some fields that should only be accessed by
      the user themselves.
    required:
      - id
      - email
      - newsletterSubscription
  CallResponse:
    type: object
    properties:
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
    title: CallResponse represents a response for model inference
  Catalog:
    type: object
    properties:
      catalogUid:
        type: string
        description: The catalog uid.
      catalogId:
        type: string
        description: The catalog id.
      name:
        type: string
        description: The catalog name.
      description:
        type: string
        description: The catalog description.
      createTime:
        type: string
        description: The creation time of the catalog.
      updateTime:
        type: string
        description: The last update time of the catalog.
      ownerName:
        type: string
        description: The owner/namespace of the catalog.
      tags:
        type: array
        items:
          type: string
        description: The catalog tags.
      convertingPipelines:
        type: array
        items:
          type: string
        description: The catalog converting pipelines.
      splittingPipelines:
        type: array
        items:
          type: string
        description: The catalog splitting pipelines.
      embeddingPipelines:
        type: array
        items:
          type: string
        description: The catalog embedding pipelines.
      downstreamApps:
        type: array
        items:
          type: string
        title: The downstream apps
      totalFiles:
        type: integer
        format: int64
        description: The total files in catalog.
      totalTokens:
        type: integer
        format: int64
        description: The total tokens in catalog.
      usedStorage:
        type: string
        format: uint64
        description: The current used storage in catalog.
      summarizingPipelines:
        type: array
        items:
          type: string
        description: The catalog summarizing pipelines.
    description: Catalog represents a catalog.
  CatalogRun:
    type: object
    properties:
      uid:
        type: string
        description: Unique identifier for each run.
        readOnly: true
      catalogUid:
        type: string
        title: catalog uid
        readOnly: true
      fileUids:
        type: array
        items:
          type: string
        description: The file uids.
        readOnly: true
      action:
        description: Action of the catalog run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/CatalogRunAction'
      status:
        description: Current status of the run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunStatus'
      source:
        description: Origin of the run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunSource'
      totalDuration:
        type: integer
        format: int32
        description: Time taken to complete the run in milliseconds.
        readOnly: true
      runnerId:
        type: string
        title: Runner ID. (User UID)
        readOnly: true
      namespaceId:
        type: string
        description: Namespace ID.
        readOnly: true
      payload:
        type: object
        description: Run request payload.
        readOnly: true
      startTime:
        type: string
        format: date-time
        description: Time when the run started execution.
        readOnly: true
      completeTime:
        type: string
        format: date-time
        description: Time when the run completed.
        readOnly: true
      error:
        type: string
        description: Error message if the run failed.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: Credits used of internal accounting metric.
        readOnly: true
    description: CatalogRun represents a single execution of a catalog action.
  CatalogRunAction:
    type: string
    enum:
      - CATALOG_RUN_ACTION_CREATE
      - CATALOG_RUN_ACTION_UPDATE
      - CATALOG_RUN_ACTION_DELETE
      - CATALOG_RUN_ACTION_CREATE_FILE
      - CATALOG_RUN_ACTION_PROCESS_FILE
      - CATALOG_RUN_ACTION_DELETE_FILE
    description: |-
      CatalogRunAction describes the actions a user has over a catalog.

       - CATALOG_RUN_ACTION_CREATE: Create catalog.
       - CATALOG_RUN_ACTION_UPDATE: Update catalog.
       - CATALOG_RUN_ACTION_DELETE: Delete catalog.
       - CATALOG_RUN_ACTION_CREATE_FILE: Upload catalog file.
       - CATALOG_RUN_ACTION_PROCESS_FILE: Process catalog file.
       - CATALOG_RUN_ACTION_DELETE_FILE: Delete catalog file.
  CatalogType:
    type: string
    enum:
      - CATALOG_TYPE_PERSISTENT
      - CATALOG_TYPE_EPHEMERAL
    description: |-
      - CATALOG_TYPE_PERSISTENT: PERSISTENT
       - CATALOG_TYPE_EPHEMERAL: EPHEMERAL
    title: Catalog Type. e.g. "persistent" or "ephemeral"
  CheckNamespaceAdminResponse:
    type: object
    properties:
      type:
        description: Namespace type.
        allOf:
          - $ref: '#/definitions/CheckNamespaceAdminResponse.Namespace'
      uid:
        type: string
        description: Namespace UID.
      user:
        description: User.
        allOf:
          - $ref: '#/definitions/v1beta.User'
      organization:
        description: Organization.
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      CheckNamespaceAdminResponse contains the availability of a namespace or the type
      of resource that's using it.
  CheckNamespaceAdminResponse.Namespace:
    type: string
    enum:
      - NAMESPACE_AVAILABLE
      - NAMESPACE_USER
      - NAMESPACE_ORGANIZATION
      - NAMESPACE_RESERVED
    description: |-
      Namespace contains information about the availability of a namespace.

       - NAMESPACE_AVAILABLE: Available.
       - NAMESPACE_USER: Namespace belongs to a user.
       - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.
       - NAMESPACE_RESERVED: Reserved.
  CheckNamespaceByUIDAdminResponse:
    type: object
    properties:
      type:
        description: Namespace type.
        allOf:
          - $ref: '#/definitions/CheckNamespaceByUIDAdminResponse.Namespace'
      id:
        type: string
        description: Namespace ID.
      user:
        description: User.
        allOf:
          - $ref: '#/definitions/v1beta.User'
      organization:
        description: Organization.
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      CheckNamespaceByUIDAdminResponse contains the availability of a namespace or the type
      of resource that's using it.
  CheckNamespaceByUIDAdminResponse.Namespace:
    type: string
    enum:
      - NAMESPACE_AVAILABLE
      - NAMESPACE_USER
      - NAMESPACE_ORGANIZATION
      - NAMESPACE_RESERVED
    description: |-
      Namespace contains information about the availability of a namespace.

       - NAMESPACE_AVAILABLE: Available.
       - NAMESPACE_USER: Namespace belongs to a user.
       - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.
       - NAMESPACE_RESERVED: Reserved.
  CheckNamespaceRequest:
    type: object
    properties:
      id:
        type: string
        description: The namespace ID to be checked.
    description: |-
      CheckNamespaceRequest represents a request to verify if a namespace is
      available.
    required:
      - id
  CheckNamespaceResponse:
    type: object
    properties:
      type:
        description: Namespace type.
        allOf:
          - $ref: '#/definitions/CheckNamespaceResponse.Namespace'
    description: |-
      CheckNamespaceResponse contains the availability of a namespace or the type
      of resource that's using it.
  CheckNamespaceResponse.Namespace:
    type: string
    enum:
      - NAMESPACE_AVAILABLE
      - NAMESPACE_USER
      - NAMESPACE_ORGANIZATION
      - NAMESPACE_RESERVED
    description: |-
      Namespace contains information about the availability of a namespace.

       - NAMESPACE_AVAILABLE: Available.
       - NAMESPACE_USER: Namespace belongs to a user.
       - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.
       - NAMESPACE_RESERVED: Reserved.
  ChunkType:
    type: string
    enum:
      - CHUNK_TYPE_TEXT
      - CHUNK_TYPE_IMAGE
      - CHUNK_TYPE_AUDIO
      - CHUNK_TYPE_VIDEO
    description: |-
      ChunkType contains the different types of a chunk.

       - CHUNK_TYPE_TEXT: Text.
       - CHUNK_TYPE_IMAGE: Image.
       - CHUNK_TYPE_AUDIO: Audio.
       - CHUNK_TYPE_VIDEO: Video.
  CloneNamespacePipelineBody:
    type: object
    properties:
      description:
        type: string
        description: Pipeline description.
      sharing:
        description: Pipeline sharing information.
        allOf:
          - $ref: '#/definitions/Sharing'
      targetNamespaceId:
        type: string
        description: Target Namespace ID.
      targetPipelineId:
        type: string
        description: Target Pipeline ID.
    description: |-
      CloneNamespacePipelineRequest represents a request to clone a pipeline owned by a
      user.
    required:
      - targetNamespaceId
      - targetPipelineId
  CloneNamespacePipelineReleaseBody:
    type: object
    properties:
      description:
        type: string
        description: Pipeline description.
      sharing:
        description: Pipeline sharing information.
        allOf:
          - $ref: '#/definitions/Sharing'
      targetNamespaceId:
        type: string
        description: Target Namespace ID.
      targetPipelineId:
        type: string
        description: Target Pipeline ID.
    description: |-
      CloneNamespacePipelineReleaseRequest represents a request to clone a pipeline
      release owned by a user.
    required:
      - targetNamespaceId
      - targetPipelineId
  CloneNamespacePipelineReleaseResponse:
    type: object
    description: CloneNamespacePipelineReleaseResponse contains a cloned pipeline.
  CloneNamespacePipelineResponse:
    type: object
    description: CloneNamespacePipelineResponse contains a cloned pipeline.
  ComponentDefinition:
    type: object
    properties:
      name:
        type: string
        title: |-
          The name of the component definition, defined by its ID.
          - Format: `component-definitions/{id}`
        readOnly: true
      uid:
        type: string
        description: Component definition UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Component definition resource ID (used in `name` as the last segment). This
          conforms to RFC-1034, which restricts to letters, numbers, and hyphen,
          with the first character a letter, the last a letter or a number, and a 63
          character maximum.
      title:
        type: string
        description: Component definition title.
        readOnly: true
      documentationUrl:
        type: string
        description: Component definition documentation URL.
        readOnly: true
      icon:
        type: string
        description: |-
          Component definition icon. This is a path that's relative to the root of
          the component implementation (see `source_url`) and that allows
          frontend applications to pull and locate the icons.
        readOnly: true
      spec:
        description: Component definition specification.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Spec'
      type:
        description: Component definition type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ComponentType'
      tombstone:
        type: boolean
        description: |-
          Component definition tombstone. If true, this configuration is permanently
          off. Otherwise, the configuration is active.
        readOnly: true
      public:
        type: boolean
        description: |-
          The public flag determines whether this connector definition is available
          to all workspaces.
        readOnly: true
      custom:
        type: boolean
        description: |-
          Component definition custom flag, i.e., whether this is a custom
          component definition.
        readOnly: true
      vendor:
        type: string
        description: Component definition vendor name.
        readOnly: true
      vendorAttributes:
        type: object
        description: Vendor-specific attributes.
        readOnly: true
      sourceUrl:
        type: string
        description: |-
          Source code URL. This points to the source code where the component is
          implemented.
        readOnly: true
      version:
        type: string
        description: |-
          Component definition version. This is a string that fulfills the SemVer
          specification (e.g. `1.0.0-beta`).
        readOnly: true
      tasks:
        type: array
        items:
          type: object
          $ref: '#/definitions/ComponentTask'
        description: List of tasks that can be executed by the component.
        readOnly: true
      description:
        type: string
        description: Short description of the component.
        readOnly: true
      releaseStage:
        description: Release stage.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ComponentDefinition.ReleaseStage'
      events:
        type: array
        items:
          type: object
          $ref: '#/definitions/ComponentEvent'
        description: List of events that can be produced by the component.
        readOnly: true
    description: ComponentDefinition describes a certain type of Component.
  ComponentDefinition.ReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_OPEN_FOR_CONTRIBUTION
      - RELEASE_STAGE_COMING_SOON
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GA
    description: |-
      - RELEASE_STAGE_OPEN_FOR_CONTRIBUTION: This component is unimplemented and community contributions are welcome
      for this component.

      It is recommended that the major and minor versions for definitions at
      this release stage is kept at 0, e.g., `0.0.1`, `0.0.4`, etc.
       - RELEASE_STAGE_COMING_SOON: The implementation of this component is planned and will be tackled by
      the Instill AI team.

      It is recommended that the major and minor versions for definitions at
      this release stage is kept at 0, e.g., `0.0.1`, `0.0.4`, etc.
       - RELEASE_STAGE_ALPHA: Initial implementation intended to gather feedback and issues from early
      adopters. Alpha releases are discouraged for production use cases.

      The `version` field in the definition must have `alpha` as its first
      pre-release identifier, e.g., `0.1.0-alpha`, `0.1.3-alpha.1`.
       - RELEASE_STAGE_BETA: The component has reached stability and no backwards incompatible
      changes are expected. Before reaching general availability, it should be
      validated by a broader group of users. Some fixes might be added during
      this process.

      The `version` field in the definition must have `beta` as its first
      pre-release identifier, e.g., `0.1.0-beta`, `0.1.3-beta.1`.
       - RELEASE_STAGE_GA: Generally available - ready for use in production and fully supported by
      Instill AI.
    title: |-
      ReleaseStage defines the release stage of a component. This is used to
      group components with the same pre-relase groups (e.g. `0.1.0-beta`,
      `0.1.0-beta.1` -> `RELEASE_STAGE_BETA`) and to include other "in progress"
      (i.e. coming soon, open for contributions) stages that may not be relevant
      within semantic versioning.
      See the documentation of each value for potential constraints between
      `version` and `release_stage` fields.`
  ComponentDefinition.View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a component definition is presented.

       - VIEW_BASIC: Default view, only includes basic information (removes the `spec`
      field).
       - VIEW_FULL: Full representation.
  ComponentEvent:
    type: object
    properties:
      name:
        type: string
        description: The event name, e.g. `EVENT_NEW`.
        readOnly: true
      title:
        type: string
        description: Title is the event name in a human-friendly format.
        readOnly: true
      description:
        type: string
        description: Description contains information about the event.
        readOnly: true
    description: |-
      ComponentEvent contains information about an event that a component can
      produce.
  ComponentRun:
    type: object
    properties:
      pipelineRunUid:
        type: string
        description: Links to the parent PipelineRun.
        readOnly: true
      componentId:
        type: string
        description: Unique identifier for each pipeline component.
        readOnly: true
      status:
        description: Completion status of the component.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunStatus'
      totalDuration:
        type: integer
        format: int32
        description: Time taken to execute the component in milliseconds.
        readOnly: true
      startTime:
        type: string
        format: date-time
        description: Time when the component started execution.
        readOnly: true
      completeTime:
        type: string
        format: date-time
        description: Time when the component finished execution.
        readOnly: true
      error:
        type: string
        description: Error message if the component failed.
        readOnly: true
      inputsReference:
        type: array
        items:
          type: object
          $ref: '#/definitions/FileReference'
        description: Input files for the run.
        readOnly: true
      inputs:
        type: array
        items:
          type: object
        description: Component input parameters.
        readOnly: true
      outputsReference:
        type: array
        items:
          type: object
          $ref: '#/definitions/FileReference'
        description: Output files from the run.
        readOnly: true
      outputs:
        type: array
        items:
          type: object
        description: Component inference outputs.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: Credits used of internal accounting metric.
        readOnly: true
      blobDataExpirationTime:
        type: string
        format: date-time
        description: |-
          Expiration time for the blob data associated with the component run (e.g.
          input / output data). When the run is accessed after the expiration, that
          information will be empty, but this field will allow the user identify
          that the data isn't there because it has expired.
        readOnly: true
    description: ComponentRun represents the execution details of a single component within a pipeline run.
  ComponentTask:
    type: object
    properties:
      name:
        type: string
        description: The task name, e.g. `TASK_TEXT_GENERATION`.
        readOnly: true
      title:
        type: string
        description: Title is the task name in a human-friendly format.
        readOnly: true
      description:
        type: string
        description: Description contains information about the task.
        readOnly: true
    description: |-
      ComponentTask contains information about a task that a component can
      perform.
  ComponentType:
    type: string
    enum:
      - COMPONENT_TYPE_AI
      - COMPONENT_TYPE_DATA
      - COMPONENT_TYPE_OPERATOR
      - COMPONENT_TYPE_APPLICATION
      - COMPONENT_TYPE_GENERIC
    description: |-
      ComponentType defines the component type based on its task features.

       - COMPONENT_TYPE_AI: Connect with an AI model.
       - COMPONENT_TYPE_DATA: Connect with a remote data source.
       - COMPONENT_TYPE_OPERATOR: Manipulate data.
       - COMPONENT_TYPE_APPLICATION: Connect with an external application.
       - COMPONENT_TYPE_GENERIC: Generic.
  Connection:
    type: object
    properties:
      uid:
        type: string
        description: UUID-formatted unique identifier.
        readOnly: true
      id:
        type: string
        description: ID.
      namespaceId:
        type: string
        description: ID of the namespace owning the connection.
        readOnly: true
      integrationId:
        type: string
        description: |-
          Integration ID. It determines for which type of components can reference
          this connection.
      integrationTitle:
        type: string
        description: |-
          Integration title. This helps the console display the results grouped by
          integration ID without needing an extra call to fetch title by integration
          ID.
        readOnly: true
      method:
        description: |-
          Connection method. It references the setup schema provided by the
          integration.
        allOf:
          - $ref: '#/definitions/Method'
      setup:
        type: object
        description: |-
          Connection details. This field is required on creation, optional on view.
          When viewing the connection details, the setup values will be redacted.
      scopes:
        type: array
        items:
          type: string
        description: |-
          A list of scopes that identify the resources that the connection will be
          able to access on the user's behalf. This is typically passed on creation
          when the setup has been generated through an OAuth flow with a limited set
          of scopes.
      identity:
        type: string
        description: |-
          When the connection method is METHOD_OAUTH, this field will hold the
          identity (e.g., email, username) with which the access token has been
          generated.
      oAuthAccessDetails:
        type: object
        description: |-
          When the connection method is METHOD_OAUTH, the access token might come
          with some extra information that might vary across vendors. This
          information is passed as connection metadata.
      view:
        title: |-
          View defines how the connection is presented. The following fields are
          only shown in the FULL view:
          - setup
          - scopes
          - oAuthAccessDetails
        readOnly: true
        allOf:
          - $ref: '#/definitions/pipeline.v1beta.View'
      createTime:
        type: string
        format: date-time
        description: Creation timestamp.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Last update timestamp.
        readOnly: true
    description: |-
      Connection contains the parameters to communicate with a 3rd party app. A
      component may reference a connection in their setup. One connection may be
      used by several components and pipelines.
    required:
      - id
      - integrationId
      - method
      - setup
  ContentType:
    type: string
    enum:
      - CONTENT_TYPE_CHUNK
      - CONTENT_TYPE_SUMMARY
      - CONTENT_TYPE_AUGMENTED
    description: |-
      ContentType describes the type of a chunk content.

       - CONTENT_TYPE_CHUNK: Chunk.
       - CONTENT_TYPE_SUMMARY: Summary.
       - CONTENT_TYPE_AUGMENTED: Augmented.
  CreateCatalogBody:
    type: object
    properties:
      name:
        type: string
        description: The catalog name.
      description:
        type: string
        description: The catalog description.
      tags:
        type: array
        items:
          type: string
        description: The catalog tags.
      type:
        title: The catalog type. default is PERSISTENT
        allOf:
          - $ref: '#/definitions/CatalogType'
      convertingPipelines:
        type: array
        items:
          type: string
        description: |-
          Pipelines used for converting documents (i.e., files with pdf, doc[x] or
          ppt[x] extension) to Markdown. The strings in the list identify the
          pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
          The pipeline recipes MUST have the following variable and output fields:
          ```yaml variable
          variable:
            document_input:
              title: document-input
              description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
              type: file
          ```
          ```yaml output
          output:
           convert_result:
             title: convert-result
             value: ${merge-markdown-refinement.output.results[0]}
          ```
          Other variable and output fields will be ignored.

          The pipelines will be executed in order until one produces a successful,
          non-empty result.

          If no pipelines are provided, a default pipeline will be used. For
          non-document catalog files, the conversion pipeline is deterministic (such
          files are typically trivial to convert and don't require a dedicated
          pipeline to improve the conversion performance).
    description: CreateCatalogRequest represents a request to create a catalog.
  CreateCatalogResponse:
    type: object
    properties:
      catalog:
        description: The created catalog.
        allOf:
          - $ref: '#/definitions/Catalog'
    description: CreateCatalogResponse represents a response for creating a catalog.
  CreateNamespaceConnectionResponse:
    type: object
    properties:
      connection:
        description: The created connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Connection'
    description: CreateNamespaceConnectionResponse contains the created connection.
  CreateNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The created model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: CreateNamespaceModelResponse contains the created model.
  CreateNamespacePipelineReleaseResponse:
    type: object
    properties:
      release:
        description: The created pipeline release object.
        readOnly: true
        allOf:
          - $ref: '#/definitions/PipelineRelease'
    description: CreateNamespacePipelineReleaseResponse contains the created release.
  CreateNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The created pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Pipeline'
    description: CreateNamespacePipelineResponse contains the created pipeline.
  CreateNamespaceSecretResponse:
    type: object
    properties:
      secret:
        description: The created secret resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Secret'
    description: CreateNamespaceSecretResponse contains the created secret.
  CreateOrganizationResponse:
    type: object
    properties:
      organization:
        description: The organization resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: CreateOrganizationResponse contains the created organization.
  CreateRepositoryTagResponse:
    type: object
    properties:
      tag:
        description: The created tag.
        allOf:
          - $ref: '#/definitions/RepositoryTag'
    description: CreateRepositoryTagResponse contains the created tag.
  CreateTokenResponse:
    type: object
    properties:
      token:
        description: The created API token resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ApiToken'
    description: CreateTokenResponse contains the created token.
  DataSpecification:
    type: object
    properties:
      input:
        type: object
        description: JSON schema describing the component input data.
        readOnly: true
      output:
        type: object
        description: JSON schema describing the component output data.
        readOnly: true
    description: |-
      DataSpecification describes the JSON schema of component input and output.
      Note: This message will be renamed to TaskSpecifications in the future.
  DeleteCatalogFileResponse:
    type: object
    properties:
      fileUid:
        type: string
        description: The file uid.
    title: delete file response
  DeleteCatalogResponse:
    type: object
    properties:
      catalog:
        description: The catalog identifier.
        allOf:
          - $ref: '#/definitions/Catalog'
    description: DeleteCatalogResponse represents a response for deleting a catalog.
  DeleteNamespaceConnectionResponse:
    type: object
    description: DeleteNamespaceConnectionResponse is an empty response.
  DeleteNamespaceModelResponse:
    type: object
    description: DeleteNamespaceModelResponse is an empty response.
  DeleteNamespaceModelVersionResponse:
    type: object
    description: DeleteNamespaceModelVersionResponse is an empty response.
  DeleteNamespacePipelineReleaseResponse:
    type: object
    description: DeleteNamespacePipelineReleaseResponse is an empty response.
  DeleteNamespacePipelineResponse:
    type: object
    description: DeleteNamespacePipelineResponse is an empty response.
  DeleteNamespaceSecretResponse:
    type: object
    description: DeleteNamespaceSecretResponse is an empty response.
  DeleteOrganizationMembershipResponse:
    type: object
    description: DeleteOrganizationMembershipResponse is an empty response.
  DeleteOrganizationResponse:
    type: object
    description: DeleteOrganizationResponse is an empty response.
  DeleteRepositoryTagResponse:
    type: object
    description: DeleteRepositoryTagResponse represent an empty response.
  DeleteTokenResponse:
    type: object
    description: DeleteTokenResponse is an empty response.
  DeleteUserMembershipResponse:
    type: object
    description: DeleteUserMembershipResponse is an empty response.
  DeployNamespaceModelAdminResponse:
    type: object
    title: DeployNamespaceModelAdminResponse represents a response for a deployed model
  DeployOrganizationModelAdminResponse:
    type: object
    title: |-
      DeployOrganizationModelAdminResponse represents a response for a deployed
      model
  DeployUserModelAdminResponse:
    type: object
    title: DeployUserModelAdminResponse represents a response for a deployed model
  Endpoints:
    type: object
    properties:
      webhooks:
        type: object
        additionalProperties:
          $ref: '#/definitions/WebhookEndpoint'
        description: Webhook endpoints.
        readOnly: true
    description: Endpoints describe the endpoints of a pipeline.
  ErrPipelineValidation:
    type: object
    properties:
      location:
        type: string
        title: Location
      error:
        type: string
        title: error
    description: |-
      ErrPipelineValidation contains information about a failed pipeline
      validation.
  EventSpecification:
    type: object
    properties:
      title:
        type: string
        description: Event title.
        readOnly: true
      description:
        type: string
        description: Event description.
        readOnly: true
      configSchema:
        type: object
        description: JSON schema describing the component event config data.
        readOnly: true
      messageSchema:
        type: object
        description: JSON schema describing the component event message data.
        readOnly: true
      messageExamples:
        type: array
        items:
          type: object
        description: JSON schema describing the component event examples.
        readOnly: true
    description: EventSpecification describes the JSON schema of component event setup and examples.
  File:
    type: object
    properties:
      fileUid:
        type: string
        title: file uid
        readOnly: true
      name:
        type: string
        title: file name
      type:
        title: file type
        allOf:
          - $ref: '#/definitions/FileType'
      processStatus:
        title: file process status
        readOnly: true
        allOf:
          - $ref: '#/definitions/FileProcessStatus'
      processOutcome:
        type: string
        title: file process message
        readOnly: true
      retrievable:
        type: boolean
        title: retrievable(this is reserved for future use)
        readOnly: true
      content:
        type: string
        title: content(this is reserved for future use)
      ownerUid:
        type: string
        title: owner/namespace uid
        readOnly: true
      creatorUid:
        type: string
        title: creator uid from authn token
        readOnly: true
      catalogUid:
        type: string
        title: catalog uid
        readOnly: true
      createTime:
        type: string
        format: date-time
        title: create time
        readOnly: true
      updateTime:
        type: string
        format: date-time
        title: update time
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        title: delete time
        readOnly: true
      size:
        type: string
        format: int64
        title: file size in bytes
        readOnly: true
      totalChunks:
        type: integer
        format: int32
        title: total chunks
        readOnly: true
      totalTokens:
        type: integer
        format: int32
        title: total tokens
        readOnly: true
      externalMetadata:
        type: object
        title: Custom metadata provided by the user during file upload
      objectUid:
        type: string
        description: |-
          objectUid in blob storage. user can upload to blob storage directly, then put objectUid here.
          then no need the base64 encoding for the file content.
      summary:
        type: string
        title: summary of the file
        readOnly: true
      downloadUrl:
        type: string
        title: download url of the file
        readOnly: true
      convertingPipeline:
        type: string
        description: |-
          Pipeline used for converting the file to Markdown if the file is a
          document (i.e., a file with pdf, doc[x] or ppt[x] extension). The value
          identifies the pipeline release and and MUST have the format
          `{namespaceID}/{pipelineID}@{version}`.
          The pipeline recipe MUST have the following variable and output fields:
          ```yaml variable
          variable:
            document_input:
              title: document-input
              description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
              type: file
          ```
          ```yaml output
          output:
           convert_result:
             title: convert-result
             value: ${merge-markdown-refinement.output.results[0]}
          ```
          Other variable and output fields will be ignored.

          The pipeline will be executed first, falling back to the catalog's
          conversion pipelines if the conversion doesn't yield a non-empty result
          (see the catalog creation endpoint documentation).

          For non-document catalog files, the conversion pipeline is deterministic
          (such files are typically trivial to convert and don't require a dedicated
          pipeline to improve the conversion performance).
      length:
        description: |-
          Length of the file in the specified unit type. It is defined as the number
          of positions (the unit will depend on the file type) that can be accessed
          in the file.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Position'
    title: file
  FileMediaType:
    type: string
    enum:
      - FILE_MEDIA_TYPE_DOCUMENT
      - FILE_MEDIA_TYPE_IMAGE
      - FILE_MEDIA_TYPE_AUDIO
      - FILE_MEDIA_TYPE_VIDEO
    description: |-
      FileMediaType describes the type of a catalog file.

       - FILE_MEDIA_TYPE_DOCUMENT: Document.
       - FILE_MEDIA_TYPE_IMAGE: Image.
       - FILE_MEDIA_TYPE_AUDIO: Audio.
       - FILE_MEDIA_TYPE_VIDEO: Video.
  FileMetadata:
    type: object
    properties:
      uid:
        type: string
        description: File UID.
        readOnly: true
      filename:
        type: string
        title: Filename
        readOnly: true
      fileType:
        description: File Type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/FileType'
      size:
        type: string
        format: int64
        description: Size.
        readOnly: true
      createTime:
        type: string
        format: date-time
        title: Creation timestamp
        readOnly: true
      processStatus:
        description: Processing status of the file.
        readOnly: true
        allOf:
          - $ref: '#/definitions/FileProcessStatus'
    description: FileMetadata contains information about the file.
  FileProcessStatus:
    type: string
    enum:
      - FILE_PROCESS_STATUS_NOTSTARTED
      - FILE_PROCESS_STATUS_WAITING
      - FILE_PROCESS_STATUS_CONVERTING
      - FILE_PROCESS_STATUS_CHUNKING
      - FILE_PROCESS_STATUS_EMBEDDING
      - FILE_PROCESS_STATUS_COMPLETED
      - FILE_PROCESS_STATUS_FAILED
      - FILE_PROCESS_STATUS_SUMMARIZING
    description: |-
      - FILE_PROCESS_STATUS_NOTSTARTED: NOTSTARTED
       - FILE_PROCESS_STATUS_WAITING: file is waiting for embedding process
       - FILE_PROCESS_STATUS_CONVERTING: file is converting
       - FILE_PROCESS_STATUS_CHUNKING: file is chunking
       - FILE_PROCESS_STATUS_EMBEDDING: file is embedding
       - FILE_PROCESS_STATUS_COMPLETED: completed
       - FILE_PROCESS_STATUS_FAILED: failed
       - FILE_PROCESS_STATUS_SUMMARIZING: file is summarizing
    title: file embedding process status
  FileReference:
    type: object
    properties:
      name:
        type: string
        description: Name of the file.
      type:
        type: string
        description: Format of the file (e.g., PDF, TXT, JPG).
      size:
        type: string
        format: int64
        description: Size of the file in bytes.
      url:
        type: string
        description: URL of the file (e.g., S3 URL).
    description: FileReference represents metadata for a file.
    required:
      - name
      - type
      - size
      - url
  FileType:
    type: string
    enum:
      - FILE_TYPE_TEXT
      - FILE_TYPE_PDF
      - FILE_TYPE_MARKDOWN
      - FILE_TYPE_PNG
      - FILE_TYPE_JPEG
      - FILE_TYPE_JPG
      - FILE_TYPE_HTML
      - FILE_TYPE_DOCX
      - FILE_TYPE_DOC
      - FILE_TYPE_PPT
      - FILE_TYPE_PPTX
      - FILE_TYPE_XLS
      - FILE_TYPE_XLSX
      - FILE_TYPE_CSV
    description: |-
      - FILE_TYPE_TEXT: text
       - FILE_TYPE_PDF: PDF
       - FILE_TYPE_MARKDOWN: MARKDOWN
       - FILE_TYPE_PNG: PNG(not supported yet)
       - FILE_TYPE_JPEG: JPEG(not supported yet)
       - FILE_TYPE_JPG: JPG(not supported yet)
       - FILE_TYPE_HTML: HTML
       - FILE_TYPE_DOCX: DOCX
       - FILE_TYPE_DOC: DOC
       - FILE_TYPE_PPT: PPT
       - FILE_TYPE_PPTX: PPTX
       - FILE_TYPE_XLS: XLS
       - FILE_TYPE_XLSX: XLSX
       - FILE_TYPE_CSV: CSV
    title: file type
  FruitCosts:
    type: object
    properties:
      costs:
        type: number
        format: float
  GetAuthenticatedUserResponse:
    type: object
    properties:
      user:
        description: The authenticated user resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/AuthenticatedUser'
    description: GetAuthenticatedUserResponse contains the requested authenticated user.
  GetCatalogFileResponse:
    type: object
    properties:
      file:
        description: The file.
        allOf:
          - $ref: '#/definitions/File'
    description: GetCatalogFileResponse represents a response for getting a catalog file.
  GetChatFileResponse:
    type: object
    properties:
      markdown:
        type: string
        format: byte
        title: converted markdown content
    description: GetChatFileResponse ...
  GetFileAsMarkdownResponse:
    type: object
    properties:
      markdown:
        type: string
        description: The Markdown representation of a file.
        readOnly: true
    description: |-
      GetFileAsMarkdownResponse contains a blob with the Markdown representation
      of a file.
  GetFileCatalogResponse:
    type: object
    properties:
      originalData:
        type: string
        description: Base-64 representation of the original file contents.
        readOnly: true
      fileMetadata:
        description: File metadata.
        readOnly: true
        allOf:
          - $ref: '#/definitions/FileMetadata'
      text:
        description: Converted text.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Text'
      chunks:
        type: array
        items:
          type: object
          $ref: '#/definitions/GetFileCatalogResponse.Chunk'
        description: Chunks.
        readOnly: true
    description: |-
      GetFileCatalogResponse contains the processing outputs of a file in a
      catalog.
  GetFileCatalogResponse.Chunk:
    type: object
    properties:
      uid:
        type: string
        description: Chunk UID.
        readOnly: true
      type:
        description: 'Chunk type. I.e: text, image, audio, video.'
        readOnly: true
        allOf:
          - $ref: '#/definitions/ChunkType'
      startPosition:
        type: integer
        format: int32
        description: Start position in the text.
        readOnly: true
      endPosition:
        type: integer
        format: int32
        description: End position in the text.
        readOnly: true
      content:
        type: string
        description: Content.
        readOnly: true
      tokenCount:
        type: integer
        format: int32
        description: Token count in the chunk.
        readOnly: true
      embedding:
        type: array
        items:
          type: number
          format: float
        description: Chunk embedding.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Creation time of the chunk.
        readOnly: true
      retrievable:
        type: boolean
        description: Retrievability of the chunk.
        readOnly: true
    description: Chunk is a delimited part of the converted text.
  GetFileSummaryResponse:
    type: object
    properties:
      summary:
        type: string
        title: summary of the file
        readOnly: true
    title: get file summary response
  GetIntegrationResponse:
    type: object
    properties:
      integration:
        description: The requested integration.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Integration'
    description: GetIntegrationResponse contains the requested integration.
  GetModelDefinitionResponse:
    type: object
    properties:
      modelDefinition:
        description: The model definition resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ModelDefinition'
    description: GetModelDefinitionResponse contains the requested model definition.
  GetModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      GetModelOperationRequest represents a request to query a long-running
      operation.
  GetNamespaceConnectionResponse:
    type: object
    properties:
      connection:
        description: The requested connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Connection'
    description: GetNamespaceConnectionResponse contains the requested connection.
  GetNamespaceLatestModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      GetNamespaceLatestModelOperationResponse represents a response to query a
      long-running operation.
  GetNamespaceModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      GetNamespaceModelOperationResponse represents a response to query a
      long-running operation.
  GetNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: GetNamespaceModelResponse contains the requested model.
  GetNamespacePipelineReleaseResponse:
    type: object
    properties:
      release:
        description: The pipeline release resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/PipelineRelease'
    description: GetNamespacePipelineReleaseResponse contains the requested pipeline release.
  GetNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Pipeline'
    description: GetNamespacePipelineResponse contains the requested pipeline.
  GetNamespaceSecretResponse:
    type: object
    properties:
      secret:
        description: The secret resource.
        allOf:
          - $ref: '#/definitions/Secret'
    description: GetNamespaceSecretResponse contains the requested secret.
  GetObjectDownloadURLResponse:
    type: object
    properties:
      downloadUrl:
        type: string
        title: download url
      urlExpireAt:
        type: string
        format: date-time
        title: expire at in UTC (UTC+0)
      object:
        title: object
        allOf:
          - $ref: '#/definitions/Object'
    title: GetObjectDownloadURLResponse
  GetObjectResponse:
    type: object
    properties:
      object:
        title: object
        allOf:
          - $ref: '#/definitions/Object'
    title: GetObjectResponse
  GetObjectURLResponse:
    type: object
    properties:
      objectUrl:
        title: object url
        allOf:
          - $ref: '#/definitions/ObjectURL'
    title: GetObjectURLResponse
  GetObjectUploadURLResponse:
    type: object
    properties:
      uploadUrl:
        type: string
        title: upload url
      urlExpireAt:
        type: string
        format: date-time
        title: expire at in UTC (UTC+0)
      object:
        title: object
        allOf:
          - $ref: '#/definitions/Object'
    title: GetObjectUploadURLResponse
  GetOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: GetOperationResponse contains the long-running operation details.
  GetOrganizationAdminResponse:
    type: object
    properties:
      organization:
        title: An organization resource
        allOf:
          - $ref: '#/definitions/Organization'
    title: GetOrganizationAdminResponse represents a response for an organization resource
  GetOrganizationMembershipResponse:
    type: object
    properties:
      membership:
        description: The requested organization membership.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OrganizationMembership'
    description: GetOrganizationMembershipResponse contains the organization membership.
  GetOrganizationResponse:
    type: object
    properties:
      organization:
        description: The organization resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: GetOrganizationResponse contains the requested organization.
  GetRepositoryTagResponse:
    type: object
    properties:
      tag:
        description: The created tag.
        allOf:
          - $ref: '#/definitions/RepositoryTag'
    description: GetRepositoryTagResponse contains the created tag.
  GetSourceFileResponse:
    type: object
    properties:
      sourceFile:
        title: source file(either original file or converted file)
        readOnly: true
        allOf:
          - $ref: '#/definitions/SourceFile'
    title: get source file response
  GetTokenResponse:
    type: object
    properties:
      token:
        description: The API token resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ApiToken'
    description: GetTokenResponse contains the requested token.
  GetUserAdminResponse:
    type: object
    properties:
      user:
        title: A user resource
        allOf:
          - $ref: '#/definitions/v1beta.User'
    title: GetUserAdminResponse represents a response for a user resource
  GetUserMembershipResponse:
    type: object
    properties:
      membership:
        description: The requested user membership.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserMembership'
    description: GetUserMembershipResponse contains the user membership.
  GetUserResponse:
    type: object
    properties:
      user:
        description: The user resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.User'
    description: GetUserResponse contains the requested user.
  Hardware:
    type: object
    properties:
      title:
        type: string
        title: Hardware display title
      value:
        type: string
        title: Hardware name value
    description: Hardware describes the hardware title and string value that backend consumes.
  HealthzResponse:
    type: object
    properties:
      message:
        type: string
  Integration:
    type: object
    properties:
      uid:
        type: string
        description: UUID-formatted unique identifier. It references a component definition.
        readOnly: true
      id:
        type: string
        description: |-
          Identifier of the integration, which references a component definition.
          Components with that definition ID will be able to use the connections
          produced by this integration.
        readOnly: true
      title:
        type: string
        description: Title, reflects the app name.
        readOnly: true
      description:
        type: string
        description: Short description of the integrated app.
        readOnly: true
      vendor:
        type: string
        description: Integrated app vendor name.
        readOnly: true
      icon:
        type: string
        description: |-
          Integration icon. This is a path that's relative to the root of
          the component implementation and that allows frontend applications to pull
          and locate the icons.
          See the `icon` field in the `ComponentDefinition` entity for more
          information.
        readOnly: true
      helpLink:
        description: Reference to the vendor's documentation to expand the integration details.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Link'
      setupSchema:
        type: object
        description: |-
          The connection setup field definitions. Each integration will require
          different data to connect to the 3rd party app.
        readOnly: true
      oAuthConfig:
        description: |-
          Configuration parameters required for the OAuth setup flow. This field
          will be present only if the integration supports OAuth 2.0.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OAuthConfig'
      view:
        title: |-
          View defines how the integration is presented. The following fields are
          only shown in the FULL view:
          - setupSchema
          - oAuthConfig
        readOnly: true
        allOf:
          - $ref: '#/definitions/pipeline.v1beta.View'
    description: |-
      Integration contains the parameters to create a connection between
      components and 3rd party apps.
  InviteOrganizationMembersBody:
    type: object
    properties:
      emails:
        type: array
        items:
          type: string
        description: The members to invite.
    description: |-
      InviteOrganizationMembersRequest represents a request to invite members to an
      organization.
    required:
      - emails
  InviteOrganizationMembersResponse:
    type: object
    description: |-
      InviteOrganizationMembersResponse represents a response to a request to invite
      members to an organization.
  Link:
    type: object
    properties:
      text:
        type: string
        description: Text contains the message to display.
        readOnly: true
      url:
        type: string
        description: URL contains the reference the link will redirect to.
        readOnly: true
    description: Link contains the information to display an reference to an external URL.
  ListApplicationsResponse:
    type: object
    properties:
      applicationNames:
        type: array
        items:
          type: string
  ListAvailableRegionsResponse:
    type: object
    properties:
      regions:
        type: array
        items:
          type: object
          $ref: '#/definitions/Region'
        title: A list of available region
        readOnly: true
    description: |-
      ListAvailableRegionsResponse contains a list of available
      regions and hardware types a model can be deployed on.
  ListCatalogFilesFilter:
    type: object
    properties:
      fileUids:
        type: array
        items:
          type: string
        description: File UIDs.
      processStatus:
        description: Processing status of the files.
        allOf:
          - $ref: '#/definitions/FileProcessStatus'
    description: |-
      ListCatalogFilesFilter contains a set of properties to filter a catalog file
      list by.
  ListCatalogFilesResponse:
    type: object
    properties:
      files:
        type: array
        items:
          type: object
          $ref: '#/definitions/File'
        description: The list of files.
      totalSize:
        type: integer
        format: int32
        description: The total number of files.
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
      nextPageToken:
        type: string
        title: next page token
      filter:
        description: The filter.
        allOf:
          - $ref: '#/definitions/ListCatalogFilesFilter'
    title: list files response
  ListCatalogRunsResponse:
    type: object
    properties:
      catalogRuns:
        type: array
        items:
          type: object
          $ref: '#/definitions/CatalogRun'
        description: The list of runs.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: The total number of runs matching the request.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The current page number.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The number of items per page.
        readOnly: true
    description: ListCatalogRunsResponse is the response message for ListCatalogRuns.
  ListCatalogsResponse:
    type: object
    properties:
      catalogs:
        type: array
        items:
          type: object
          $ref: '#/definitions/Catalog'
        description: The catalogs container.
    description: GetCatalogsResponse represents a response for getting all catalogs from users.
  ListChunksResponse:
    type: object
    properties:
      chunks:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha.Chunk'
        title: repeated chunks
        readOnly: true
    description: The ListChunksResponse message represents a response containing a list of chunks in the artifact system.
  ListComponentDefinitionsResponse:
    type: object
    properties:
      componentDefinitions:
        type: array
        items:
          type: object
          $ref: '#/definitions/ComponentDefinition'
        description: A list of component definition resources.
      totalSize:
        type: integer
        format: int32
        description: Total number of component definitions.
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
      page:
        type: integer
        format: int32
        description: The requested page offset.
    description: ListComponentDefinitionsResponse contains a list of component definitions.
  ListComponentRunsResponse:
    type: object
    properties:
      componentRuns:
        type: array
        items:
          type: object
          $ref: '#/definitions/ComponentRun'
        description: The list of component runs.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: The total number of component runs matching the request.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The current page number.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The number of items per page.
        readOnly: true
    description: ListComponentRunsResponse is the response message for ListComponentRuns.
  ListIntegrationsResponse:
    type: object
    properties:
      integrations:
        type: array
        items:
          type: object
          $ref: '#/definitions/Integration'
        description: A list of integrations matching the request parameters.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of items.
        readOnly: true
    description: ListIntegrationsResponse contains a paginated list of integrations.
  ListModelDefinitionsResponse:
    type: object
    properties:
      modelDefinitions:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelDefinition'
        description: A list of model definition resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of model definitions.
    description: ListModelDefinitionsResponse contains a list of model definitions.
  ListModelRunsByRequesterResponse:
    type: object
    properties:
      runs:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelRun'
        description: A list of runs resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of runs.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: |-
      ListModelRunsByRequesterResponse is the request message for
      ListModelRunsByRequester.
  ListModelRunsResponse:
    type: object
    properties:
      runs:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelRun'
        description: A list of runs resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of runs.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: ListModelRunsResponse contains a list of model runs.
  ListModelTriggerChartRecordsResponse:
    type: object
    properties:
      modelTriggerChartRecords:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelTriggerChartRecord'
        description: |-
          Model trigger counts. Until we allow filtering or grouping by fields
          like model ID, this list will contain only one element with the
          timeline of trigger counts for a given requester, regardless the model
          ID, trigger mode, final status or other fields.
    description: |-
      ListModelTriggerChartRecordsResponse contains a list of model trigger
      chart records.
  ListModelsAdminResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/Model'
        title: a list of Models
      nextPageToken:
        type: string
        title: Next page token
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    title: ListModelsAdminResponse represents a response for a list of models
  ListModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/Model'
        description: A list of model resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
        readOnly: true
    description: ListModelsResponse contains a list of models.
  ListNamespaceConnectionsResponse:
    type: object
    properties:
      connections:
        type: array
        items:
          type: object
          $ref: '#/definitions/Connection'
        description: A list of connections matching the request parameters.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of items.
        readOnly: true
    description: ListNamespaceConnectionsResponse contains a paginated list of connections.
  ListNamespaceModelVersionsResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelVersion'
        description: A list of model resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of versions.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: ListNamespaceModelVersionsResponse contains a list of models.
  ListNamespaceModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/Model'
        description: A list of model resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
        readOnly: true
    description: ListNamespaceModelsResponse contains a list of models.
  ListNamespacePipelineReleasesResponse:
    type: object
    properties:
      releases:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineRelease'
        description: A list of pipeline release resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of pipeline releases.
        readOnly: true
    description: ListNamespacePipelineReleasesResponse contains a list of pipeline releases.
  ListNamespacePipelinesResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: object
          $ref: '#/definitions/Pipeline'
        description: A list of pipeline resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of pipelines.
        readOnly: true
    description: ListNamespacePipelinesResponse contains a list of pipelines.
  ListNamespaceSecretsResponse:
    type: object
    properties:
      secrets:
        type: array
        items:
          type: object
          $ref: '#/definitions/Secret'
        description: A list of secret resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page secret.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of secret resources.
        readOnly: true
    description: ListNamespaceSecretsResponse contains a list of secrets.
  ListOrganizationMembershipsResponse:
    type: object
    properties:
      memberships:
        type: array
        items:
          type: object
          $ref: '#/definitions/OrganizationMembership'
        description: |-
          The organization memberships, i.e., the users that belong to the
          organization.
        readOnly: true
    description: ListOrganizationMembershipsResponse contains a list of memberships.
  ListOrganizationsAdminResponse:
    type: object
    properties:
      organizations:
        type: array
        items:
          type: object
          $ref: '#/definitions/Organization'
        title: A list of organizations
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of organizations.
    title: ListOrganizationsAdminResponse represents a response for a list of organizations
  ListOrganizationsResponse:
    type: object
    properties:
      organizations:
        type: array
        items:
          type: object
          $ref: '#/definitions/Organization'
        title: A list of organizations
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of organizations.
        readOnly: true
    title: ListOrganizationsResponse represents a response for a list of organizations
  ListPipelineIDsByConnectionIDResponse:
    type: object
    properties:
      pipelineIds:
        type: array
        items:
          type: string
        description: A list of pipeline IDs matching the request parameters.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of items.
        readOnly: true
    description: ListPipelineIDsByConnectionIDResponse contains a paginated list of integrations.
  ListPipelineReleasesAdminResponse:
    type: object
    properties:
      releases:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineRelease'
        description: A list of pipeline releases.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of pipeline releases.
    description: |-
      ListPipelineReleasesAdminResponse contains a list of pipeline releases
      requested by an admin user.
      For the moment, the pipeline recipes will be UID-based (permalink) instead
      of name-based. This is a temporary solution.
  ListPipelineRunsByRequesterResponse:
    type: object
    properties:
      pipelineRuns:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineRun'
        description: The list of pipeline runs.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: The total number of pipeline runs matching the request.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The current page number.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The number of items per page.
        readOnly: true
    description: ListPipelineRunsByRequesterResponse is the response message for ListPipelineRunsByRequester.
  ListPipelineRunsResponse:
    type: object
    properties:
      pipelineRuns:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineRun'
        description: The list of pipeline runs.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: The total number of pipeline runs matching the request.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The current page number.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The number of items per page.
        readOnly: true
    description: ListPipelineRunsResponse is the response message for ListPipelineRuns.
  ListPipelineTriggerChartRecordsResponse:
    type: object
    properties:
      pipelineTriggerChartRecords:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineTriggerChartRecord'
        description: |-
          Pipeline trigger counts. Until we allow filtering or grouping by fields
          like pipeline ID, this list will contain only one element with the
          timeline of trigger counts for a given requester, regardless the pipeline
          ID, trigger mode, final status or other fields.
    description: |-
      ListPipelineTriggerChartRecordsResponse contains a list of pipeline trigger
      chart records.
  ListPipelinesAdminResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: object
          $ref: '#/definitions/Pipeline'
        description: A list of pipeline resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of pipelines.
    description: |-
      ListPipelinesAdminResponse contains a list of pipelines requested by an
      admin user.
      For the moment, the pipeline recipes will be UID-based (permalink) instead
      of name-based. This is a temporary solution.
  ListPipelinesResponse:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: object
          $ref: '#/definitions/Pipeline'
        description: A list of pipeline resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of pipelines.
        readOnly: true
    description: ListPipelinesResponse contains a list of pipelines.
  ListRepositoryTagsResponse:
    type: object
    properties:
      tags:
        type: array
        items:
          type: object
          $ref: '#/definitions/RepositoryTag'
        description: A list of repository tags.
      totalSize:
        type: integer
        format: int32
        description: Total number of tags.
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
      page:
        type: integer
        format: int32
        description: The requested page offset.
    description: ListRepositoryTagsResponse contains a list of container image tags.
  ListTokensResponse:
    type: object
    properties:
      tokens:
        type: array
        items:
          type: object
          $ref: '#/definitions/ApiToken'
        description: A list of API token resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of API token resources.
    description: ListTokensResponse contains a list of API tokens.
  ListUserMembershipsResponse:
    type: object
    properties:
      memberships:
        type: array
        items:
          type: object
          $ref: '#/definitions/UserMembership'
        description: The user memberships, i.e., the organizations the user belongs to.
        readOnly: true
    description: ListUserMembershipsResponse contains a list of memberships.
  ListUsersAdminResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1beta.User'
        title: A list of users
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of users.
    title: ListUsersAdminResponse represents a response for a list of users
  ListUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1beta.User'
        description: A list of user resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of users.
        readOnly: true
    description: ListUsersResponse contains a list of users.
  LookUpConnectionAdminResponse:
    type: object
    properties:
      connection:
        description: The requested connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Connection'
    description: LookUpConnectionAdminResponse contains the requested connection.
  LookUpModelAdminResponse:
    type: object
    properties:
      model:
        title: A model resource
        allOf:
          - $ref: '#/definitions/Model'
    title: LookUpModelResponse represents a response for a model
  LookUpOrganizationAdminResponse:
    type: object
    properties:
      organization:
        title: An organization resource
        allOf:
          - $ref: '#/definitions/Organization'
    title: LookUpOrganizationAdminResponse represents a response for an organization resource by admin
  LookUpPipelineAdminResponse:
    type: object
    properties:
      pipeline:
        description: The requested pipeline.
        allOf:
          - $ref: '#/definitions/Pipeline'
    description: LookUpPipelineAdminResponse contains the requested pipeline.
  LookUpUserAdminResponse:
    type: object
    properties:
      user:
        title: A user resource
        allOf:
          - $ref: '#/definitions/v1beta.User'
    title: LookUpUserAdminResponse represents a response for a user resource by admin
  MembershipState:
    type: string
    enum:
      - MEMBERSHIP_STATE_ACTIVE
      - MEMBERSHIP_STATE_PENDING
    description: |-
      MembershipState describes the state of a user membership to an organization.

       - MEMBERSHIP_STATE_ACTIVE: Active.
       - MEMBERSHIP_STATE_PENDING: Pending, i.e., a request has been sent to the user to join an
      organization.
  Method:
    type: string
    enum:
      - METHOD_DICTIONARY
      - METHOD_OAUTH
    description: |-
      Method defines how the connection is set up.

       - METHOD_DICTIONARY: Key-value collection. The user is responsible of fetching the connection
      details from the 3rd party service.
       - METHOD_OAUTH: Access token created via OAuth 2.0 authorization.
  Model:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the model, which allows its access by owner and ID.
          - Format: `users/{user.id}/models/{model.id}`.
        readOnly: true
      uid:
        type: string
        description: Model UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Model resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.
      description:
        type: string
        description: Model description.
      modelDefinition:
        type: string
        description: The model definition that has been used to import the model.
      configuration:
        type: object
        description: |-
          Model configuration. This field is validated against the model
          specification in the model definition (i.e. the `model_spec` field in the
          model definition).
      task:
        description: Model task.
        allOf:
          - $ref: '#/definitions/Task'
      visibility:
        description: Model visibility.
        allOf:
          - $ref: '#/definitions/Model.Visibility'
      createTime:
        type: string
        format: date-time
        description: Model creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Model update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Model deletion time.
        readOnly: true
      ownerName:
        type: string
        description: Resource name of the owner.
        readOnly: true
      owner:
        description: Model owner.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Owner'
      region:
        type: string
        description: Region of choice for the particular provider to host the model.
      hardware:
        type: string
        description: Hardware of choice to serve the model.
      readme:
        type: string
        description: README holds the model documentation.
      sourceUrl:
        type: string
        description: A link to the source code of the model (e.g. to a GitHub repository).
      documentationUrl:
        type: string
        description: A link to any extra information.
      license:
        type: string
        description: License under which the model is distributed.
      profileImage:
        type: string
        description: Model profile image in base64 format.
      permission:
        description: Permission defines how a pipeline can be used.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.Permission'
      inputSchema:
        type: object
        title: Input schema for the model
        readOnly: true
      outputSchema:
        type: object
        title: Output schema for the model
        readOnly: true
      tags:
        type: array
        items:
          type: string
        description: Tags.
        readOnly: true
      versions:
        type: array
        items:
          type: string
        description: Version names.
        readOnly: true
      stats:
        description: Statistic data.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model.Stats'
    title: |-
      Model represents an AI model, i.e. a program that performs tasks as decision
      making or or pattern recognition based on its training data
    required:
      - id
      - modelDefinition
      - configuration
      - task
      - visibility
      - region
      - hardware
  Model.Stats:
    type: object
    properties:
      numberOfRuns:
        type: integer
        format: int32
        description: Number of model runs.
        readOnly: true
      lastRunTime:
        type: string
        format: date-time
        description: Last run time.
        readOnly: true
    title: Statistic data
  Model.Visibility:
    type: string
    enum:
      - VISIBILITY_PRIVATE
      - VISIBILITY_PUBLIC
    description: |-
      Visibility defines who can access the model.

       - VISIBILITY_PRIVATE: Only the owner can see the model.
       - VISIBILITY_PUBLIC: Other users can see the model.
  ModelDefinition:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the model, which allows its access by ID.
          - Format: `model-definitions/{id}`.
        readOnly: true
      uid:
        type: string
        description: Model definition UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Model definition resource ID (used in `name` as the last segment). This
          conforms to RFC-1034, which restricts to letters, numbers, and hyphen,
          with the first character a letter, the last a letter or a number, and a 63
          character maximum.
        readOnly: true
      title:
        type: string
        description: Official display title.
        readOnly: true
      documentationUrl:
        type: string
        description: Documentation URL.
        readOnly: true
      icon:
        type: string
        description: Display icon.
        readOnly: true
      releaseStage:
        description: Release stage.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.ReleaseStage'
      modelSpec:
        type: object
        description: |-
          The model specification represented by a JSON schema. It is used to
          validate the JSON configurations of a model created from a specific model
          source, and the resource spec which the model is desired to be deployed on.
          It must be a valid JSON that includes what fields are needed to
          create or display a model.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
    description: ModelDefinition defines how to configure and import a model.
  ModelOutput:
    type: object
    properties:
      output:
        type: number
        format: float
  ModelRun:
    type: object
    properties:
      uid:
        type: string
        description: Model Run UUID.
        readOnly: true
      status:
        description: Model run status.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunStatus'
      source:
        description: Run source.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunSource'
      totalDuration:
        type: integer
        format: int32
        description: Run total duration in milliseconds.
        readOnly: true
      endTime:
        type: string
        format: date-time
        description: Run end time.
        readOnly: true
      runnerId:
        type: string
        description: |-
          Runner ID. If current viewing requester does not have enough permission, it
          will return null.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: |-
          The amount of Instill Credit consumed by the run. This field will only be
          present on Instill Cloud.
        readOnly: true
      error:
        type: string
        description: Error message occurred during model run.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Model run created time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Model run updated time.
        readOnly: true
      version:
        type: string
        description: The model version identifier, which is same as image tag.
        readOnly: true
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference input.
        readOnly: true
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      modelId:
        type: string
        description: Model ID.
        readOnly: true
      requesterId:
        type: string
        description: |-
          Requester ID. The namespace used to trigger the run. This field might be
          empty if the model run belongs to a deleted namespace.
        readOnly: true
      modelNamespaceId:
        type: string
        description: ID of the namespace that owns the model.
        readOnly: true
    description: ModelRun contains information about a run of models.
  ModelTriggerChartRecord:
    type: object
    properties:
      modelId:
        type: string
        description: This field will be present when the information is grouped by model.
        readOnly: true
      timeBuckets:
        type: array
        items:
          type: string
          format: date-time
        description: Time buckets.
        readOnly: true
      triggerCounts:
        type: array
        items:
          type: integer
          format: int32
        description: Aggregated trigger count in each time bucket.
        readOnly: true
      requesterId:
        type: string
        description: The ID of the namespace that requested the model triggers.
        readOnly: true
    description: |-
      ModelTriggerChartRecord represents a timeline of model triggers. It
      contains a collection of (timestamp, count) pairs that represent the total
      model triggers in a given time bucket.
  ModelVersion:
    type: object
    properties:
      name:
        type: string
        description: |-
          The parent resource, i.e., the user that created the models.
          - Format: `users/{user.id}`.
          The resource name of the model, which allows its access by parent user
          and ID.
          - Format: `users/{user.id}/models/{model.id}`.
          The name of the Version.
          - Format: `users/{user.id}/models/{model.id}/versions/{version.id}`.
      version:
        type: string
        description: The model version identifier, which is equal to image tag.
      digest:
        type: string
        description: Unique identifier, computed from the manifest the Version refers to.
      state:
        description: Current state of this model version.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.State'
      updateTime:
        type: string
        format: date-time
        description: Version update time, i.e. timestamp of the last push.
        readOnly: true
    description: ModelVersion contains information about the version of a model.
  MoveFileToCatalogBody:
    type: object
    properties:
      fileUid:
        type: string
        description: The file uid.
      toCatalogId:
        type: string
        description: The target catalog id.
    description: MoveFileToCatalogRequest represents a request to move a file to another catalog.
    required:
      - fileUid
      - toCatalogId
  MoveFileToCatalogResponse:
    type: object
    properties:
      fileUid:
        type: string
        description: The file uid.
    description: MoveFileToCatalogResponse represents a response for moving a file to another catalog.
  NullValue:
    type: string
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.
  OAuthConfig:
    type: object
    properties:
      authUrl:
        type: string
        description: |-
          The URL of the OAuth server to initiate the authentication and
          authorization process.
        readOnly: true
      accessUrl:
        type: string
        description: |-
          The URL of the OAuth server to exchange the authorization code for an
          access token.
        readOnly: true
      scopes:
        type: array
        items:
          type: string
        description: |-
          A list of scopes that identify the resources that the connection will be
          able to access on the user's behalf.
        readOnly: true
    description: |-
      OAuthConfig contains the configuration parameters for fetching an access
      token via an OAuth 2.0 flow.
  Object:
    type: object
    properties:
      uid:
        type: string
        title: uid
      name:
        type: string
        title: name of the object
      size:
        type: string
        format: int64
        title: size in bytes
      contentType:
        type: string
        title: |-
          content type
          this is mime type from content-type header of http request or from file extension
      namespaceUid:
        type: string
        title: namespace uid
      creator:
        type: string
        title: creator
      isUploaded:
        type: boolean
        title: if file is uploaded
      path:
        type: string
        title: object path(optional)
      objectExpireDays:
        type: integer
        format: int32
        title: |-
          object live time in days
          if set to 0, the object will not be deleted automatically
      lastModifiedTime:
        type: string
        format: date-time
        title: last modified time
      createdTime:
        type: string
        format: date-time
        title: created time
      updatedTime:
        type: string
        format: date-time
        title: updated time
    title: Object
  ObjectURL:
    type: object
    properties:
      uid:
        type: string
        title: The unique identifier of the ObjectURL
      namespaceUid:
        type: string
        title: The namespace UID associated with this ObjectURL
      objectUid:
        type: string
        title: The object UID associated with this ObjectURL
      urlExpireAt:
        type: string
        format: date-time
        title: The expiration time of the URL
      minioUrlPath:
        type: string
        title: The MinIO URL path
      encodedUrlPath:
        type: string
        title: The encoded URL path
      type:
        type: string
        title: The type of URL (download or upload)
      createTime:
        type: string
        format: date-time
        title: The creation time of the ObjectURL
      updateTime:
        type: string
        format: date-time
        title: The last update time of the ObjectURL
      deleteTime:
        type: string
        format: date-time
        title: The deletion time of the ObjectURL, if applicable
    title: ObjectUploadURL
  OnboardingStatus:
    type: string
    enum:
      - ONBOARDING_STATUS_IN_PROGRESS
      - ONBOARDING_STATUS_COMPLETED
    description: |-
      OnboardingStatus describes the status of the user onboarding process.

       - ONBOARDING_STATUS_IN_PROGRESS: In progress, i.e., the user has initiated the onboarding process
      but has not yet completed it.
       - ONBOARDING_STATUS_COMPLETED: Completed.
  Organization:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the organization, defined by its ID.
          - Format: `organization/{organization.id}`.
        readOnly: true
      uid:
        type: string
        description: Organization UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      owner:
        description: The user that owns the organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.User'
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/OrganizationProfile'
      permission:
        title: Permission
        readOnly: true
        allOf:
          - $ref: '#/definitions/mgmt.v1beta.Permission'
      stats:
        description: The organization stats.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization.Stats'
    description: |-
      Organizations group several users. As entities, they can own resources such
      as pipelines or releases.
    required:
      - profile
  Organization.Stats:
    type: object
    properties:
      userCount:
        type: integer
        format: int32
        description: The number of users in the organization.
    description: The Organization stats.
  OrganizationMembership:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the membership, which allows its access by
          organization and user ID.
          - Format: `organizations/{organization.id}/memberships/{user.id}`.
        readOnly: true
      role:
        type: string
        description: Role of the user in the organization.
      state:
        description: State of the membership.
        readOnly: true
        allOf:
          - $ref: '#/definitions/MembershipState'
      user:
        description: User information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.User'
      organization:
        description: Organization information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      An organization membership defines the relationship between an organization
      and a user that is attached to it.
    required:
      - role
  OrganizationProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the organization's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: OrganizationProfile describes the public data of an organization.
  Owner:
    type: object
    properties:
      user:
        description: User.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.User'
      organization:
        description: Organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: Owner is a wrapper for User and Organization, used to embed owner information in other resources.
  PatchAuthenticatedUserResponse:
    type: object
    properties:
      user:
        description: The updated user resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/AuthenticatedUser'
    title: |-
      PatchAuthenticatedUserResponse contains the updated user.
      the authenticated user resource
  Pipeline:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the pipeline, defined by its parent and ID.
          - Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}`.
        readOnly: true
      uid:
        type: string
        description: Pipeline UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Pipeline resource ID (used in `name` as the last segment). This conforms
          to RFC-1034, which restricts to letters, numbers, and hyphen, with the
          first character a letter, the last a letter or a number, and a 63
          character maximum.
      description:
        type: string
        description: Pipeline description.
      recipe:
        type: object
        description: Recipe describes the components of a Pipeline and how they are connected.
      createTime:
        type: string
        format: date-time
        description: Pipeline creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Pipeline update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Pipeline delete time.
        readOnly: true
      sharing:
        description: Pipeline sharing information.
        allOf:
          - $ref: '#/definitions/Sharing'
      metadata:
        type: object
        description: Metadata holds console-related data such as the pipeline builder layout.
      ownerName:
        type: string
        description: Owner Name.
        readOnly: true
      releases:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineRelease'
        description: Releases holds the history of pipeline versions.
        readOnly: true
      readme:
        type: string
        description: README holds the pipeline documentation.
      permission:
        description: Permission defines how a pipeline can be used.
        readOnly: true
        allOf:
          - $ref: '#/definitions/pipeline.v1beta.Permission'
      visibility:
        description: Pipeline visibility.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Pipeline.Visibility'
      owner:
        description: Pipeline owner.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Owner'
      dataSpecification:
        description: Data specifications.
        readOnly: true
        allOf:
          - $ref: '#/definitions/DataSpecification'
      tags:
        type: array
        items:
          type: string
        description: Tags.
      stats:
        description: Statistic data.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Pipeline.Stats'
      rawRecipe:
        type: string
        description: |-
          Recipe in YAML format describes the components of a pipeline and how they
          are connected.
      sourceUrl:
        type: string
        description: A link to the source code of the pipeline (e.g. to a GitHub repository).
      documentationUrl:
        type: string
        description: A link to any extra information.
      license:
        type: string
        description: License under which the pipeline is distributed.
      profileImage:
        type: string
        description: Pipeline profile image in base64 format.
      endpoints:
        description: Pipeline endpoints.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Endpoints'
    description: |-
      A Pipeline is an end-to-end workflow that automates a sequence of components
      to process data.

      For more information, see [Pipeline](https://instill-ai.dev/docs/pipeline/introduction) in
      the official documentation.
    required:
      - recipe
  Pipeline.Stats:
    type: object
    properties:
      numberOfRuns:
        type: integer
        format: int32
        description: Number of pipeline runs.
        readOnly: true
      lastRunTime:
        type: string
        format: date-time
        description: Last run time.
        readOnly: true
      numberOfClones:
        type: integer
        format: int32
        description: Number of times this pipeline has been cloned.
        readOnly: true
    title: Statistic data
  Pipeline.View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
      - VIEW_RECIPE
    description: |-
      View defines how a Pipeline is presented.

       - VIEW_BASIC: Default view, only includes basic information.
       - VIEW_FULL: Full representation.
       - VIEW_RECIPE: Contains the recipe of the resource.
  Pipeline.Visibility:
    type: string
    enum:
      - VISIBILITY_PRIVATE
      - VISIBILITY_PUBLIC
    description: |-
      Visibility defines who can access the pipeline.

       - VISIBILITY_PRIVATE: Only the user can see the pipeline.
       - VISIBILITY_PUBLIC: Other users can see the pipeline.
  PipelineRelease:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the release, defined by its parent and ID.
          - Format: `{parent_type}/{parent.id}/pipelines/{pipeline.id}/releases/{release.id}`.
        readOnly: true
      uid:
        type: string
        description: Release UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Release resource ID (used in `name` as the last segment). It must be a
          sematic version vX.Y.Z.
      description:
        type: string
        description: Release description.
      recipe:
        type: object
        description: Recipe of the versioned pipeline.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Pipeline creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Pipeline update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Pipeline deletion time.
        readOnly: true
      alias:
        type: string
        description: Alias.
        readOnly: true
      metadata:
        type: object
        description: |-
          Key-value object with console-related data such as the pipeline builder
          layout.
      readme:
        type: string
        description: README.
      dataSpecification:
        description: Data specifications.
        readOnly: true
        allOf:
          - $ref: '#/definitions/DataSpecification'
      rawRecipe:
        type: string
        description: |-
          Recipe in YAML format describes the components of a pipeline and how they
          are connected.
      endpoints:
        description: Pipeline endpoints.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Endpoints'
    description: |-
      Pipeline releases contain the version control information of a pipeline.
      This allows users to track changes in the pipeline over time.
  PipelineRun:
    type: object
    properties:
      pipelineRunUid:
        type: string
        description: Unique identifier for each run.
        readOnly: true
      pipelineVersion:
        type: string
        description: Pipeline version used in the run.
        readOnly: true
      status:
        description: Current status of the run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunStatus'
      source:
        description: Origin of the run.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunSource'
      totalDuration:
        type: integer
        format: int32
        description: Time taken to complete the run in milliseconds.
        readOnly: true
      runnerId:
        type: string
        description: |-
          Runner ID. The authenticated user that triggered the run. If current
          viewing requester does not have enough permission, it will return null.
        readOnly: true
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters.
        readOnly: true
      outputs:
        type: array
        items:
          type: object
        description: Pipeline inference outputs.
        readOnly: true
      recipeSnapshot:
        type: object
        description: Snapshot of the pipeline recipe used for this run.
        readOnly: true
      startTime:
        type: string
        format: date-time
        description: Time when the run started execution.
        readOnly: true
      completeTime:
        type: string
        format: date-time
        description: Time when the run completed.
        readOnly: true
      error:
        type: string
        description: Error message if the run failed.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: Credits used of internal accounting metric.
        readOnly: true
      dataSpecification:
        description: Data specifications.
        readOnly: true
        allOf:
          - $ref: '#/definitions/DataSpecification'
      pipelineId:
        type: string
        title: The ID of the pipeline
        readOnly: true
      requesterId:
        type: string
        description: |-
          Requester ID. The namespace used to trigger the run. This field might be
          empty if the pipeline run belongs to a deleted namespace.
        readOnly: true
      pipelineNamespaceId:
        type: string
        description: ID of the namespace that owns the pipeline.
        readOnly: true
      blobDataExpirationTime:
        type: string
        format: date-time
        description: |-
          Expiration time for the blob data associated with the pipeline run (e.g.
          input data, recipe). When the run is accessed after the expiration, that
          information will be empty, but this field will allow the user identify
          that the data isn't there because it has expired.
        readOnly: true
    description: PipelineRun represents a single execution of a pipeline.
  PipelineTriggerChartRecord:
    type: object
    properties:
      pipelineId:
        type: string
        description: This field will be present when the information is grouped by pipeline.
        readOnly: true
      timeBuckets:
        type: array
        items:
          type: string
          format: date-time
        description: Time buckets.
        readOnly: true
      triggerCounts:
        type: array
        items:
          type: integer
          format: int32
        description: Aggregated trigger count in each time bucket.
        readOnly: true
      requesterId:
        type: string
        description: The ID of the namespace that requested the pipeline triggers.
        readOnly: true
    description: |-
      PipelineTriggerChartRecord represents a timeline of pipeline triggers. It
      contains a collection of (timestamp, count) pairs that represent the total
      pipeline triggers in a given time bucket.
  Position:
    type: object
    properties:
      unit:
        description: Unit of measurement for the position.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Unit'
      coordinates:
        type: array
        items:
          type: integer
          format: int64
        description: Position value.
        readOnly: true
    description: |-
      Position within a file, as coordinates in a a specific unit. The
      number of dimensions of the coordinate depends on the unit type.
  ProcessCatalogFilesRequest:
    type: object
    properties:
      fileUids:
        type: array
        items:
          type: string
        description: The file uid.
    title: Process Catalog File Request
    required:
      - fileUids
  ProcessCatalogFilesResponse:
    type: object
    properties:
      files:
        type: array
        items:
          type: object
          $ref: '#/definitions/File'
        description: The file uid.
    title: Process Catalog File Response
  QuestionAnsweringBody:
    type: object
    properties:
      question:
        type: string
        description: Text prompt with the question.
      topK:
        type: integer
        format: int32
        description: 'Top K. Default value: 5.'
      fileUids:
        type: array
        items:
          type: string
        description: |-
          File UIDs. When this field is provided, the response will only use the
          specified files to build the answer. The UIDs must be UUID-formatted
          strings.
    title: QuestionAnsweringRequest
  QuestionAnsweringResponse:
    type: object
    properties:
      answer:
        type: string
        title: answer to the question
      similarChunks:
        type: array
        items:
          type: object
          $ref: '#/definitions/SimilarityChunk'
        title: chunks
    title: QuestionAnsweringResponse
  Reference:
    type: object
    properties:
      start:
        description: Start position of the chunk within the file.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Position'
      end:
        description: End position of the chunk within the file.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Position'
    description: Reference represents the position of a chunk within a file.
  Region:
    type: object
    properties:
      regionName:
        type: string
        title: Concatenate name of provider and region
      hardware:
        type: array
        items:
          type: object
          $ref: '#/definitions/Hardware'
        title: Hardware describes the available hardware types in this region
    description: |-
      Region describes the supported cloud provider and regions, with
      their supported GPU respectively.
  RenameNamespaceModelBody:
    type: object
    properties:
      newModelId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `namespaces/{namespace.id}/models/{new_model_id}`.
    title: RenameNamespaceModelRequest represents a request to rename a model
    required:
      - newModelId
  RenameNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The renamed model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: RenameNamespaceModelResponse contains a renamed model.
  RenameNamespacePipelineBody:
    type: object
    properties:
      newPipelineId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `namespaces/{namespace.id}/pipelines/{new_pipeline_id}`.
    description: |-
      RenameNamespacePipelineRequest represents a request to rename the name of a
      pipeline owned by a namespace.
    required:
      - newPipelineId
  RenameNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The renamed pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Pipeline'
    description: RenameNamespacePipelineResponse contains a renamed pipeline.
  RepositoryTag:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the tag, defined by its parent repository and ID.
          - Format: `repositories/{repository.id}/tags/{tag.id}`.
      id:
        type: string
        description: The tag identifier.
      digest:
        type: string
        description: Unique identifier, computed from the manifest the tag refers to.
      updateTime:
        type: string
        format: date-time
        description: Tag update time, i.e. timestamp of the last push.
        readOnly: true
    description: |-
      RepositoryTag contains information about the version of some content in a
      repository.
  Role:
    type: string
    enum:
      - ROLE_VIEWER
      - ROLE_EXECUTOR
    description: |-
      Role describes the permissions a user has over a resource.

       - ROLE_VIEWER: Viewers can see the resource properties.
       - ROLE_EXECUTOR: Executors can execute the resource (e.g. trigger a pipeline).
  RunSource:
    type: string
    enum:
      - RUN_SOURCE_CONSOLE
      - RUN_SOURCE_API
    description: |-
      RunSource defines the source of a pipeline or model run.

       - RUN_SOURCE_CONSOLE: Run from frontend UI.
       - RUN_SOURCE_API: Run from API or SDK.
  RunStatus:
    type: string
    enum:
      - RUN_STATUS_PROCESSING
      - RUN_STATUS_COMPLETED
      - RUN_STATUS_FAILED
      - RUN_STATUS_QUEUED
    description: |-
      RunStatus defines the status of a pipeline or model run.

       - RUN_STATUS_PROCESSING: Run in progress.
       - RUN_STATUS_COMPLETED: Run succeeded.
       - RUN_STATUS_FAILED: Run failed.
       - RUN_STATUS_QUEUED: Run is waiting to be executed.
  SearchChunksResponse:
    type: object
    properties:
      chunks:
        type: array
        items:
          type: object
          $ref: '#/definitions/v1alpha.Chunk'
        title: repeated chunks
        readOnly: true
    title: Search chunks response
  SearchSourceFilesResponse:
    type: object
    properties:
      sourceFiles:
        type: array
        items:
          type: object
          $ref: '#/definitions/SourceFile'
        title: source files
        readOnly: true
    title: search source file response
  Secret:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the secret, define by its ID.
          - Format: `secrets/{secret.id}`.
        readOnly: true
      uid:
        type: string
        description: Secret UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Secret resource ID (used in `name` as the last segment). This conforms
          to RFC-1034, which restricts to letters, numbers, and hyphen, with the
          first character a letter, the last a letter or a number, and a 63
          character maximum.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      value:
        type: string
        description: The value of the secret, which is input-only and will never be returned in API responses.
      description:
        type: string
        title: Description
    description: API secrets allow users to make requests to the Instill AI API.
  ShareCode:
    type: object
    properties:
      user:
        type: string
        description: |-
          Defines which users will be able to access the resource through the
          code. This is a pattern that will be checked against user names.

          For now, the only accepted value is `*/*`.
      code:
        type: string
        description: The public URL that allows users to access the resource.
      enabled:
        type: boolean
        description: Defines whether the sharing option via link is enabled.
      role:
        description: Defines the role users will have over the resource.
        allOf:
          - $ref: '#/definitions/Role'
    description: ShareCode describes a sharing configuration through a link.
  Sharing:
    type: object
    properties:
      users:
        type: object
        additionalProperties:
          $ref: '#/definitions/Sharing.User'
        description: |-
          Defines sharing rules for a set of user resource names.

          Each key in this object should contain a pattern that can be matched
          against user names.

          Each value is a user sharing configuration.

          **NOTE**: For now, the only accepted key is `*/*`.
      shareCode:
        description: Defines the configuration to share a resource via link.
        allOf:
          - $ref: '#/definitions/ShareCode'
    description: |-
      Sharing contains the information to share a resource with other users.

      For more information, see [Share Pipelines](https://instill-ai.dev/docs/pipeline/share-pipeline).
  Sharing.User:
    type: object
    properties:
      enabled:
        type: boolean
        description: Defines whether the sharing option with this user is enabled.
      role:
        description: Defines the role the user will have over the resource.
        allOf:
          - $ref: '#/definitions/Role'
    description: Describes the sharing configuration with a given user.
  SimilarityChunk:
    type: object
    properties:
      chunkUid:
        type: string
        title: chunk uid
        readOnly: true
      similarityScore:
        type: number
        format: float
        title: similarity score
        readOnly: true
      textContent:
        type: string
        title: content
        readOnly: true
      sourceFile:
        type: string
        title: source file's name
        readOnly: true
      chunkMetadata:
        title: chunk
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.Chunk'
    title: similarity chunks
  SimilarityChunksSearchBody:
    type: object
    properties:
      textPrompt:
        type: string
        description: Text prompt to look for similarities.
      topK:
        type: integer
        format: int64
        description: 'Top K. Default value: 5.'
      contentType:
        description: Content type.
        allOf:
          - $ref: '#/definitions/ContentType'
      fileMediaType:
        description: File type.
        allOf:
          - $ref: '#/definitions/FileMediaType'
      fileUids:
        type: array
        items:
          type: string
        description: |-
          File UIDs. When this field is provided, the response will return only
          chunks that belong to the specified file UIDs.
    title: Similar chunk search request
    required:
      - textPrompt
  SimilarityChunksSearchResponse:
    type: object
    properties:
      similarChunks:
        type: array
        items:
          type: object
          $ref: '#/definitions/SimilarityChunk'
        title: chunks
        readOnly: true
    title: Similar chunk search response
  SourceFile:
    type: object
    properties:
      originalFileUid:
        type: string
        title: original file unique identifier
        readOnly: true
      content:
        type: string
        title: content
        readOnly: true
      createTime:
        type: string
        format: date-time
        title: creation time of the source file
        readOnly: true
      updateTime:
        type: string
        format: date-time
        title: update time of the source file
        readOnly: true
      originalFileName:
        type: string
        title: original file name
        readOnly: true
    description: The SourceFile message represents a source file in the artifact system.
  Spec:
    type: object
    properties:
      componentSpecification:
        type: object
        description: Component specification.
        readOnly: true
      dataSpecifications:
        type: object
        additionalProperties:
          $ref: '#/definitions/DataSpecification'
        description: |-
          Data specifications.
          The key represents the task, and the value is the corresponding data_specification.
          Note: This field will be renamed to task_specifications in the future.
        readOnly: true
      eventSpecifications:
        type: object
        additionalProperties:
          $ref: '#/definitions/EventSpecification'
        description: |-
          Event specifications.
          The key represents the event, and the value is the corresponding event_specification.
        readOnly: true
    description: Spec represents a specification data model.
  Task:
    type: string
    enum:
      - TASK_CLASSIFICATION
      - TASK_DETECTION
      - TASK_KEYPOINT
      - TASK_OCR
      - TASK_INSTANCE_SEGMENTATION
      - TASK_SEMANTIC_SEGMENTATION
      - TASK_TEXT_TO_IMAGE
      - TASK_IMAGE_TO_IMAGE
      - TASK_EMBEDDING
      - TASK_SPEECH_RECOGNITION
      - TASK_CHAT
      - TASK_COMPLETION
      - TASK_CUSTOM
    description: |-
      Task enumerates the AI task that a model is designed to solve.

       - TASK_CLASSIFICATION: Image Classification - classify images into predefined categories.
       - TASK_DETECTION: Object Detection - detect and localize multiple objects in images.
       - TASK_KEYPOINT: Keypoint Detection - detect and localize multiple keypoints of objects in images.
       - TASK_OCR: OCR (Optical Character Recognition) - detect and recognize text in images.
       - TASK_INSTANCE_SEGMENTATION: Instance Segmentation - detect, localize and delineate multiple objects in images.
       - TASK_SEMANTIC_SEGMENTATION: Semantic Segmentation - classify image pixels into predefined categories.
       - TASK_TEXT_TO_IMAGE: Text to Image - generate images from input text prompts.
       - TASK_IMAGE_TO_IMAGE: Image to Image - generate an image from another image.
       - TASK_EMBEDDING: Embedding - generate an embedding (a representation as coordinates) from a multimodal input.
       - TASK_SPEECH_RECOGNITION: Speech Recognition - transcribe the words in an audio input.
       - TASK_CHAT: Conversational Text Generation - generate text as responses to a dialog input.
       - TASK_COMPLETION: Completion Text Generation - generate text following the input prompt.
       - TASK_CUSTOM: Custom - custom task type for free form input/output.
  TestNamespaceConnectionResponse:
    type: object
    description: TestNamespaceConnectionResponse is an empty response.
  Text:
    type: object
    properties:
      pipelines:
        type: array
        items:
          type: string
        description: Pipelines used to process the file.
        readOnly: true
      content:
        type: string
        description: Text representation of the file.
        readOnly: true
      chunkCount:
        type: integer
        format: int32
        description: Chunk count in the text.
        readOnly: true
      tokenCount:
        type: integer
        format: int32
        title: Token count in the text
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Last update timestamp for the text.
        readOnly: true
    description: Text contains the text representation of the file.
  Trace:
    type: object
    properties:
      statuses:
        type: array
        items:
          $ref: '#/definitions/Trace.Status'
        description: Statuses contains an execution status per input.
        readOnly: true
      inputs:
        type: array
        items:
          type: object
        description: Component inputs.
        readOnly: true
      outputs:
        type: array
        items:
          type: object
        description: Component outputs.
        readOnly: true
      error:
        type: object
        description: Error details.
        readOnly: true
      computeTimeInSeconds:
        type: number
        format: float
        description: Computation time in seconds.
        readOnly: true
    description: Trace contains the execution details of a component.
  Trace.Status:
    type: string
    enum:
      - STATUS_COMPLETED
      - STATUS_SKIPPED
      - STATUS_ERROR
    description: |-
      Status holds the the component execution outcome.

       - STATUS_COMPLETED: Successfully completed.
       - STATUS_SKIPPED: Skipped.
       - STATUS_ERROR: Aborted with error.
  TriggerAsyncNamespaceLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerAsyncNamespaceLatestModelRequest represents a request to trigger a
      model inference asynchronously with the latest uploaded version.
    required:
      - taskInputs
  TriggerAsyncNamespaceLatestModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      TriggerAsyncNamespaceLatestModelResponse contains the information to access
      the status of an asynchronous model inference.
  TriggerAsyncNamespaceModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerAsyncNamespaceModelRequest represents a request to trigger a model
      inference asynchronously.
    required:
      - taskInputs
  TriggerAsyncNamespaceModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      TriggerAsyncNamespaceModelResponse contains the information to access the
      status of an asynchronous model inference.
  TriggerAsyncNamespacePipelineBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/TriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineRequest represents a request to trigger a user-owned
      pipeline synchronously.
  TriggerAsyncNamespacePipelineReleaseBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/TriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineReleaseRequest represents a request to trigger a pinned
      release of a user-owned pipeline asynchronously.
  TriggerAsyncNamespacePipelineReleaseResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      TriggerAsyncNamespacePipelineReleaseResponse contains the information to access
      the status of an asynchronous pipeline execution.
  TriggerAsyncNamespacePipelineResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      TriggerAsyncNamespacePipelineResponse contains the information to access the
      status of an asynchronous pipeline execution.
  TriggerData:
    type: object
    properties:
      variable:
        type: object
        description: The values of the pipeline variables.
      secret:
        type: object
        additionalProperties:
          type: string
        description: |-
          A collection of secrets. By default, if a pipeline references any secret
          (`${secret.<id>}`), its value is read from the namespace's secrets.
          This object provides a way to override these secret values: if one of its
          keys matches the ID of a reference secret, its value will be read from
          here instead of from the namespace secret collection.
      connectionReferences:
        type: object
        additionalProperties:
          type: string
        description: |-
          A collection of connection references. By default, connection references
          (`${connection.<id>}`) in a pipeline will be resolved by fetching the
          value from the requester's connections. Connections contain sensitive data
          and can't be shared across namespaces, so this means that, in order to
          successfully run a pipeline owned by another namespace, the requester will
          need to have a connection with the same ID.
          This object provides a way to override the connection references with
          connections that the requester owns. Each element in the object maps a
          connection ID present in the pipeline (key) to the ID of a connection
          owned by the requester (value).
          Note that, since only references are accepted (this object shouldn't
          contain connection **values**), the reference syntax shouldn't be used
          here.
    description: TriggerData contains the input data for a pipeline run.
  TriggerMetadata:
    type: object
    properties:
      traces:
        type: object
        additionalProperties:
          $ref: '#/definitions/Trace'
        description: |-
          Each key in the `traces` object is a component ID. The value is a Trace
          object containing the execution details.
        readOnly: true
    description: TriggerMetadata contains the traces of the pipeline inference.
  TriggerNamespaceLatestModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: |-
          Deleteted field.
          Model inference outputs.
        readOnly: true
    description: |-
      TriggerNamespaceLatestModelBinaryFileUploadResponse contains the model
      inference results.
    required:
      - task
  TriggerNamespaceLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerNamespaceLatestModelRequest represents a request to trigger a model
      inference with the latest uploaded version.
    required:
      - taskInputs
  TriggerNamespaceLatestModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
    description: TriggerNamespaceLatestModelResponse contains the model inference results.
  TriggerNamespaceModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
    description: |-
      TriggerNamespaceModelBinaryFileUploadResponse contains the model inference
      results.
    required:
      - task
  TriggerNamespaceModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerNamespaceModelRequest represents a request to trigger a model
      inference.
    required:
      - taskInputs
  TriggerNamespaceModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
    description: TriggerNamespaceModelResponse contains the model inference results.
  TriggerNamespacePipelineBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/TriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineRequest represents a request to trigger a user-owned
      pipeline synchronously.
    required:
      - inputs
      - data
  TriggerNamespacePipelineReleaseBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/TriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineReleaseRequest represents a request to trigger a pinned
      release of a user-owned pipeline.
  TriggerNamespacePipelineReleaseResponse:
    type: object
    properties:
      outputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      metadata:
        description: Traces of the pipeline inference.
        readOnly: true
        allOf:
          - $ref: '#/definitions/TriggerMetadata'
    description: |-
      TriggerNamespacePipelineReleaseResponse contains the pipeline execution results,
      i.e., the multiple model inference outputs.
  TriggerNamespacePipelineResponse:
    type: object
    properties:
      outputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      metadata:
        description: Traces of the pipeline inference.
        readOnly: true
        allOf:
          - $ref: '#/definitions/TriggerMetadata'
    description: |-
      TriggerNamespacePipelineResponse contains the pipeline execution results, i.e.,
      the multiple model inference outputs.
  TriggerNamespacePipelineWithStreamBody:
    type: object
    properties:
      inputs:
        type: array
        items:
          type: object
        description: Pipeline input parameters, it will be deprecated soon.
      data:
        type: array
        items:
          type: object
          $ref: '#/definitions/TriggerData'
        title: Data
    description: |-
      TriggerNamespacePipelineWithStreamRequest represents a request to trigger a user-owned
      pipeline synchronously and streams back the results.
  TriggerNamespacePipelineWithStreamResponse:
    type: object
    properties:
      outputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      metadata:
        description: Traces of the pipeline inference.
        readOnly: true
        allOf:
          - $ref: '#/definitions/TriggerMetadata'
    description: |-
      TriggerNamespacePipelineWithStreamResponse contains the pipeline execution results, i.e.,
      the multiple model inference outputs.
  UndeployNamespaceModelAdminResponse:
    type: object
    title: |-
      UndeployNamespaceModelAdminResponse represents a response for a undeployed
      model
  UndeployOrganizationModelAdminResponse:
    type: object
    title: |-
      UndeployOrganizationModelAdminResponse represents a response for a undeployed
      model
  UndeployUserModelAdminResponse:
    type: object
    title: UndeployUserModelAdminResponse represents a response for a undeployed model
  Unit:
    type: string
    enum:
      - UNIT_CHARACTER
      - UNIT_PAGE
      - UNIT_TIME_MS
      - UNIT_PIXEL
    description: |-
      Unit of measurement for a position within a file.

       - UNIT_CHARACTER: Character positions (for Markdown and other text files).
       - UNIT_PAGE: Page positions (for documents). For pages, positions are 1-indexed
      (e.g., page 4 of 4) to align with document visualization standards.
       - UNIT_TIME_MS: Time positions in milliseconds (for audio/video files).
       - UNIT_PIXEL: Pixel positions (for images and other 2D content).
  UpdateCatalogBody:
    type: object
    properties:
      description:
        type: string
        description: The catalog description.
      tags:
        type: array
        items:
          type: string
        description: The catalog tags.
      convertingPipelines:
        type: array
        items:
          type: string
        description: |-
          Pipelines used for converting documents (i.e., files with pdf, doc[x] or
          ppt[x] extension) to Markdown. The strings in the list identify the
          pipelines and MUST have the format `{namespaceID}/{pipelineID}@{version}`.
          The pipeline recipes MUST have the following variable and output fields:
          ```yaml variable
          variable:
            document_input:
              title: document-input
              description: Upload a document (PDF/DOCX/DOC/PPTX/PPT)
              type: file
          ```
          ```yaml output
          output:
           convert_result:
             title: convert-result
             value: ${merge-markdown-refinement.output.results[0]}
          ```
          Other variable and output fields will be ignored.

          The pipelines will be executed in order until one produces a successful,
          non-empty result.

          If no pipelines are provided, a default pipeline will be used. For
          non-document catalog files, the conversion pipeline is deterministic (such
          files are typically trivial to convert and don't require a dedicated
          pipeline to improve the conversion performance).
    description: UpdateCatalogRequest represents a request to update a catalog.
  UpdateCatalogResponse:
    type: object
    properties:
      catalog:
        description: The updated catalog.
        allOf:
          - $ref: '#/definitions/Catalog'
    description: UpdateCatalogResponse represents a response for updating a catalog.
  UpdateChunkBody:
    type: object
    properties:
      retrievable:
        type: boolean
        title: whether the chunk is retrievable
    title: Create chunk response
    required:
      - retrievable
  UpdateChunkResponse:
    type: object
    properties:
      chunk:
        title: chunk
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.Chunk'
    title: update chunk response
  UpdateNamespaceConnectionResponse:
    type: object
    properties:
      connection:
        description: The created connection.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Connection'
    description: UpdateNamespaceConnectionResponse contains the updated connection.
  UpdateNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The updated model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: UpdateNamespaceModelResponse contains the updated model.
  UpdateNamespacePipelineReleaseResponse:
    type: object
    properties:
      release:
        description: The updated pipeline release resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/PipelineRelease'
    description: UpdateNamespacePipelineReleaseResponse contains the updated pipeline release.
  UpdateNamespacePipelineResponse:
    type: object
    properties:
      pipeline:
        description: The updated pipeline resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Pipeline'
    description: UpdateNamespacePipelineResponse contains the updated pipeline.
  UpdateNamespaceSecretResponse:
    type: object
    properties:
      secret:
        description: The updated secret resource.
        allOf:
          - $ref: '#/definitions/Secret'
    description: UpdateNamespaceSecretResponse contains the updated secret.
  UpdateObjectResponse:
    type: object
    properties:
      object:
        title: object
        allOf:
          - $ref: '#/definitions/Object'
    title: UpdateObjectResponse
  UpdateOrganizationMembershipResponse:
    type: object
    properties:
      membership:
        description: The updated membership resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OrganizationMembership'
    description: UpdateOrganizationMembershipResponse contains the updated membership.
  UpdateOrganizationResponse:
    type: object
    properties:
      organization:
        description: The organization resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: UpdateOrganizationResponse contains the updated organization.
  UpdateUserMembershipResponse:
    type: object
    properties:
      membership:
        description: The updated membership resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserMembership'
    description: UpdateUserMembershipResponse contains the updated membership.
  UploadCatalogFileResponse:
    type: object
    properties:
      file:
        title: file
        allOf:
          - $ref: '#/definitions/File'
    title: upload file response
  UserDefinedResponse:
    type: object
    properties:
      greeting:
        type: string
      numX2:
        type: string
        format: int64
  UserDefinedResponse2:
    type: object
    properties:
      greeting:
        type: string
  UserMembership:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the membership, which allows its access by user and
          organization ID.
          - Format: `users/{user.id}/memberships/{organization.id}`.
        readOnly: true
      role:
        type: string
        description: Role of the user in the organization.
        readOnly: true
      state:
        description: State of the membership.
        allOf:
          - $ref: '#/definitions/MembershipState'
      user:
        description: User information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.User'
      organization:
        description: Organization information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      A user membership defines the relationship between a user and an
      organization they belong to.
    required:
      - state
  UserProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      companyName:
        type: string
        description: Company name.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the user's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: UserProfile describes the public data of a user.
  ValidateNamespacePipelineBody:
    type: object
    description: |-
      ValidateNamespacePipelineRequest represents a request to validate a pipeline
      owned by a user.
  ValidateNamespacePipelineResponse:
    type: object
    properties:
      success:
        type: boolean
        title: Success
        readOnly: true
      errors:
        type: array
        items:
          type: object
          $ref: '#/definitions/ErrPipelineValidation'
        description: The validated pipeline resource.
        readOnly: true
    description: ValidateNamespacePipelineResponse contains a validated pipeline.
  ValidateTokenResponse:
    type: object
    properties:
      userUid:
        type: string
        description: If token is valid, UUID of the user that owns it.
        readOnly: true
    description: ValidateTokenResponse contains the validation of a token.
  WatchNamespaceLatestModelResponse:
    type: object
    properties:
      state:
        description: State.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.State'
      message:
        type: string
        title: Detail description of the state
        readOnly: true
    description: |-
      WatchNamespaceLatestModelResponse contains the state of the latest model
      version.
  WatchNamespaceModelResponse:
    type: object
    properties:
      state:
        description: State.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.State'
      message:
        type: string
        title: Detail description of the state
        readOnly: true
    description: WatchNamespaceModelResponse contains the state of a model.
  WebhookEndpoint:
    type: object
    properties:
      url:
        type: string
        description: Webhook URL.
        readOnly: true
      description:
        type: string
        description: Description.
        readOnly: true
    description: WebhookEndpoint describe a webhook endpoint.
  longrunning.Operation:
    type: object
    properties:
      name:
        type: string
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should be a resource name ending with `operations/{unique_id}`.
      metadata:
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        allOf:
          - $ref: '#/definitions/Any'
      done:
        type: boolean
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
      error:
        description: The error result of the operation in case of failure or cancellation.
        allOf:
          - $ref: '#/definitions/rpc.Status'
      response:
        description: |-
          The normal, successful response of the operation.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        allOf:
          - $ref: '#/definitions/Any'
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
  mgmt.v1beta.Permission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the resource can be modified.
        readOnly: true
    description: Permission defines how a resource can be used.
  mgmt.v1beta.View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a resource is presented. It can be used as a parameter in a
      method request to allow clients to select the amount of information they
      want in the response.

       - VIEW_BASIC: Default view, only includes basic information.
       - VIEW_FULL: Full representation.
  pipeline.v1beta.Permission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the pipeline can be modified.
      canTrigger:
        type: boolean
        description: Defines whether the pipeline can be executed.
      canRelease:
        type: boolean
        description: Defines whether the pipeline can be released.
    description: Permission defines how a pipeline can be used.
  pipeline.v1beta.View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a resource is presented. Most resources can share this view
      definition, the particular meaning of each value should be defined in the
      resource itself. Certain resources might have their own View definition if
      they need to implement more than 2 (basic / full) views.

       - VIEW_BASIC: Default view.
       - VIEW_FULL: Full representation.
  rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/Any'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  v1alpha.Chunk:
    type: object
    properties:
      chunkUid:
        type: string
        title: unique identifier of the chunk
        readOnly: true
      retrievable:
        type: boolean
        title: whether the chunk is retrievable
        readOnly: true
      tokens:
        type: integer
        format: int64
        title: tokens of the chunk
        readOnly: true
      createTime:
        type: string
        format: date-time
        title: creation time of the chunk
        readOnly: true
      originalFileUid:
        type: string
        title: original file unique identifier
        readOnly: true
      contentType:
        title: content type
        readOnly: true
        allOf:
          - $ref: '#/definitions/ContentType'
      reference:
        description: Reference to the position of the chunk within the original file.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Reference'
      markdownReference:
        description: Reference to the position of the chunk within the Markdown (source) file.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Reference'
      startPos:
        type: integer
        format: int64
        title: |-
          start position of the chunk in the source file
          Deprecated: use markdown_reference instead
        readOnly: true
      endPos:
        type: integer
        format: int64
        title: |-
          end position of the chunk in the source file
          Deprecated: use markdown_reference instead
        readOnly: true
    description: The Chunk message represents a chunk of data in the artifact system.
  v1alpha.Permission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the pipeline can be modified.
      canTrigger:
        type: boolean
        description: Defines whether the pipeline can be executed.
    description: Permission defines how a pipeline can be used.
  v1alpha.ReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GENERALLY_AVAILABLE
      - RELEASE_STAGE_CUSTOM
    description: |-
      ReleaseStage defines the stage of a release.

       - RELEASE_STAGE_ALPHA: Alpha.
       - RELEASE_STAGE_BETA: Beta.
       - RELEASE_STAGE_GENERALLY_AVAILABLE: Generally available.
       - RELEASE_STAGE_CUSTOM: Custom.
  v1alpha.State:
    type: string
    enum:
      - STATE_OFFLINE
      - STATE_ACTIVE
      - STATE_IDLE
      - STATE_ERROR
      - STATE_STARTING
      - STATE_SCALING_UP
      - STATE_SCALING_DOWN
    description: |-
      State describes the state of a model. See [Deploy
      Models](https://instill-ai.dev/docs/latest/model/deploy) for more
      information.

       - STATE_OFFLINE: Offline is the state when the model instance number is 0.
       - STATE_ACTIVE: Active is the state when a model is processing requests.
       - STATE_IDLE: Idle is the state when a model is alive but not processing requests.
       - STATE_ERROR: Error is the state when the model is undeployable.
       - STATE_STARTING: Starting is the state when the system is provisioning the necessary
      resources for the model
       - STATE_SCALING_UP: Scaling Up is the transition state when the system is provisioning compute
      resource for this model instance.
       - STATE_SCALING_DOWN: Scaling is the transition state when the system is releasing compute
      resource for this model instance.
  v1alpha.View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a model definition is presented.

       - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
       - VIEW_FULL: Full representation.
  v1beta.User:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/UserProfile'
      email:
        type: string
        description: Email.
        readOnly: true
    description: |-
      User describes an individual that interacts with Instill AI. It doesn't
      contain any private information about the user.
securityDefinitions:
  Bearer:
    type: apiKey
    description: Enter the token with the `Bearer ` prefix, e.g. `Bearer instill_sk_***`
    name: Authorization
    in: header
    x-default: Bearer instill_sk_***
security:
  - Bearer: []
externalDocs:
  description: More about Instill Core
  url: https://docs.instill-ai.com
