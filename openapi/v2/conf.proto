syntax = "proto3";

package openapi.v2;

import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "🔮 Instill AI API"
    description: "Interact with Instill AI through its public API"
    version: "v0.51.0"
    contact: {
      name: "Instill AI"
      url: "https://github.com/instill-ai"
      email: "hello@instill-ai.com"
    }
    license: {
      name: "Elastic License 2.0 (ELv2)"
      url: "https://github.com/instill-ai/protobufs/blob/main/LICENSE"
    }
  }
  tags: [
    {
      name: "🪆 Namespace"
      description: "Namespaces (e.g. User, Organization) that structure the resource hierarchy."
    },
    {
      name: "💧 Pipeline"
      description: "Pipeline orchestration in Instill Core."
    },
    {
      name: "⚗️ Model"
      description: "AI Model resources for MLOps/LLMOps."
    },
    {
      name: "💾 Artifact"
      description: "Data orchestration for unified unstructured data representation."
    },
    {
      name: "🍎 Agent"
      description: "Ready-to-use AI agents."
    },
    {
      name: "Table"
      description: "Table resources for agents."
    },
    {
      name: "Folder"
      description: "Folder resources for agents."
    },
    {
      name: "📊 Metrics"
      description: "Resource usage metrics."
    },
    {
      name: "🤝 Subscription"
      description: "Pricing plans on Instill Cloud."
    }
  ]
  host: "api.instill-ai.com"
  external_docs: {
    url: "https://www.instill-ai.dev/docs"
    description: "More about Instill AI"
  }
  schemes: HTTPS
  schemes: HTTP
  consumes: "application/json"
  produces: "application/json"
  security_definitions: {
    security: {
      key: "Bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "Enter the token with the `Bearer ` prefix, e.g. `Bearer abcde12345`"
        extensions: {
          key: "x-default"
          value: {string_value: "Bearer instill_sk_***"}
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "Bearer"
      value: {}
    }
  }
  responses: {
    key: "401"
    value: {description: "Returned when the client credentials are not valid."}
  }
};
