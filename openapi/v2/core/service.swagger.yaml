swagger: "2.0"
info:
  title: "\U0001F52E Core"
  description: Core endpoints to manage user resources
  version: v0.44.1-beta
  contact:
    name: Instill AI
    url: https://github.com/instill-ai
    email: hello@instill.tech
  license:
    name: Elastic License 2.0 (ELv2)
    url: https://github.com/instill-ai/protobufs/blob/main/LICENSE
tags:
  - name: User
    description: User namespaces
  - name: Organization
    description: Organization namespaces
  - name: Membership
    description: Organization memberships
  - name: Token
    description: API tokens
  - name: Subscription
    description: Subscription to pricing plans
  - name: Credit
    description: Instill Credit
  - name: Metric
    description: Usage metrics
  - name: Utils
    description: Utils
host: api.instill.tech
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1beta/user:
    get:
      summary: Get the authenticated user
      description: Returns the details of the authenticated user.
      operationId: MgmtPublicService_GetAuthenticatedUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetAuthenticatedUserResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - User
    patch:
      summary: Update the authenticated user
      description: |-
        Updates the information of the authenticated user.

        In REST requests, only the supplied user fields will be taken into account
        when updating the resource.
      operationId: MgmtPublicService_PatchAuthenticatedUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/PatchAuthenticatedUserResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: user
          description: The user fields that will replace the existing ones.
          in: body
          required: true
          schema:
            $ref: '#/definitions/AuthenticatedUser'
            required:
              - user
      tags:
        - User
  /v1beta/users:
    get:
      summary: List users
      description: Returns a paginated list of users.
      operationId: MgmtPublicService_ListUsers
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListUsersResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of users to return. If this parameter is unspecified,
            at most 10 pipelines will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
      tags:
        - User
  /v1beta/users/{userId}:
    get:
      summary: Get a user
      description: Returns the details of a user by their ID.
      operationId: MgmtPublicService_GetUser
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetUserResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - User
  /v1beta/organizations:
    get:
      summary: List organizations
      description: Returns a paginated list of organizations.
      operationId: MgmtPublicService_ListOrganizations
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListOrganizationsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of organizations to return. If this parameter is
            unspecified, at most 10 pipelines will be returned. The cap value for this
            parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
      tags:
        - Organization
    post:
      summary: Create an organization
      description: Creates an organization.
      operationId: MgmtPublicService_CreateOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organization
          description: The properties of the organization to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Organization'
      tags:
        - Organization
  /v1beta/organizations/{organizationId}:
    get:
      summary: Get an organization
      description: Returns the organization details by its ID.
      operationId: MgmtPublicService_GetOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Organization
    delete:
      summary: Delete an organization
      description: Accesses and deletes an organization by ID.
      operationId: MgmtPublicService_DeleteOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
      tags:
        - Organization
    patch:
      summary: Update an organization
      description: |-
        Accesses and updates an organization by ID.

        In REST requests, only the supplied organization fields will be taken into
        account when updating the resource.
      operationId: MgmtPublicService_UpdateOrganization
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateOrganizationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: organization
          description: The organization fields that will replace the existing ones.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Organization'
      tags:
        - Organization
  /v1beta/users/{userId}/memberships:
    get:
      summary: List user memberships
      description: Returns the memberships of a user.
      operationId: MgmtPublicService_ListUserMemberships
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListUserMembershipsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
      tags:
        - Membership
  /v1beta/users/{userId}/memberships/{organizationId}:
    get:
      summary: Get a user membership
      description: |-
        Returns the details of the relationship between a user and an
        organization. The authenticated must match the membership parent.
      operationId: MgmtPublicService_GetUserMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetUserMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Membership
    delete:
      summary: Delete a user membership
      description: Accesses and deletes a user membership by parent and membership IDs.
      operationId: MgmtPublicService_DeleteUserMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteUserMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
      tags:
        - Membership
    put:
      summary: Update a user membership
      description: Accesses and updates a user membership by parent and membership IDs.
      operationId: MgmtPublicService_UpdateUserMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateUserMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: membership
          description: The membership fields to update.
          in: body
          required: true
          schema:
            $ref: '#/definitions/UserMembership'
            required:
              - membership
        - name: updateMask
          description: |-
            The update mask specifies the subset of fields that should be modified.

            For more information about this field, see
            https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
          in: query
          required: true
          type: string
      tags:
        - Membership
  /v1beta/organizations/{organizationId}/memberships:
    get:
      summary: List organization memberships
      description: Returns a paginated list of the user memberships in an organization.
      operationId: MgmtPublicService_ListOrganizationMemberships
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListOrganizationMembershipsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
      tags:
        - Membership
  /v1beta/organizations/{organizationId}/memberships/{userId}:
    get:
      summary: Get a an organization membership
      description: Returns the details of a user membership within an organization.
      operationId: MgmtPublicService_GetOrganizationMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetOrganizationMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information.
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Membership
    delete:
      summary: Delete an organization membership
      description: Deletes a user membership within an organization.
      operationId: MgmtPublicService_DeleteOrganizationMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteOrganizationMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
      tags:
        - Membership
    put:
      summary: Uppdate an organization membership
      description: Updates a user membership within an organization.
      operationId: MgmtPublicService_UpdateOrganizationMembership
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateOrganizationMembershipResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Organization ID
          in: path
          required: true
          type: string
        - name: userId
          description: User ID
          in: path
          required: true
          type: string
        - name: membership
          description: The membership fields to update.
          in: body
          required: true
          schema:
            $ref: '#/definitions/OrganizationMembership'
            required:
              - membership
        - name: updateMask
          description: |-
            The update mask specifies the subset of fields that should be modified.

            For more information about this field, see
            https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#field-mask.
          in: query
          required: true
          type: string
      tags:
        - Membership
  /v1beta/user/subscription:
    get:
      summary: Get the subscription of the authenticated user
      description: Returns the subscription details of the authenticated user.
      operationId: MgmtPublicService_GetAuthenticatedUserSubscription
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetAuthenticatedUserSubscriptionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - Subscription
  /v1beta/organizations/{organizationId}/subscription:
    get:
      summary: Get the subscription of an organization
      description: Returns the subscription details of an organization.
      operationId: MgmtPublicService_GetOrganizationSubscription
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetOrganizationSubscriptionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: organizationId
          description: Oragnization ID
          in: path
          required: true
          type: string
      tags:
        - Subscription
  /v1beta/tokens:
    get:
      summary: List API tokens
      description: Returns a paginated list of the API tokens of the authenticated user.
      operationId: MgmtPublicService_ListTokens
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListTokensResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of tokens to return. If this parameter is unspecified,
            at most 10 pipelines will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
      tags:
        - Token
    post:
      summary: Create an API token
      description: Creates an API token for the authenticated user.
      operationId: MgmtPublicService_CreateToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: token
          description: The properties of the token to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/ApiToken'
      tags:
        - Token
  /v1beta/tokens/{tokenId}:
    get:
      summary: Get an API token
      description: Returns the details of an API token.
      operationId: MgmtPublicService_GetToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: tokenId
          description: Token ID
          in: path
          required: true
          type: string
      tags:
        - Token
    delete:
      summary: Delete an API token
      description: Deletes an API token.
      operationId: MgmtPublicService_DeleteToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: tokenId
          description: Token ID
          in: path
          required: true
          type: string
      tags:
        - Token
  /v1beta/validate_token:
    post:
      summary: Validate an API token
      description: Validates an API token.
      operationId: MgmtPublicService_ValidateToken
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ValidateTokenResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - Token
  /v1beta/namespaces/{namespaceId}/credit:
    get:
      summary: Get the remaining Instill Credit
      description: |-
        This endpoint returns the remaining [Instill Credit](https://www.instill.tech/docs/vdp/credit) of a given user or
        organization. The requested credit owner must be either the authenticated
        user or an organization they belong to.

        On Instill Core, this endpoint will return a 404 Not Found status.
      operationId: MgmtPublicService_GetRemainingCredit
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetRemainingCreditResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
      tags:
        - Credit
  /v1beta/check-namespace:
    post:
      summary: Check if a namespace is in use
      description: |-
        Returns the availability of a namespace or, alternatively, the type of
        resource that is using it.
      operationId: MgmtPublicService_CheckNamespace
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CheckNamespaceResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: body
          description: |-
            CheckNamespaceRequest represents a request to verify if a namespace is
            available.
          in: body
          required: true
          schema:
            $ref: '#/definitions/CheckNamespaceRequest'
      tags:
        - Util
  /v1beta/metrics/vdp/pipeline/triggers:
    get:
      summary: List pipeline triggers
      description: Returns a paginated list of pipeline executions.
      operationId: MgmtPublicService_ListPipelineTriggerRecords
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelineTriggerRecordsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of triggers to return. If this parameter is unspecified,
            at most 100 pipelines will be returned. The cap value for this parameter is
            1000 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
      tags:
        - Metric
  /v1beta/metrics/vdp/pipeline/charts:
    get:
      summary: List pipeline trigger time charts
      description: |-
        Returns a timeline of pipline trigger counts for the pipelines of a given
        owner.
        NOTE: This method will soon return the trigger counts of a given requester.
      operationId: MgmtPublicService_ListPipelineTriggerChartRecords
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListPipelineTriggerChartRecordsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: aggregationWindow
          description: Aggregation window in nanoseconds.
          in: query
          required: false
          type: integer
          format: int32
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
      tags:
        - Metric
  /v1beta/metrics/credit/charts:
    get:
      summary: List Instill Credit consumption time charts
      description: |-
        Returns a timeline of Instill Credit consumption for a given owner. The
        response will contain one set of records (datapoints) per consumption
        source (e.g. "pipeline", "model"). Each datapoint represents the amount
        consumed in a time bucket.
      operationId: MgmtPublicService_ListCreditConsumptionChartRecords
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListCreditConsumptionChartRecordsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: The ID of the namespace that owns the credit.
          in: query
          required: true
          type: string
        - name: aggregationWindow
          description: |-
            Aggregation window. The value is a positive duration string, i.e. a
            sequence of decimal numbers, each with optional fraction and a unit
            suffix, such as "300ms", "1.5h" or "2h45m".
            The minimum (and default) window is 1h.
          in: query
          required: false
          type: string
        - name: start
          description: |-
            Beginning of the time range from which the records will be fetched.
            The default value is the beginning of the current day, in UTC.
          in: query
          required: false
          type: string
          format: date-time
        - name: stop
          description: |-
            End of the time range from which the records will be fetched.
            The default value is the current timestamp.
          in: query
          required: false
          type: string
          format: date-time
      tags:
        - Metric
definitions:
  Any:
    type: object
    properties:
      '@type':
        type: string
    additionalProperties: {}
  ApiToken:
    type: object
    properties:
      lastUseTime:
        type: string
        format: date-time
        description: |-
          When users trigger a pipeline which uses an API token, the token is
          updated with the current time. This field is used to track the last time
          the token was used.
      name:
        type: string
        description: |-
          The name of the token, define by its ID.
          - Format: `tokens/{token.id}`.
        readOnly: true
      uid:
        type: string
        description: API token UUID.
        readOnly: true
      id:
        type: string
        description: |-
          API token resource ID (used in `name` as the last segment). This conforms
          to RFC-1034, which restricts to letters, numbers, and hyphen, with the
          first character a letter, the last a letter or a number, and a 63
          character maximum.

          This field can reflect the client(s) that will use the token.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      accessToken:
        type: string
        description: |-
          An opaque access token representing the API token string.

          To validate the token, the recipient of the token needs to call the server
          that issued the token.
        readOnly: true
      state:
        description: State.
        readOnly: true
        allOf:
          - $ref: '#/definitions/State'
      tokenType:
        type: string
        description: Token type. Value is fixed to "Bearer".
        readOnly: true
      ttl:
        type: integer
        format: int32
        description: The time-to-live in seconds for this resource.
      expireTime:
        type: string
        format: date-time
        description: Expiration time.
    description: API tokens allow users to make requests to the Instill AI API.
  AuthenticatedUser:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      email:
        type: string
        description: Email.
      customerId:
        type: string
        description: Stripe customer ID. This field is used in Instill Cloud.
        readOnly: true
      role:
        type: string
        description: |-
          Role.

          It must be one of the following allowed roles:
          - `manager`
          - `ai-researcher`
          - `ai-engineer`
          - `data-engineer`
          - `data-scientist`
          - `analytics-engineer`
          - `hobbyist`
      newsletterSubscription:
        type: boolean
        description: This defines whether the user is subscribed to Instill AI's newsletter.
      cookieToken:
        type: string
        description: Console cookie token.
      onboardingStatus:
        description: Onboarding Status.
        allOf:
          - $ref: '#/definitions/OnboardingStatus'
      profile:
        description: Profile.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserProfile'
    description: |-
      AuthenticatedUser contains the information of an authenticated user, i.e.,
      the public user information plus some fields that should only be accessed by
      the user themselves.
    required:
      - id
      - email
      - newsletterSubscription
  CheckNamespaceAdminResponse:
    type: object
    properties:
      type:
        description: Namespace type.
        allOf:
          - $ref: '#/definitions/CheckNamespaceAdminResponse.Namespace'
      uid:
        type: string
        description: Namespace UID.
      user:
        description: User.
        allOf:
          - $ref: '#/definitions/User'
      organization:
        description: Organization.
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      CheckNamespaceAdminResponse contains the availability of a namespace or the type
      of resource that's using it.
  CheckNamespaceAdminResponse.Namespace:
    type: string
    enum:
      - NAMESPACE_AVAILABLE
      - NAMESPACE_USER
      - NAMESPACE_ORGANIZATION
      - NAMESPACE_RESERVED
    description: |-
      Namespace contains information about the availability of a namespace.

       - NAMESPACE_AVAILABLE: Available.
       - NAMESPACE_USER: Namespace belongs to a user.
       - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.
       - NAMESPACE_RESERVED: Reserved.
  CheckNamespaceByUIDAdminResponse:
    type: object
    properties:
      type:
        description: Namespace type.
        allOf:
          - $ref: '#/definitions/CheckNamespaceByUIDAdminResponse.Namespace'
      id:
        type: string
        description: Namespace ID.
      user:
        description: User.
        allOf:
          - $ref: '#/definitions/User'
      organization:
        description: Organization.
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      CheckNamespaceByUIDAdminResponse contains the availability of a namespace or the type
      of resource that's using it.
  CheckNamespaceByUIDAdminResponse.Namespace:
    type: string
    enum:
      - NAMESPACE_AVAILABLE
      - NAMESPACE_USER
      - NAMESPACE_ORGANIZATION
      - NAMESPACE_RESERVED
    description: |-
      Namespace contains information about the availability of a namespace.

       - NAMESPACE_AVAILABLE: Available.
       - NAMESPACE_USER: Namespace belongs to a user.
       - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.
       - NAMESPACE_RESERVED: Reserved.
  CheckNamespaceRequest:
    type: object
    properties:
      id:
        type: string
        description: The namespace ID to be checked.
    description: |-
      CheckNamespaceRequest represents a request to verify if a namespace is
      available.
    required:
      - id
  CheckNamespaceResponse:
    type: object
    properties:
      type:
        description: Namespace type.
        allOf:
          - $ref: '#/definitions/CheckNamespaceResponse.Namespace'
    description: |-
      CheckNamespaceResponse contains the availability of a namespace or the type
      of resource that's using it.
  CheckNamespaceResponse.Namespace:
    type: string
    enum:
      - NAMESPACE_AVAILABLE
      - NAMESPACE_USER
      - NAMESPACE_ORGANIZATION
      - NAMESPACE_RESERVED
    description: |-
      Namespace contains information about the availability of a namespace.

       - NAMESPACE_AVAILABLE: Available.
       - NAMESPACE_USER: Namespace belongs to a user.
       - NAMESPACE_ORGANIZATION: Namespace belongs to an organization.
       - NAMESPACE_RESERVED: Reserved.
  CreateOrganizationResponse:
    type: object
    properties:
      organization:
        description: The organization resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: CreateOrganizationResponse contains the created organization.
  CreateTokenResponse:
    type: object
    properties:
      token:
        description: The created API token resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ApiToken'
    description: CreateTokenResponse contains the created token.
  CreditConsumptionChartRecord:
    type: object
    properties:
      namespaceId:
        type: string
        description: The ID of the namespace that owns the credit.
      timeBuckets:
        type: array
        items:
          type: string
          format: date-time
        description: Time buckets.
        readOnly: true
      amount:
        type: array
        items:
          type: number
          format: float
        description: Total credit consumed in each time bucket.
        readOnly: true
      source:
        type: string
        description: Credit consumption source (e.g. "pipeline", "model").
        readOnly: true
    description: |-
      CreditConsumptionChartRecord represents a timeline of Instill Credit
      consumption. It contains a collection of (timestamp, amount) pairs that
      represent the total credit consumption in a given time bucket.
    required:
      - namespaceId
  DeleteOrganizationMembershipResponse:
    type: object
    description: DeleteOrganizationMembershipResponse is an empty response.
  DeleteOrganizationResponse:
    type: object
    description: DeleteOrganizationResponse is an empty response.
  DeleteTokenResponse:
    type: object
    description: DeleteTokenResponse is an empty response.
  DeleteUserMembershipResponse:
    type: object
    description: DeleteUserMembershipResponse is an empty response.
  GetAuthenticatedUserResponse:
    type: object
    properties:
      user:
        description: The authenticated user resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/AuthenticatedUser'
    description: GetAuthenticatedUserResponse contains the requested authenticated user.
  GetAuthenticatedUserSubscriptionResponse:
    type: object
    properties:
      subscription:
        description: The subscription resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserSubscription'
    description: GetAuthenticatedUserSubscriptionResponse contains the requested subscription.
  GetOrganizationAdminResponse:
    type: object
    properties:
      organization:
        title: A organization resource
        allOf:
          - $ref: '#/definitions/Organization'
    title: GetOrganizationAdminResponse represents a response for a organization resource
  GetOrganizationMembershipResponse:
    type: object
    properties:
      membership:
        description: The requested organization membership.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OrganizationMembership'
    description: GetOrganizationMembershipResponse contains the organization membership.
  GetOrganizationResponse:
    type: object
    properties:
      organization:
        description: The organization resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: GetOrganizationResponse contains the requested organization.
  GetOrganizationSubscriptionAdminResponse:
    type: object
    properties:
      subscription:
        title: Subscription
        allOf:
          - $ref: '#/definitions/OrganizationSubscription'
    title: GetOrganizationSubscriptionAdminResponse
  GetOrganizationSubscriptionResponse:
    type: object
    properties:
      subscription:
        description: The subscription resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OrganizationSubscription'
    description: GetOrganizationSubscriptionResponse contains the requested subscription.
  GetRemainingCreditAdminResponse:
    type: object
    properties:
      amount:
        type: number
        format: float
        description: The requested credit.
    description: |-
      GetRemainingCreditAdminResponse contains the remaining credit of a user or
      organization.
  GetRemainingCreditResponse:
    type: object
    properties:
      perishable:
        type: number
        format: float
        description: Amount of perishable credit, i.e. credit with an expiration date.
        readOnly: true
      imperishable:
        type: number
        format: float
        description: |-
          Amount of imperishable credit, e.g. purchased credit, which doesn't
          expire.
        readOnly: true
      total:
        type: number
        format: float
        description: Total remaining credit.
        readOnly: true
    description: |-
      GetRemainingCreditResponse contains the remaining credit of a user or
      organization.
  GetTokenResponse:
    type: object
    properties:
      token:
        description: The API token resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ApiToken'
    description: GetTokenResponse contains the requested token.
  GetUserAdminResponse:
    type: object
    properties:
      user:
        title: A user resource
        allOf:
          - $ref: '#/definitions/User'
    title: GetUserAdminResponse represents a response for a user resource
  GetUserMembershipResponse:
    type: object
    properties:
      membership:
        description: The requested user membership.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserMembership'
    description: GetUserMembershipResponse contains the user membership.
  GetUserResponse:
    type: object
    properties:
      user:
        description: The user resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/User'
    description: GetUserResponse contains the requested user.
  GetUserSubscriptionAdminResponse:
    type: object
    properties:
      subscription:
        title: Subscription
        allOf:
          - $ref: '#/definitions/UserSubscription'
    title: GetUserSubscriptionAdminResponse
  ListCreditConsumptionChartRecordsResponse:
    type: object
    properties:
      creditConsumptionChartRecords:
        type: array
        items:
          type: object
          $ref: '#/definitions/CreditConsumptionChartRecord'
        description: Credit consumption timelines, aggregated by source.
    description: |-
      ListCreditConsumptionChartRecordsResponse contains a list of credit consumption
      chart records.
  ListOrganizationMembershipsResponse:
    type: object
    properties:
      memberships:
        type: array
        items:
          type: object
          $ref: '#/definitions/OrganizationMembership'
        description: |-
          The organization memberships, i.e., the users that belong to the
          organization.
        readOnly: true
    description: ListOrganizationMembershipsResponse contains a list of memberships.
  ListOrganizationsAdminResponse:
    type: object
    properties:
      organizations:
        type: array
        items:
          type: object
          $ref: '#/definitions/Organization'
        title: A list of organizations
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of organizations.
    title: ListOrganizationsAdminResponse represents a response for a list of organizations
  ListOrganizationsResponse:
    type: object
    properties:
      organizations:
        type: array
        items:
          type: object
          $ref: '#/definitions/Organization'
        title: A list of organizations
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of organizations.
        readOnly: true
    title: ListOrganizationsResponse represents a response for a list of organizations
  ListPipelineTriggerChartRecordsResponse:
    type: object
    properties:
      pipelineTriggerChartRecords:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineTriggerChartRecord'
        description: A list of pipeline trigger records.
    description: |-
      ListPipelineTriggerChartRecordsResponse contains a list of pipeline trigger
      chart records.
  ListPipelineTriggerRecordsResponse:
    type: object
    properties:
      pipelineTriggerRecords:
        type: array
        items:
          type: object
          $ref: '#/definitions/PipelineTriggerRecord'
        description: A list of pipeline triggers.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of pipeline triggers.
    description: ListPipelineTriggerRecordsResponse contains a list of pipeline triggers.
  ListTokensResponse:
    type: object
    properties:
      tokens:
        type: array
        items:
          type: object
          $ref: '#/definitions/ApiToken'
        description: A list of API token resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of API token resources.
    description: ListTokensResponse contains a list of API tokens.
  ListUserMembershipsResponse:
    type: object
    properties:
      memberships:
        type: array
        items:
          type: object
          $ref: '#/definitions/UserMembership'
        description: The user memberships, i.e., the organizations the user belongs to.
        readOnly: true
    description: ListUserMembershipsResponse contains a list of memberships.
  ListUsersAdminResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/User'
        title: A list of users
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of users.
    title: ListUsersAdminResponse represents a response for a list of users
  ListUsersResponse:
    type: object
    properties:
      users:
        type: array
        items:
          type: object
          $ref: '#/definitions/User'
        description: A list of user resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of users.
        readOnly: true
    description: ListUsersResponse contains a list of users.
  LookUpOrganizationAdminResponse:
    type: object
    properties:
      organization:
        title: A organization resource
        allOf:
          - $ref: '#/definitions/Organization'
    title: LookUpOrganizationAdminResponse represents a response for a organization resource by admin
  LookUpUserAdminResponse:
    type: object
    properties:
      user:
        title: A user resource
        allOf:
          - $ref: '#/definitions/User'
    title: LookUpUserAdminResponse represents a response for a user resource by admin
  MembershipState:
    type: string
    enum:
      - MEMBERSHIP_STATE_ACTIVE
      - MEMBERSHIP_STATE_PENDING
    description: |-
      MembershipState describes the state of a user membership to an organization.

       - MEMBERSHIP_STATE_ACTIVE: Active.
       - MEMBERSHIP_STATE_PENDING: Pending, i.e., a request has been sent to the user to join an
      organization.
  Mode:
    type: string
    enum:
      - MODE_SYNC
      - MODE_ASYNC
    description: |-
      Mode describes the execution mode of the pipeline (sync or async).

       - MODE_SYNC: Synchronous (result is returned in the response).
       - MODE_ASYNC: Asynchronous (response only contains acknowledgement).
  OnboardingStatus:
    type: string
    enum:
      - ONBOARDING_STATUS_IN_PROGRESS
      - ONBOARDING_STATUS_COMPLETED
    description: |-
      OnboardingStatus describes the status of the user onboarding process.

       - ONBOARDING_STATUS_IN_PROGRESS: In progress, i.e., the user has initiated the onboarding process
      but has not yet completed it.
       - ONBOARDING_STATUS_COMPLETED: Completed.
  Organization:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the organization, defined by its ID.
          - Format: `organization/{organization.id}`.
        readOnly: true
      uid:
        type: string
        description: Organization UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      owner:
        description: The user that owns the organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/User'
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/OrganizationProfile'
      permission:
        title: Permission
        readOnly: true
        allOf:
          - $ref: '#/definitions/Permission'
    description: |-
      Organizations group several users. As entities, they can own resources such
      as pipelines or releases.
    required:
      - profile
  OrganizationMembership:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the membership, which allows its access by
          organization and user ID.
          - Format: `organizations/{organization.id}/memberships/{user.id}`.
        readOnly: true
      role:
        type: string
        description: Role of the user in the organization.
      state:
        description: State of the membership.
        readOnly: true
        allOf:
          - $ref: '#/definitions/MembershipState'
      user:
        description: User information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/User'
      organization:
        description: Organization information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      An organization membership defines the relationship between an organization
      and a user that is attached to it.
    required:
      - role
  OrganizationProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the organization's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: OrganizationProfile describes the public data of an organization.
  OrganizationSubscription:
    type: object
    properties:
      plan:
        description: Plan identifier.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OrganizationSubscription.Plan'
      detail:
        description: Details of the associated Stripe subscription.
        readOnly: true
        allOf:
          - $ref: '#/definitions/StripeSubscriptionDetail'
      usedSeats:
        type: integer
        format: int32
        description: Number of used seats within the organization subscription.
        readOnly: true
    description: OrganizationSubscription details describe the plan (i.e., features) an organization has access to.
  OrganizationSubscription.Plan:
    type: string
    enum:
      - PLAN_FREE
      - PLAN_TEAM
      - PLAN_ENTERPRISE
    description: |-
      Enumerates the plan types for the organization subscription.

       - PLAN_FREE: Free plan.
       - PLAN_TEAM: Team plan.
       - PLAN_ENTERPRISE: Enterprise plan.
  PatchAuthenticatedUserResponse:
    type: object
    properties:
      user:
        description: The updated user resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/AuthenticatedUser'
    title: |-
      PatchAuthenticatedUserResponse contains the updated user.
      the authenticated user resource
  Permission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the resource can be modified.
        readOnly: true
    description: Permission defines how a resource can be used.
  PipelineTriggerChartRecord:
    type: object
    properties:
      pipelineId:
        type: string
        description: Pipeline ID.
      pipelineUid:
        type: string
        description: Pipeline UUID.
      triggerMode:
        description: Trigger mode.
        allOf:
          - $ref: '#/definitions/Mode'
      status:
        description: Final status.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.Status'
      timeBuckets:
        type: array
        items:
          type: string
          format: date-time
        description: Time buckets.
        readOnly: true
      triggerCounts:
        type: array
        items:
          type: integer
          format: int32
        description: Aggregated trigger count in each time bucket.
        readOnly: true
      computeTimeDuration:
        type: array
        items:
          type: number
          format: float
        description: Total computation time duration in each time bucket.
        readOnly: true
      pipelineReleaseId:
        type: string
        description: Version for the triggered pipeline if it is a release pipeline.
        readOnly: true
      pipelineReleaseUid:
        type: string
        description: Release UUID for the triggered pipeline if it is a release pipeline.
        readOnly: true
    description: |-
      PipelineTriggerChartRecord contains pipeline trigger metrics, aggregated by
      pipeline ID and time frame.
  PipelineTriggerRecord:
    type: object
    properties:
      triggerTime:
        type: string
        format: date-time
        description: The moment when the pipeline was triggered.
      pipelineTriggerId:
        type: string
        description: UUID of the trigger.
      pipelineId:
        type: string
        description: Pipeline ID.
      pipelineUid:
        type: string
        description: Pipeline UUID.
      triggerMode:
        description: Trigger mode.
        allOf:
          - $ref: '#/definitions/Mode'
      computeTimeDuration:
        type: number
        format: float
        description: Total execution duration.
        readOnly: true
      status:
        description: Final status.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.Status'
      pipelineReleaseId:
        type: string
        description: If a release of the pipeline was triggered, pipeline version.
        readOnly: true
      pipelineReleaseUid:
        type: string
        description: If a release of the pipeline was triggered, release UUID.
        readOnly: true
    description: PipelineTriggerRecord represents a pipeline execution event.
  State:
    type: string
    enum:
      - STATE_INACTIVE
      - STATE_ACTIVE
      - STATE_EXPIRED
    description: |-
      State describes the state of an API token.

       - STATE_INACTIVE: Inactive.
       - STATE_ACTIVE: Active.
       - STATE_EXPIRED: Expired.
  StripeSubscriptionDetail:
    type: object
    properties:
      productName:
        type: string
        description: Product name associated with the subscription in Stripe.
        readOnly: true
      id:
        type: string
        description: Unique identifier for the subscription.
        readOnly: true
      itemId:
        type: string
        description: Identifier for the specific item within the subscription.
        readOnly: true
      price:
        type: number
        format: float
        description: Price of the subscription.
        readOnly: true
      canceledAt:
        type: integer
        format: int32
        description: Optional timestamp indicating when the subscription was canceled, if applicable.
        readOnly: true
      trialEnd:
        type: integer
        format: int32
        description: Optional timestamp indicating when the trial ended, if applicable.
        readOnly: true
      status:
        description: Status of the subscription.
        readOnly: true
        allOf:
          - $ref: '#/definitions/StripeSubscriptionDetail.Status'
      description:
        type: string
        description: Description of the subscription.
        readOnly: true
    description: StripeSubscriptionDetail describes the details of a subscription in Stripe.
  StripeSubscriptionDetail.Status:
    type: string
    enum:
      - STATUS_INCOMPLETE
      - STATUS_INCOMPLETE_EXPIRED
      - STATUS_TRIALING
      - STATUS_ACTIVE
      - STATUS_PAST_DUE
      - STATUS_CANCELED
      - STATUS_UNPAID
      - STATUS_PAUSED
    description: |-
      Enumerates the status types for the user's subscription.

       - STATUS_INCOMPLETE: Incomplete.
       - STATUS_INCOMPLETE_EXPIRED: Incomplete Expired.
       - STATUS_TRIALING: Trialing.
       - STATUS_ACTIVE: Active.
       - STATUS_PAST_DUE: Past due.
       - STATUS_CANCELED: Canceled.
       - STATUS_UNPAID: Unpaid.
       - STATUS_PAUSED: Paused.
  SubtractCreditAdminResponse:
    type: object
    properties:
      amount:
        type: number
        format: float
        description: The remaining credit.
    description: |-
      SubtractCreditResponse contains the remaining credit of an account after the
      subtraction.
  UpdateOrganizationMembershipResponse:
    type: object
    properties:
      membership:
        description: The updated membership resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/OrganizationMembership'
    description: UpdateOrganizationMembershipResponse contains the updated membership.
  UpdateOrganizationResponse:
    type: object
    properties:
      organization:
        description: The organization resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: UpdateOrganizationResponse contains the updated organization.
  UpdateUserMembershipResponse:
    type: object
    properties:
      membership:
        description: The updated membership resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserMembership'
    description: UpdateUserMembershipResponse contains the updated membership.
  User:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/UserProfile'
    description: |-
      User describes an individual that interacts with Instill AI. It doesn't
      contain any private information about the user.
  UserMembership:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the membership, which allows its access by user and
          organization ID.
          - Format: `users/{user.id}/memberships/{organization.id}`.
        readOnly: true
      role:
        type: string
        description: Role of the user in the organization.
        readOnly: true
      state:
        description: State of the membership.
        allOf:
          - $ref: '#/definitions/MembershipState'
      user:
        description: User information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/User'
      organization:
        description: Organization information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: |-
      A user membership defines the relationship between a user and an
      organization they belong to.
    required:
      - state
  UserProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      companyName:
        type: string
        description: Company name.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the user's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: UserProfile describes the public data of a user.
  UserSubscription:
    type: object
    properties:
      plan:
        description: Plan identifier.
        readOnly: true
        allOf:
          - $ref: '#/definitions/UserSubscription.Plan'
      detail:
        description: Details of the associated Stripe subscription.
        readOnly: true
        allOf:
          - $ref: '#/definitions/StripeSubscriptionDetail'
    description: UserSubscription details describe the plan (i.e., features) a user has access to.
  UserSubscription.Plan:
    type: string
    enum:
      - PLAN_FREE
      - PLAN_PRO
    description: |-
      Enumerates the plan types for the user subscription.

       - PLAN_FREE: Free plan.
       - PLAN_PRO: Pro plan.
  ValidateTokenResponse:
    type: object
    properties:
      userUid:
        type: string
        description: If token is valid, UUID of the user that owns it.
        readOnly: true
    description: ValidateTokenResponse contains the validation of a token.
  View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a resource is presented. It can be used as a parameter in a
      method request to allow clients to select the amount of information they
      want in the response.

       - VIEW_BASIC: Default view, only includes basic information.
       - VIEW_FULL: Full representation.
  rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/Any'
  v1beta.Status:
    type: string
    enum:
      - STATUS_COMPLETED
      - STATUS_ERRORED
    description: |-
      Status describes the output of an execution.

       - STATUS_COMPLETED: Successfully completed.
       - STATUS_ERRORED: Finished with error.
securityDefinitions:
  Bearer:
    type: apiKey
    description: Enter the token with the `Bearer ` prefix, e.g. `Bearer abcde12345`
    name: Authorization
    in: header
    x-default: Bearer instill_sk_***
security:
  - Bearer: []
externalDocs:
  description: More about Instill AI
  url: https://www.instill.tech/docs
