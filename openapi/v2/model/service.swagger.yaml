swagger: "2.0"
info:
  title: ⚗️ Model
  description: Endpoints to manage the AI model-related resources and features working with Instill VDP.
  version: v0.44.1-beta
  contact:
    name: Instill AI
    url: https://github.com/instill-ai
    email: hello@instill.tech
  license:
    name: Elastic License 2.0 (ELv2)
    url: https://github.com/instill-ai/protobufs/blob/main/LICENSE
tags:
  - name: Model Definition
    description: Model definitions
  - name: Model
    description: Models
  - name: Model Version
    description: Model versions
  - name: Model Trigger
    description: Model triggers
  - name: Region
    description: Model regions
host: api.instill.tech
schemes:
  - https
  - http
consumes:
  - application/json
produces:
  - application/json
paths:
  /v1alpha/model-definitions:
    get:
      summary: List model definitions
      description: Returns a paginated list of model definitions.
      operationId: ModelPublicService_ListModelDefinitions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelDefinitionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of model definitions to return. If this parameter
            is unspecified, at most 10 definitions will be returned. The cap value for
            this parameter is 100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model Definition
  /v1alpha/available-regions:
    get:
      summary: List available regions
      description: Returns a paginated list of available regions.
      operationId: ModelPublicService_ListAvailableRegions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListAvailableRegionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      tags:
        - Region
  /v1alpha/model-definitions/{modelDefinitionId}:
    get:
      summary: Get a model definition
      description: Returns the details of a model definition.
      operationId: ModelPublicService_GetModelDefinition
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetModelDefinitionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: modelDefinitionId
          description: |-
            The resource name of the model definition, which allows its access by ID.
            - Format: `model-definitions/{id}`.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired resource view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model Definition
  /v1alpha/models:
    get:
      summary: List models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models:
    get:
      summary: List namespace models
      description: Returns a paginated list of models.
      operationId: ModelPublicService_ListNamespaceModels
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespaceModelsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of models to return. If this parameter is unspecified,
            at most 10 models will be returned. The cap value for this parameter is
            100 (i.e. any value above that will be coerced to 100).
          in: query
          required: false
          type: integer
          format: int32
        - name: pageToken
          description: Page token.
          in: query
          required: false
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
        - name: showDeleted
          description: Include soft-deleted models in the result.
          in: query
          required: false
          type: boolean
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
          in: query
          required: false
          type: string
        - name: visibility
          description: |-
            Limit results to pipelines with the specified visibility.

             - VISIBILITY_PRIVATE: Only the owner can see the model.
             - VISIBILITY_PUBLIC: Other users can see the model.
          in: query
          required: false
          type: string
          enum:
            - VISIBILITY_PRIVATE
            - VISIBILITY_PUBLIC
        - name: orderBy
          description: |-
            Order by field, with options for ordering by `id`, `create_time` or `update_time`.
            Format: `order_by=id` or `order_by=create_time desc`, default is `asc`.
          in: query
          required: false
          type: string
      tags:
        - Model
    post:
      summary: Create a new model
      description: |-
        Creates a new model under the parenthood of a namespace. This is an
        asynchronous endpoint, i.e., the server will not wait for the model to be
        created in order to respond. Instead, it will return a response with the
        necessary information to access the result and status of the creation
        operation.
      operationId: ModelPublicService_CreateNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/CreateNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: model
          description: The properties of the model to be created.
          in: body
          required: true
          schema:
            $ref: '#/definitions/Model'
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}:
    get:
      summary: Get a model
      description: Returns the detail of a model, accessing it by the model ID and its parent namespace.
      operationId: ModelPublicService_GetNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
    delete:
      summary: Delete a model
      description: |-
        Deletes a model, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model.
      operationId: ModelPublicService_DeleteNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
      tags:
        - Model
    patch:
      summary: Update a model
      description: |-
        Updates a model, accessing it by its resource name, which is defined by
        the parent namespace and the ID of the model.

        In REST requests, only the supplied model fields will be taken into
        account when updating the resource.
      operationId: ModelPublicService_UpdateNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/UpdateNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: model
          description: The model to update
          in: body
          required: true
          schema:
            $ref: '#/definitions/Model'
            required:
              - model
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/rename:
    post:
      summary: Rename a model
      description: |-
        Renames a model, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model.
      operationId: ModelPublicService_RenameNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/RenameNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/RenameNamespaceModelBody'
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/watch:
    get:
      summary: Watch the state of a model version
      description: |-
        Returns the state of a model. The model resource allocation and scaling actions take some
        time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/WatchNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
      tags:
        - Model Version
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/watch:
    get:
      summary: Watch the state of the latest model version
      description: |-
        Returns the state of the latest model version. The model resource allocation and scaling actions
        take some time, during which a model will be in various state. This endpoint
        allows clients to track the state.
      operationId: ModelPublicService_WatchNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/WatchNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions:
    get:
      summary: List namespace model versions
      description: |-
        Returns a paginated list of version of a model namespace that belong to the specified namespace.
        Contains model version and digest.
      operationId: ModelPublicService_ListNamespaceModelVersions
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListNamespaceModelVersionsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of versions to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
      tags:
        - Model Version
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}:
    delete:
      summary: Delete a model version
      description: |-
        Deletes a model version, accesing it by its resource name, which is defined by the
        parent namespace and the ID of the model, and version.
      operationId: ModelPublicService_DeleteNamespaceModelVersion
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/DeleteNamespaceModelVersionResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
      tags:
        - Model Version
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespaceModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/trigger-async:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers a deployed model to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncNamespaceModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger:
    post:
      summary: Trigger model inference
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerNamespaceLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/trigger-async:
    post:
      summary: Trigger model inference asynchronously
      description: |-
        Triggers the latest deployed model version to infer the result of a set of task or
        questions.
      operationId: ModelPublicService_TriggerAsyncNamespaceLatestModel
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceLatestModelResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TriggerAsyncNamespaceLatestModelBody'
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model Trigger
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/versions/{version}/operation:
    get:
      summary: |-
        Get the details of the long-running operation from a namespace model
        with a particular version
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as trigger.
      operationId: ModelPublicService_GetNamespaceModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: version
          description: Model version
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/operation:
    get:
      summary: Get the details of the latest long-running operation from a namespace model
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as trigger.
      operationId: ModelPublicService_GetNamespaceLatestModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetNamespaceLatestModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired operation result in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
  /v1alpha/operations/{operationId}:
    get:
      summary: Get the details of a long-running operation
      description: |-
        This method allows requesters to request the status and outcome of
        long-running operations in a model, such as trigger.
      operationId: ModelPublicService_GetModelOperation
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/GetModelOperationResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: operationId
          description: The resource name of the model, which allows its access ID.
          in: path
          required: true
          type: string
        - name: view
          description: |-
            View allows clients to specify the desired model view in the response.

             - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
             - VIEW_FULL: Full representation.
          in: query
          required: false
          type: string
          enum:
            - VIEW_BASIC
            - VIEW_FULL
      tags:
        - Model
  /v1alpha/namespaces/{namespaceId}/models/{modelId}/runs:
    get:
      summary: List model runs
      description: Returns a paginated list of model runs.
      operationId: ModelPublicService_ListModelRuns
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelRunsResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: namespaceId
          description: Namespace ID.
          in: path
          required: true
          type: string
        - name: modelId
          description: Model ID.
          in: path
          required: true
          type: string
        - name: pageSize
          description: |-
            The maximum number of runs to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
        - name: orderBy
          description: |-
            Sort the results by the given expression.
            Format: `field [ASC | DESC], where `field` can be:
            - `create_time`
            - `update_time`
            By default, results are sorted by descending creation time.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `create_time>timestamp("2000-06-19T23:31:08.657Z")`.
            The filter can be applied to the following fields:
            - `create_time`
          in: query
          required: false
          type: string
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model Trigger
  /v1alpha/dashboard/models/runs:
    get:
      summary: List Model Runs of a Namespace (user or organization)
      description: |-
        Returns a paginated list of runs for 1 or more models. This is mainly used by dashboard.
        The requester can view all the runs by the requester across different models.
      operationId: ModelPublicService_ListModelRunsByRequester
      responses:
        "200":
          description: A successful response.
          schema:
            $ref: '#/definitions/ListModelRunsByRequesterResponse'
        "401":
          description: Returned when the client credentials are not valid.
          schema: {}
        default:
          description: An unexpected error response.
          schema:
            $ref: '#/definitions/rpc.Status'
      parameters:
        - name: pageSize
          description: |-
            The maximum number of runs to return. The default and cap values are 10
            and 100, respectively.
          in: query
          required: false
          type: integer
          format: int32
        - name: page
          description: Page number.
          in: query
          required: false
          type: integer
          format: int32
        - name: orderBy
          description: |-
            Sort the results by the given expression.
            Format: `field [ASC | DESC], where `field` can be:
            - `create_time`
            - `update_time`
            By default, results are sorted by descending creation time.
          in: query
          required: false
          type: string
        - name: filter
          description: |-
            Filter can hold an [AIP-160](https://google.aip.dev/160)-compliant filter
            expression.
            - Example: `status="RUN_STATUS_COMPLETED"`.
            The filter can be applied to the following fields:
            - `status`
            - `source`
          in: query
          required: false
          type: string
        - name: start
          description: |-
            Beginning of the time range from which the records will be fetched.
            The default value is the beginning of the current day, in UTC.
          in: query
          required: false
          type: string
          format: date-time
        - name: stop
          description: |-
            End of the time range from which the records will be fetched.
            The default value is the current timestamp.
          in: query
          required: false
          type: string
          format: date-time
        - name: requesterId
          description: Requester ID.
          in: query
          required: true
          type: string
        - name: Instill-Requester-Uid
          description: Indicates the authenticated namespace is making the request on behalf of another entity, typically an organization they belong to
          in: header
          required: false
          type: string
      tags:
        - Model Trigger
definitions:
  Any:
    type: object
    properties:
      '@type':
        type: string
        description: |-
          A URL/resource name that uniquely identifies the type of the serialized
          protocol buffer message. This string must contain at least
          one "/" character. The last segment of the URL's path must represent
          the fully qualified name of the type (as in
          `path/google.protobuf.Duration`). The name should be in a canonical form
          (e.g., leading "." is not accepted).

          In practice, teams usually precompile into the binary all types that they
          expect it to use in the context of Any. However, for URLs which use the
          scheme `http`, `https`, or no scheme, one can optionally set up a type
          server that maps type URLs to message definitions as follows:

          * If no scheme is provided, `https` is assumed.
          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
            value in binary format, or produce an error.
          * Applications are allowed to cache lookup results based on the
            URL, or have them precompiled into a binary to avoid any
            lookup. Therefore, binary compatibility needs to be preserved
            on changes to types. (Use versioned type names to manage
            breaking changes.)

          Note: this functionality is not currently available in the official
          protobuf release, and it is not used for type URLs beginning with
          type.googleapis.com. As of May 2023, there are no widely used type server
          implementations and no plans to implement one.

          Schemes other than `http`, `https` (or the empty scheme) might be
          used with implementation specific semantics.
    additionalProperties: {}
    description: |-
      `Any` contains an arbitrary serialized protocol buffer message along with a
      URL that describes the type of the serialized message.

      Protobuf library provides support to pack/unpack Any values in the form
      of utility functions or additional generated methods of the Any type.

      Example 1: Pack and unpack a message in C++.

          Foo foo = ...;
          Any any;
          any.PackFrom(foo);
          ...
          if (any.UnpackTo(&foo)) {
            ...
          }

      Example 2: Pack and unpack a message in Java.

          Foo foo = ...;
          Any any = Any.pack(foo);
          ...
          if (any.is(Foo.class)) {
            foo = any.unpack(Foo.class);
          }
          // or ...
          if (any.isSameTypeAs(Foo.getDefaultInstance())) {
            foo = any.unpack(Foo.getDefaultInstance());
          }

       Example 3: Pack and unpack a message in Python.

          foo = Foo(...)
          any = Any()
          any.Pack(foo)
          ...
          if any.Is(Foo.DESCRIPTOR):
            any.Unpack(foo)
            ...

       Example 4: Pack and unpack a message in Go

           foo := &pb.Foo{...}
           any, err := anypb.New(foo)
           if err != nil {
             ...
           }
           ...
           foo := &pb.Foo{}
           if err := any.UnmarshalTo(foo); err != nil {
             ...
           }

      The pack methods provided by protobuf library will by default use
      'type.googleapis.com/full.type.name' as the type URL and the unpack
      methods only use the fully qualified type name after the last '/'
      in the type URL, for example "foo.bar.com/x/y.z" will yield type
      name "y.z".

      JSON
      ====
      The JSON representation of an `Any` value uses the regular
      representation of the deserialized, embedded message, with an
      additional field `@type` which contains the type URL. Example:

          package google.profile;
          message Person {
            string first_name = 1;
            string last_name = 2;
          }

          {
            "@type": "type.googleapis.com/google.profile.Person",
            "firstName": <string>,
            "lastName": <string>
          }

      If the embedded message type is well-known and has a custom JSON
      representation, that representation will be embedded adding a field
      `value` which holds the custom JSON in addition to the `@type`
      field. Example (for message [google.protobuf.Duration][]):

          {
            "@type": "type.googleapis.com/google.protobuf.Duration",
            "value": "1.212s"
          }
  CreateNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The created model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: CreateNamespaceModelResponse contains the created model.
  DeleteNamespaceModelResponse:
    type: object
    description: DeleteNamespaceModelResponse is an empty response.
  DeleteNamespaceModelVersionResponse:
    type: object
    description: DeleteNamespaceModelVersionResponse is an empty response.
  DeployNamespaceModelAdminResponse:
    type: object
    title: DeployNamespaceModelAdminResponse represents a response for a deployed model
  DeployOrganizationModelAdminResponse:
    type: object
    title: DeployOrganizationModelAdminResponse represents a response for a deployed model
  DeployUserModelAdminResponse:
    type: object
    title: DeployUserModelAdminResponse represents a response for a deployed model
  GetModelDefinitionResponse:
    type: object
    properties:
      modelDefinition:
        description: The model definition resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ModelDefinition'
    description: GetModelDefinitionResponse contains the requested model definition.
  GetModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      GetModelOperationRequest represents a request to query a long-running
      operation.
  GetNamespaceLatestModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      GetNamespaceLatestModelOperationResponse represents a response to query a long-running
      operation.
  GetNamespaceModelOperationResponse:
    type: object
    properties:
      operation:
        description: The long-running operation.
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      GetNamespaceModelOperationResponse represents a response to query a long-running
      operation.
  GetNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: GetNamespaceModelResponse contains the requested model.
  ListAvailableRegionsResponse:
    type: object
    properties:
      regions:
        type: array
        items:
          type: object
          $ref: '#/definitions/Region'
        title: A list of available region
        readOnly: true
    description: |-
      ListAvailableRegionsResponse contains a list of available
      regions and hardware types a model can be deployed on.
  ListModelDefinitionsResponse:
    type: object
    properties:
      modelDefinitions:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelDefinition'
        description: A list of model definition resources.
      nextPageToken:
        type: string
        description: Next page token.
      totalSize:
        type: integer
        format: int32
        description: Total number of model definitions.
    description: ListModelDefinitionsResponse contains a list of model definitions.
  ListModelRunsByRequesterResponse:
    type: object
    properties:
      runs:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelRun'
        description: A list of runs resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of runs.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: ListModelRunsByRequesterResponse is the request message for ListModelRunsByRequester.
  ListModelRunsResponse:
    type: object
    properties:
      runs:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelRun'
        description: A list of runs resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of runs.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: ListModelRunsResponse contains a list of model runs.
  ListModelsAdminResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/Model'
        title: a list of Models
      nextPageToken:
        type: string
        title: Next page token
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
    title: ListModelsAdminResponse represents a response for a list of models
  ListModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/Model'
        description: A list of model resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
        readOnly: true
    description: ListModelsResponse contains a list of models.
  ListNamespaceModelVersionsResponse:
    type: object
    properties:
      versions:
        type: array
        items:
          type: object
          $ref: '#/definitions/ModelVersion'
        description: A list of model resources.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of versions.
        readOnly: true
      pageSize:
        type: integer
        format: int32
        description: The requested page size.
        readOnly: true
      page:
        type: integer
        format: int32
        description: The requested page offset.
        readOnly: true
    description: ListNamespaceModelVersionsResponse contains a list of models.
  ListNamespaceModelsResponse:
    type: object
    properties:
      models:
        type: array
        items:
          type: object
          $ref: '#/definitions/Model'
        description: A list of model resources.
        readOnly: true
      nextPageToken:
        type: string
        description: Next page token.
        readOnly: true
      totalSize:
        type: integer
        format: int32
        description: Total number of models.
        readOnly: true
    description: ListNamespaceModelsResponse contains a list of models.
  LookUpModelAdminResponse:
    type: object
    properties:
      model:
        title: A model resource
        allOf:
          - $ref: '#/definitions/Model'
    title: LookUpModelResponse represents a response for a model
  Model:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the model, which allows its access by owner and ID.
          - Format: `users/{user.id}/models/{model.id}`.
        readOnly: true
      uid:
        type: string
        description: Model UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Model resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.
      description:
        type: string
        description: Model description.
      modelDefinition:
        type: string
        description: The model definition that has been used to import the model.
      configuration:
        type: object
        description: |-
          Model configuration. This field is validated against the model
          specification in the model definition (i.e. the `model_spec` field in the
          model definition).
      task:
        description: Model task.
        allOf:
          - $ref: '#/definitions/Task'
      visibility:
        description: Model visibility.
        allOf:
          - $ref: '#/definitions/Model.Visibility'
      createTime:
        type: string
        format: date-time
        description: Model creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Model update time.
        readOnly: true
      deleteTime:
        type: string
        format: date-time
        description: Model deletion time.
        readOnly: true
      ownerName:
        type: string
        description: Resource name of the owner.
        readOnly: true
      owner:
        description: Model owner.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Owner'
      region:
        type: string
        description: Region of choice for the particular provider to host the model.
      hardware:
        type: string
        description: Hardware of choice to serve the model.
      readme:
        type: string
        description: README holds the model documentation.
      sourceUrl:
        type: string
        description: A link to the source code of the model (e.g. to a GitHub repository).
      documentationUrl:
        type: string
        description: A link to any extra information.
      license:
        type: string
        description: License under which the model is distributed.
      profileImage:
        type: string
        description: Model profile image in base64 format.
      permission:
        description: Permission defines how a pipeline can be used.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.Permission'
      inputSchema:
        type: object
        title: Input schema for the model
        readOnly: true
      outputSchema:
        type: object
        title: Output schema for the model
        readOnly: true
      tags:
        type: array
        items:
          type: string
        description: Tags.
        readOnly: true
      versions:
        type: array
        items:
          type: string
        description: Version names.
        readOnly: true
      stats:
        description: Statistic data.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Stats'
    title: |-
      Model represents an AI model, i.e. a program that performs tasks as decision
      making or or pattern recognition based on its training data
    required:
      - id
      - modelDefinition
      - configuration
      - task
      - visibility
      - region
      - hardware
  Model.Visibility:
    type: string
    enum:
      - VISIBILITY_PRIVATE
      - VISIBILITY_PUBLIC
    description: |-
      Visibility defines who can access the model.

       - VISIBILITY_PRIVATE: Only the owner can see the model.
       - VISIBILITY_PUBLIC: Other users can see the model.
  ModelDefinition:
    type: object
    properties:
      name:
        type: string
        description: |-
          The resource name of the model, which allows its access by ID.
          - Format: `model-definitions/{id}`.
        readOnly: true
      uid:
        type: string
        description: Model definition UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Model definition resource ID (used in `name` as the last segment). This
          conforms to RFC-1034, which restricts to letters, numbers, and hyphen,
          with the first character a letter, the last a letter or a number, and a 63
          character maximum.
        readOnly: true
      title:
        type: string
        description: Official display title.
        readOnly: true
      documentationUrl:
        type: string
        description: Documentation URL.
        readOnly: true
      icon:
        type: string
        description: Display icon.
        readOnly: true
      releaseStage:
        description: Release stage.
        readOnly: true
        allOf:
          - $ref: '#/definitions/ReleaseStage'
      modelSpec:
        type: object
        description: |-
          The model specification represented by a JSON schema. It is used to
          validate the JSON configurations of a model created from a specific model
          source, and the resource spec which the model is desired to be deployed on.
          It must be a valid JSON that includes what fields are needed to
          create or display a model.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
    description: ModelDefinition defines how to configure and import a model.
  ModelRun:
    type: object
    properties:
      uid:
        type: string
        description: Model Run UUID.
        readOnly: true
      modelUid:
        type: string
        description: Model UUID.
        readOnly: true
      status:
        description: Model run status.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunStatus'
      source:
        description: Run source.
        readOnly: true
        allOf:
          - $ref: '#/definitions/RunSource'
      totalDuration:
        type: integer
        format: int32
        description: Run total duration in milliseconds.
        readOnly: true
      endTime:
        type: string
        format: date-time
        description: Run end time.
        readOnly: true
      runnerId:
        type: string
        description: Runner ID. If current viewing requester does not have enough permission, it will return null.
        readOnly: true
      creditAmount:
        type: number
        format: float
        description: The amount of Instill Credit consumed by the run. This field will only be present on Instill Cloud.
        readOnly: true
      error:
        type: string
        description: Error message occurred during model run.
        readOnly: true
      createTime:
        type: string
        format: date-time
        description: Model run created time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Model run updated time.
        readOnly: true
      version:
        type: string
        description: The model version identifier, which is same as image tag.
        readOnly: true
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference input.
        readOnly: true
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
      modelId:
        type: string
        description: Model ID.
        readOnly: true
      requesterId:
        type: string
        description: |-
          Requester ID. This field might be empty if the model run belongs to a
          deleted namespace.
        readOnly: true
    description: ModelRun contains information about a run of models.
  ModelVersion:
    type: object
    properties:
      name:
        type: string
        description: |-
          The parent resource, i.e., the user that created the models.
          - Format: `users/{user.id}`.
          The resource name of the model, which allows its access by parent user
          and ID.
          - Format: `users/{user.id}/models/{model.id}`.
          The name of the Version.
          - Format: `users/{user.id}/models/{model.id}/versions/{version.id}`.
      version:
        type: string
        description: The model version identifier, which is equal to image tag.
      digest:
        type: string
        description: Unique identifier, computed from the manifest the Version refers to.
      state:
        description: Current state of this model version.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.State'
      updateTime:
        type: string
        format: date-time
        description: Version update time, i.e. timestamp of the last push.
        readOnly: true
    description: ModelVersion contains information about the version of a model.
  NullValue:
    type: string
    description: |-
      `NullValue` is a singleton enumeration to represent the null value for the
      `Value` type union.

      The JSON representation for `NullValue` is JSON `null`.
  Organization:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the organization, defined by its ID.
          - Format: `organization/{organization.id}`.
        readOnly: true
      uid:
        type: string
        description: Organization UUID.
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      owner:
        description: The user that owns the organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/User'
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/OrganizationProfile'
      permission:
        title: Permission
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1beta.Permission'
    description: |-
      Organizations group several users. As entities, they can own resources such
      as pipelines or releases.
    required:
      - profile
  OrganizationProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the organization's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: OrganizationProfile describes the public data of an organization.
  Owner:
    type: object
    properties:
      user:
        description: User.
        readOnly: true
        allOf:
          - $ref: '#/definitions/User'
      organization:
        description: Organization.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Organization'
    description: Owner is a wrapper for User and Organization, used to embed owner information in other resources.
  Region:
    type: object
    properties:
      regionName:
        type: string
        title: Concate name of provider and region
      hardware:
        type: array
        items:
          type: string
        title: Hardware describes the available hardware types in this region
    description: |-
      Region describes the supported cloud provider and regions, with
      their supported GPU respectively.
  ReleaseStage:
    type: string
    enum:
      - RELEASE_STAGE_ALPHA
      - RELEASE_STAGE_BETA
      - RELEASE_STAGE_GENERALLY_AVAILABLE
      - RELEASE_STAGE_CUSTOM
    description: |-
      ReleaseStage defines the stage of a release.

       - RELEASE_STAGE_ALPHA: Alpha.
       - RELEASE_STAGE_BETA: Beta.
       - RELEASE_STAGE_GENERALLY_AVAILABLE: Generally available.
       - RELEASE_STAGE_CUSTOM: Custom.
  RenameNamespaceModelBody:
    type: object
    properties:
      newModelId:
        type: string
        description: |-
          The new resource ID. This will transform the resource name into
          `namespaces/{namespace.id}/models/{new_model_id}`.
    title: RenameNamespaceModelRequest represents a request to rename a model
    required:
      - newModelId
  RenameNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The renamed model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: RenameNamespaceModelResponse contains a renamed model.
  RunSource:
    type: string
    enum:
      - RUN_SOURCE_CONSOLE
      - RUN_SOURCE_API
    description: |-
      RunSource defines the source of a pipeline or model run.

       - RUN_SOURCE_CONSOLE: Run from frontend UI.
       - RUN_SOURCE_API: Run from API or SDK.
  RunStatus:
    type: string
    enum:
      - RUN_STATUS_PROCESSING
      - RUN_STATUS_COMPLETED
      - RUN_STATUS_FAILED
      - RUN_STATUS_QUEUED
    description: |-
      RunStatus defines the status of a pipeline or model run.

       - RUN_STATUS_PROCESSING: Run in progress.
       - RUN_STATUS_COMPLETED: Run succeeded.
       - RUN_STATUS_FAILED: Run failed.
       - RUN_STATUS_QUEUED: Run is waiting to be executed.
  Stats:
    type: object
    properties:
      numberOfRuns:
        type: integer
        format: int32
        description: Number of model runs.
        readOnly: true
      lastRunTime:
        type: string
        format: date-time
        description: Last run time.
        readOnly: true
    title: Statistic data
  Task:
    type: string
    enum:
      - TASK_CLASSIFICATION
      - TASK_DETECTION
      - TASK_KEYPOINT
      - TASK_OCR
      - TASK_INSTANCE_SEGMENTATION
      - TASK_SEMANTIC_SEGMENTATION
      - TASK_TEXT_TO_IMAGE
      - TASK_IMAGE_TO_IMAGE
      - TASK_EMBEDDING
      - TASK_SPEECH_RECOGNITION
      - TASK_CHAT
      - TASK_COMPLETION
      - TASK_CUSTOM
    description: |-
      Task enumerates the AI task that a model is designed to solve.

       - TASK_CLASSIFICATION: Image Classification - classify images into predefined categories.
       - TASK_DETECTION: Object Detection - detect and localize multiple objects in images.
       - TASK_KEYPOINT: Keypoint Detection - detect and localize multiple keypoints of objects in images.
       - TASK_OCR: OCR (Optical Character Recognition) - detect and recognize text in images.
       - TASK_INSTANCE_SEGMENTATION: Instance Segmentation - detect, localize and delineate multiple objects in images.
       - TASK_SEMANTIC_SEGMENTATION: Semantic Segmentation - classify image pixels into predefined categories.
       - TASK_TEXT_TO_IMAGE: Text to Image - generate images from input text prompts.
       - TASK_IMAGE_TO_IMAGE: Image to Image - generate an image from another image.
       - TASK_EMBEDDING: Embedding - generate an embedding (a representation as coordinates) from a multimodal input.
       - TASK_SPEECH_RECOGNITION: Speech Recognition - transcribe the words in an audio input.
       - TASK_CHAT: Conversational Text Generation - generate text as responses to a dialog input.
       - TASK_COMPLETION: Completion Text Generation - generate text following the input prompt.
       - TASK_CUSTOM: Custom - custom task type for free form input/output.
  TriggerAsyncNamespaceLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerAsyncNamespaceLatestModelRequest represents a request to trigger a model inference
      asynchronously with the latest uploaded version.
    required:
      - taskInputs
  TriggerAsyncNamespaceLatestModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      TriggerAsyncNamespaceLatestModelResponse contains the information to access the
      status of an asynchronous model inference.
  TriggerAsyncNamespaceModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerAsyncNamespaceModelRequest represents a request to trigger a model inference
      asynchronously.
    required:
      - taskInputs
  TriggerAsyncNamespaceModelResponse:
    type: object
    properties:
      operation:
        description: Long-running operation information.
        readOnly: true
        allOf:
          - $ref: '#/definitions/longrunning.Operation'
    description: |-
      TriggerAsyncNamespaceModelResponse contains the information to access the
      status of an asynchronous model inference.
  TriggerNamespaceLatestModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: |-
          Deleteted field.
          Model inference outputs.
        readOnly: true
    description: TriggerNamespaceLatestModelBinaryFileUploadResponse contains the model inference results.
    required:
      - task
  TriggerNamespaceLatestModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: |-
      TriggerNamespaceLatestModelRequest represents a request to trigger a model inference
      with the latest uploaded version.
    required:
      - taskInputs
  TriggerNamespaceLatestModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
    description: TriggerNamespaceLatestModelResponse contains the model inference results.
  TriggerNamespaceModelBinaryFileUploadResponse:
    type: object
    properties:
      task:
        description: Task type.
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
    description: TriggerNamespaceModelBinaryFileUploadResponse contains the model inference results.
    required:
      - task
  TriggerNamespaceModelBody:
    type: object
    properties:
      taskInputs:
        type: array
        items:
          type: object
        description: Model inference inputs.
    description: TriggerNamespaceModelRequest represents a request to trigger a model inference.
    required:
      - taskInputs
  TriggerNamespaceModelResponse:
    type: object
    properties:
      task:
        description: Task type.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Task'
      taskOutputs:
        type: array
        items:
          type: object
        description: Model inference outputs.
        readOnly: true
    description: TriggerNamespaceModelResponse contains the model inference results.
  UndeployNamespaceModelAdminResponse:
    type: object
    title: UndeployNamespaceModelAdminResponse represents a response for a undeployed model
  UndeployOrganizationModelAdminResponse:
    type: object
    title: UndeployOrganizationModelAdminResponse represents a response for a undeployed model
  UndeployUserModelAdminResponse:
    type: object
    title: UndeployUserModelAdminResponse represents a response for a undeployed model
  UpdateNamespaceModelResponse:
    type: object
    properties:
      model:
        description: The updated model resource.
        readOnly: true
        allOf:
          - $ref: '#/definitions/Model'
    description: UpdateNamespaceModelResponse contains the updated model.
  User:
    type: object
    properties:
      name:
        type: string
        description: |-
          The name of the user, defined by its ID.
          - Format: `users/{user.id}`.
        readOnly: true
      uid:
        type: string
        description: |-
          User UUID. This field is optionally set by users on creation (it will be
          server-generated if unspecified).
        readOnly: true
      id:
        type: string
        description: |-
          Resource ID (used in `name` as the last segment). This conforms to
          RFC-1034, which restricts to letters, numbers, and hyphen, with the first
          character a letter, the last a letter or a number, and a 63 character
          maximum.

          Note that the ID can be updated.
      createTime:
        type: string
        format: date-time
        description: Creation time.
        readOnly: true
      updateTime:
        type: string
        format: date-time
        description: Update time.
        readOnly: true
      profile:
        description: Profile.
        allOf:
          - $ref: '#/definitions/UserProfile'
    description: |-
      User describes an individual that interacts with Instill AI. It doesn't
      contain any private information about the user.
  UserProfile:
    type: object
    properties:
      displayName:
        type: string
        description: Display name.
      bio:
        type: string
        description: Biography.
      avatar:
        type: string
        description: Avatar in base64 format.
      publicEmail:
        type: string
        description: Public email.
      companyName:
        type: string
        description: Company name.
      socialProfileLinks:
        type: object
        additionalProperties:
          type: string
        description: |-
          Social profile links list the links to the user's social profiles.
          The key represents the provider, and the value is the corresponding URL.
    description: UserProfile describes the public data of a user.
  WatchNamespaceLatestModelResponse:
    type: object
    properties:
      state:
        description: State.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.State'
      message:
        type: string
        title: Detail description of the state
        readOnly: true
    description: WatchNamespaceLatestModelResponse contains the state of the latest model version.
  WatchNamespaceModelResponse:
    type: object
    properties:
      state:
        description: State.
        readOnly: true
        allOf:
          - $ref: '#/definitions/v1alpha.State'
      message:
        type: string
        title: Detail description of the state
        readOnly: true
    description: WatchNamespaceModelResponse contains the state of a model.
  longrunning.Operation:
    type: object
    properties:
      name:
        type: string
        description: |-
          The server-assigned name, which is only unique within the same service that
          originally returns it. If you use the default HTTP mapping, the
          `name` should be a resource name ending with `operations/{unique_id}`.
      metadata:
        description: |-
          Service-specific metadata associated with the operation.  It typically
          contains progress information and common metadata such as create time.
          Some services might not provide such metadata.  Any method that returns a
          long-running operation should document the metadata type, if any.
        allOf:
          - $ref: '#/definitions/Any'
      done:
        type: boolean
        description: |-
          If the value is `false`, it means the operation is still in progress.
          If `true`, the operation is completed, and either `error` or `response` is
          available.
      error:
        description: The error result of the operation in case of failure or cancellation.
        allOf:
          - $ref: '#/definitions/rpc.Status'
      response:
        description: |-
          The normal response of the operation in case of success.  If the original
          method returns no data on success, such as `Delete`, the response is
          `google.protobuf.Empty`.  If the original method is standard
          `Get`/`Create`/`Update`, the response should be the resource.  For other
          methods, the response should have the type `XxxResponse`, where `Xxx`
          is the original method name.  For example, if the original method name
          is `TakeSnapshot()`, the inferred response type is
          `TakeSnapshotResponse`.
        allOf:
          - $ref: '#/definitions/Any'
    description: |-
      This resource represents a long-running operation that is the result of a
      network API call.
  rpc.Status:
    type: object
    properties:
      code:
        type: integer
        format: int32
        description: |-
          The status code, which should be an enum value of
          [google.rpc.Code][google.rpc.Code].
      message:
        type: string
        description: |-
          A developer-facing error message, which should be in English. Any
          user-facing error message should be localized and sent in the
          [google.rpc.Status.details][google.rpc.Status.details] field, or localized
          by the client.
      details:
        type: array
        items:
          type: object
          $ref: '#/definitions/Any'
        description: |-
          A list of messages that carry the error details.  There is a common set of
          message types for APIs to use.
    description: |-
      The `Status` type defines a logical error model that is suitable for
      different programming environments, including REST APIs and RPC APIs. It is
      used by [gRPC](https://github.com/grpc). Each `Status` message contains
      three pieces of data: error code, error message, and error details.

      You can find out more about this error model and how to work with it in the
      [API Design Guide](https://cloud.google.com/apis/design/errors).
  v1alpha.Permission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the pipeline can be modified.
      canTrigger:
        type: boolean
        description: Defines whether the pipeline can be executed.
    description: Permission defines how a pipeline can be used.
  v1alpha.State:
    type: string
    enum:
      - STATE_OFFLINE
      - STATE_ACTIVE
      - STATE_IDLE
      - STATE_ERROR
      - STATE_STARTING
      - STATE_SCALING_UP
      - STATE_SCALING_DOWN
    description: |-
      State describes the state of a model. See [Deploy
      Models](https://www.instill.tech/docs/latest/model/deploy) for more
      information.

       - STATE_OFFLINE: Offline is the state when the model instance number is 0.
       - STATE_ACTIVE: Active is the state when a model is processing requests.
       - STATE_IDLE: Idle is the state when a model is alive but not processing requests.
       - STATE_ERROR: Error is the state when the model is undeployable.
       - STATE_STARTING: Starting is the state when the system is provisioning the necessary
      resources for the model
       - STATE_SCALING_UP: Scaling Up is the transition state when the system is provisioning compute resource for this model instance.
       - STATE_SCALING_DOWN: Scaling is the transition state when the system is releasing compute resource for this model instance.
  v1alpha.View:
    type: string
    enum:
      - VIEW_BASIC
      - VIEW_FULL
    description: |-
      View defines how a model definition is presented.

       - VIEW_BASIC: Default view, only includes basic information (omits `model_spec`).
       - VIEW_FULL: Full representation.
  v1beta.Permission:
    type: object
    properties:
      canEdit:
        type: boolean
        description: Defines whether the resource can be modified.
        readOnly: true
    description: Permission defines how a resource can be used.
securityDefinitions:
  Bearer:
    type: apiKey
    description: Enter the token with the `Bearer ` prefix, e.g. `Bearer abcde12345`
    name: Authorization
    in: header
    x-default: Bearer instill_sk_***
security:
  - Bearer: []
externalDocs:
  description: More about Instill AI
  url: https://www.instill.tech/docs
