# pylint: disable=no-member,wrong-import-position,too-many-lines,no-name-in-module
from typing import Callable, List

# app
import instill.protogen.app.app.v1alpha.app_pb2 as app_interface
import instill.protogen.app.app.v1alpha.app_public_service_pb2_grpc as app_service
import instill.protogen.app.app.v1alpha.conversation_pb2 as conversation_interface

# common
import instill.protogen.common.healthcheck.v1beta.healthcheck_pb2 as healthcheck
from instill.clients.base import Client, RequestFactory
from instill.clients.constant import DEFAULT_INSTANCE
from instill.clients.instance import InstillInstance
from instill.configuration import global_config
from instill.utils.error_handler import grpc_handler


class AppClient(Client):
    def __init__(
        self,
        api_token: str,
        lookup_func: Callable[[str], str],
        url: str = "api.instill.tech",
        secure: bool = True,
        requester_id: str = "",
        async_enabled: bool = False,
    ) -> None:
        self.host: InstillInstance = InstillInstance(
            app_service.AppPublicServiceStub,
            url=url,
            token=api_token,
            secure=secure,
            async_enabled=async_enabled,
        )

        self.metadata = []
        self._lookup_uid = lookup_func

        if requester_id != "":
            requester_uid = lookup_func(requester_id)
            self.metadata = [("instill-requester-uid", requester_uid)]

    def close(self):
        if self.is_serving():
            self.host.channel.close()

    async def async_close(self):
        if self.is_serving():
            self.host.channel.close()

    @property
    def host(self):
        return self._host

    @host.setter
    def host(self, host: InstillInstance):
        self._host = host

    @property
    def metadata(self):
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[tuple]):
        self._metadata = metadata

{{ range . }}
    @grpc_handler
    def {{ .Method | toSnakeCase | convertMethod }}(
        self,
        {{ range .InputTypes }}{{ .Name | customizeFieldName }}: {{ typeConvert .Name .Type .IsRepeated }}{{ .Name | addDefaultValue | safeHTML }},
        {{ end }}async_enabled: bool = False,
    ) -> {{ .OutputTypeInterface }}.{{ .OutputTypeName }}:
        if async_enabled:
            return RequestFactory(
                method=self.host.async_client.{{ .Method }},
                request={{ .InputTypeInterface }}.{{ .InputTypeName }}({{ range .InputTypes }}
                    {{ .Name }}={{ .Name | customizeParam | safeHTML }},{{ end }}
                ),
                metadata=self.host.metadata + self.metadata,
            ).send_async()

        return RequestFactory(
            method=self.host.client.{{ .Method }},
            request={{ .InputTypeInterface }}.{{ .InputTypeName }}({{ range .InputTypes }}
                {{ .Name }}={{ .Name | customizeParam | safeHTML }},{{ end }}
            ),
            metadata=self.host.metadata + self.metadata,
        ).send_sync()
{{ end }}
