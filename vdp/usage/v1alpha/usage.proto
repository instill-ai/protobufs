syntax = "proto3";

package vdp.usage.v1alpha;

// Protobuf standard
import "google/protobuf/timestamp.proto";

// Google API
import "google/api/resource.proto";
import "google/api/field_behavior.proto";

import "vdp/mgmt/v1alpha/mgmt.proto";

// Session represents a unique session whenever a new instance of VDP gets
// started. The usage server returns a token for the given pair of identifiers
// (`cluster_id` and `server_id`) that should be used as part of the challenge
// when creating a report
message Session {
  option (google.api.resource) = {
    type : "api.instill.tech/Session"
    pattern : "sessions/{session}"
  };

  // Resource name in the format of 'sessions/uid'
  string name = 1 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Resource UUID
  string uid = 2 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Session env, e.g., 'os', 'cloud'
  string env = 3 [ (google.api.field_behavior) = REQUIRED ];
  // Token to send report. The token is generated by the server and sent to the
  // client. Client needs to use the token to send report to the server.
  string token = 4 [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Session creation time
  google.protobuf.Timestamp create_time = 5
      [ (google.api.field_behavior) = OUTPUT_ONLY ];
  // Session update time
  google.protobuf.Timestamp update_time = 6
      [ (google.api.field_behavior) = OUTPUT_ONLY ];
}

// SessionData represents the session data collected from a session
message SessionData {
  enum Service {
    // Service: UNSPECIFIED
    SERVICE_UNSPECIFIED = 0;
    // Service: MGMT
    SERVICE_MGMT = 1;
    // Service: CONNECTOR
    SERVICE_CONNECTOR = 2;
    // Service: MODEL
    SERVICE_MODEL = 3;
    // Service: PIPELINE
    SERVICE_PIPELINE = 4;
  }

  // Session UUID
  string session_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
  // name of the service to collect data from
  Service service = 2 [ (google.api.field_behavior) = REQUIRED ];

  // Version of the service
  string version = 3 [ (google.api.field_behavior) = REQUIRED ];
  // Architecture of the system
  string arch = 4 [ (google.api.field_behavior) = REQUIRED ];
  // Operating system
  string os = 5 [ (google.api.field_behavior) = REQUIRED ];
  // Session service uptime
  int64 uptime = 6 [ (google.api.field_behavior) = REQUIRED ];
  // Report time
  google.protobuf.Timestamp report_time = 7
      [ (google.api.field_behavior) = REQUIRED ];
}

// Management service usage data
message MgmtUsageData {
  // Repeated user usage data
  repeated mgmt.v1alpha.User user = 1;
}

// Connector service usage data
message ConnectorUsageData {
  // Per owner usage data in the connector service
  message OwnerUsageData {
    // Owner UUID
    string owner_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
    // Number of source connectors with 'connected' state
    int64 source_connector_connected_num = 2
        [ (google.api.field_behavior) = REQUIRED ];
    // Definition IDs of the connected source connectors. Element in the list
    // should not be duplicated.
    repeated string source_connector_definition_ids = 3
        [ (google.api.field_behavior) = REQUIRED ];
    // Number of destination connectors with 'connected' state
    int64 destination_connected_num = 4
        [ (google.api.field_behavior) = REQUIRED ];
    // Definitions of the connected destination connectors. Element in the list
    // should not be duplicated.
    repeated string destination_connector_definitions = 5
        [ (google.api.field_behavior) = REQUIRED ];
  }
  // Usage data of all owners in the connector service
  repeated OwnerUsageData data = 1;
}

// Model service usage data
message ModelUsageData {
  // Per owner usage data in the model service
  message OwnerUsageData {
    // Owner UUID
    string owner_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
    // Number of model instances with 'online' state
    int64 instance_online_num = 2 [ (google.api.field_behavior) = REQUIRED ];
    // Definition IDs of the online model instances. Element in the list
    // should not be duplicated.
    repeated string model_definition_ids = 3
        [ (google.api.field_behavior) = REQUIRED ];
    // Number of model instance testing operations
    int64 test_num = 4 [ (google.api.field_behavior) = REQUIRED ];
  }
  // Usage data of all owners in the model service
  repeated OwnerUsageData data = 1;
}

// Pipeline service usage data
message PipelineUsageData {
  // Per owner usage data in the pipeline service
  message OwnerUsageData {
    // Owner UUID
    string owner_uid = 1 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipelines with 'active' state
    int64 active_num = 2 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipelines with 'active' state and 'async' mode
    int64 async_active_num = 3 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipelines with 'active' state and 'sync' mode
    int64 sync_active_num = 4 [ (google.api.field_behavior) = REQUIRED ];
    // Number of pipeline triggering operations
    int64 trigger_num = 5 [ (google.api.field_behavior) = REQUIRED ];
  }
  // Usage data of all owners in the pipeline service
  repeated OwnerUsageData data = 1;
}

// Report represents a report to be sent to the server that includes the usage
// data of a session
message Report {
  // Session token
  string token = 1 [ (google.api.field_behavior) = REQUIRED ];
  // Proof-of-work See https://en.wikipedia.org/wiki/Proof_of_work
  string pow = 2 [ (google.api.field_behavior) = REQUIRED ];
  // Session data
  SessionData session_data = 3 [ (google.api.field_behavior) = REQUIRED ];
  // Service usage data
  oneof usage_data {
    // Management service usage data
    MgmtUsageData mgmt_usage_data = 4;
    // Connector service usage data
    ConnectorUsageData connector_usage_data = 5;
    // Model service usage data
    ModelUsageData model_usage_data = 6;
    // Pipeline service usage data
    PipelineUsageData pipeline_usage_data = 7;
  }
}

// CreateSessionRequest represents a request to create a new session
message CreateSessionRequest {
  // A session resource to create
  Session session = 1 [ (google.api.field_behavior) = REQUIRED ];
}
// CreateSessionResponse represents a response for a session response
message CreateSessionResponse {
  // A session resource
  Session session = 1;
}
// SendReportRequest represents a request to send a usage report
message SendReportRequest {
  // A report resource to create
  Report report = 1 [ (google.api.field_behavior) = REQUIRED ];
}
// SendReportResponse represents an empty response
message SendReportResponse {}
