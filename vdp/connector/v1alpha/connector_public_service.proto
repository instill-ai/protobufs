syntax = "proto3";

package vdp.connector.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/connector/v1alpha/healthcheck.proto";
import "vdp/connector/v1alpha/connector_definition.proto";
import "vdp/connector/v1alpha/connector.proto";

// Connector service responds to external access
service ConnectorPublicService {
  option (google.api.default_host) = "api.instill.tech";

  /////////////////////////////////
  // Connector definition methods
  /////////////////////////////////

  // Check if the Connector service is alive or dead.
  // 
  // `Liveness` is a call with the method(s) `GET` within the `ConnectorPublicService` service. This method returns the liveness (alive or dead) of the pipeilne service. It takes in `LivenessRequest` and returns a `LivenessResponse`.
  //
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/connector"} ]
    };
  }

  // Check if the Connector service is ready to serve traffics
  //
  // `Readiness` is a call with the method(s) `GET` within the `ConnectorPublicService` service. This method returns the Readiness (ready or not ready) of the pipeilne service. It takes in `ReadinessRequest` and returns a `ReadinessResponse`.
  // 
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
      additional_bindings : [ {get : "/v1alpha/ready/connector"} ]
    };
  }

  // List the definition of all supported SOURCE connector resources
  //
  // `ListSourceConnectorDefinitions` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns *all* source connector definitions supported by VDP. It takes in `ListSourceConnectorDefinitionsRequest` and returns `ListSourceConnectorDefinitionsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 source-connector definitions. The maxumum number of model definitions this method can return is set to 100.
  rpc ListSourceConnectorDefinitions(ListSourceConnectorDefinitionsRequest)
      returns (ListSourceConnectorDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/source-connector-definitions"
    };
  }

  // Get the difinition of a SOURCE connector resource with it's name.
  //
  // `GetSourceConnectorDefinition` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a model definition supported by VDP. It takes in `GetSourceConnectorDefinitionRequest` and returns `GetSourceConnectorDefinitionResponse`.
  //
  // **NOTE**: `source_connector_definition.name` field in `GetSourceConnectorDefinitionRequest` must has the format of `source-connector-definitions/{connector_name}`. For example: `source-connector-definitions/http`.
  rpc GetSourceConnectorDefinition(GetSourceConnectorDefinitionRequest)
      returns (GetSourceConnectorDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=source-connector-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // List the definition of all supported DESINATION connector resources
  //
  // `ListDestinationConnectorDefinitions` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns *all* destination connector definitions supported by VDP. It takes in `ListDestinationConnectorDefinitionsRequest` and returns `ListDestinationConnectorDefinitionsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 destination-connector definitions. The maxumum number of model definitions this method can return is set to 100.
  rpc ListDestinationConnectorDefinitions(
      ListDestinationConnectorDefinitionsRequest)
      returns (ListDestinationConnectorDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/destination-connector-definitions"
    };
  }

  // Get the difinition of a DESTINATION connector resource with it's name.
  //
  // `GetDestinationConnectorDefinition` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a model definition supported by VDP. It takes in `GetDestinationConnectorDefinitionRequest` and returns `GetDestinationConnectorDefinitionResponse`.
  //
  // **NOTE**: `destination_connector_definition.name` field in `GetDestinationConnectorDefinitionRequest` must has the format of `destination-connector-definitions/{connector_name}`. For example: `destination-connector-definitions/http`.
  rpc GetDestinationConnectorDefinition(
      GetDestinationConnectorDefinitionRequest)
      returns (GetDestinationConnectorDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=destination-connector-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  /////////////////////////////////
  // Connector methods
  /////////////////////////////////

  // *SourceConnector methods

  // Create a new SOURCE connector resource in VDP.
  //
  // `CreateSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. This method creates a new source-connector resource in VDP. It takes in `CreateSourceConnectorRequest` and returns `CreateSourceConnectorResponse`.
  //
  // → See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for an introduction to Connectors in VDP.
  rpc CreateSourceConnector(CreateSourceConnectorRequest)
      returns (CreateSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/source-connectors"
      body : "source_connector"
    };
    option (google.api.method_signature) = "source_connector";
  }

  // List all SOURCE connector resources avaiable in VDP.
  //
  // `ListSourceConnectors` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a list of source-connector resources in VDP. It takes in `ListSourceConnectorsRequest` and returns `ListSourceConnectorsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 models. The maxumum number of source-connector resources this method can return is set to 100.
  rpc ListSourceConnectors(ListSourceConnectorsRequest)
      returns (ListSourceConnectorsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/source-connectors"
    };
  }


  // Get a SOURCE connector resource in VDP with it's name. 
  //
  // `GetSourceConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a source-connector resource in VDP with the quried name. It takes in `GetSourceConnectorRequest` and returns `GetSourceConnectorResponse`.
  //
  // **NOTE**: The `source_connector.name` field in `GetSourceConnectorRequest` must has the format of `source-connectors/{connector_name}`. For example: `models/http`.
  rpc GetSourceConnector(GetSourceConnectorRequest)
      returns (GetSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=source-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Update a SOURCE connector resource in VDP
  //
  // `UpdateSourceConnector` is a call with the method(s) `PATCH` within the `ConnectorPublicService`. This method updates a source-connector resource. It takes in `UpdateSourceConnectorRequest` and returns `UpdateSourceConnectorResponse`.
  //
  // **NOTE**: The `source_connector.name` field in `UpdateSourceConnectorRequest` is used to identify the model resource to update. Format: `source-connectors/{connector_name}`.
  rpc UpdateSourceConnector(UpdateSourceConnectorRequest)
      returns (UpdateSourceConnectorResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{source_connector.name=source-connectors/*}"
      body : "source_connector"
    };
    option (google.api.method_signature) = "source_connector,update_mask";
  }

  // Delete a SOURCE connector resource in VDP with it's name.
  //
  // `DeleteSourceConnector` is a call with the method(s) `DELETE` within the `ConnectorPublicService`. This method delete a model resource in VDP with the quried name. It takes in `DeleteSourceConnectorRequest` and returns `DeleteSourceConnectorResponse`.
  //
  // **NOTE**: The `source_connector.name` field in `DeleteSourceConnectorRequest` must has the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.
  rpc DeleteSourceConnector(DeleteSourceConnectorRequest)
      returns (DeleteSourceConnectorResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=source-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a SOURECE connector resource in VDP with a permalink consisting of unique ID.
  //
  // `LookUpSourceConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. This methods returns a source-connector resource in VDP with it's permalink (i.e., `source_connector.uid`). It takes in `LookUpSourceConnectorRequest` and returns `LookUpSourceConnectorResponse`.
  //
  // **NOTE**: permalink in `LookUpSourceConnectorRequest` must has the format of `source-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector.
  rpc LookUpSourceConnector(LookUpSourceConnectorRequest)
      returns (LookUpSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=source-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Connect a SOURCE connector with it's name.
  //
  // `ConnectSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. This method connects a source connector. The "state" of the connector after connecting is "STATE_CONNECTED". ConnectSourceConnector can be called on SourceConnector in the state `STATE_DISCONNECTED`; SourceConnector in a different state (including `STATE_CONNECTED`) returns an error.  
  // It takes in `ConnectSourceConnectorRequest` and returns `ConnectSourceConnectorResponse`.
  //
  // → See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States.
  rpc ConnectSourceConnector(ConnectSourceConnectorRequest)
      returns (ConnectSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/connect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Disconnect a SOURCE connector with it's name.
  //
  // `DisconnectSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. This method disconnects a source connector. The "state" of the connector after disconnecting is "STATE_DISCONNECTED". ConnectSourceConnector can be called on SourceConnector in the state `STATE_CONNECTED`; SourceConnector in a different state (including `STATE_DISCONNECTED`) returns an error.  
  // It takes in `DisconnectSourceConnectorRequest` and returns `DisconnectSourceConnectorResponse`.
  //
  // → See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States.
  rpc DisconnectSourceConnector(DisconnectSourceConnectorRequest)
      returns (DisconnectSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/disconnect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Rename a SOURCE connector resource in VDP
  //
  // `RenameSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. This method changes the name of a source-connector resource and returns the updated source-connector resource. It takes in `RenameSourceConnectorRequest` and returns `RenameSourceConnectorResponse`.
  //
  // NOTE: `source_connector.name` field in `RenameSourceConnectorRequest` must has the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.
  rpc RenameSourceConnector(RenameSourceConnectorRequest)
      returns (RenameSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_source_connector_id";
  }

  // Read data with a SOURCE connector
  //
  // `ReadSourceConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. This method performs a read operation with a source-connector resource and returns data in bytes. It takes in `ReadSourceConnectorRequest` and returns `ReadSourceConnectorResponse`.
  //
  // NOTE: `source_connector.name` field in `ReadSourceConnectorRequest` must has the format of `source-connectors/{connector_name}`. For example: `source-connectors/http`.
  rpc ReadSourceConnector(ReadSourceConnectorRequest)
      returns (ReadSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/read"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_source_connector_id";
  }

  // WatchSourceConnector method receives a WatchSourceConnectorRequest message
  // and returns a WatchSourceConnectorResponse
  rpc WatchSourceConnector(WatchSourceConnectorRequest)
      returns (WatchSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=source-connectors/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // *DestinationConnector methods

  // Create a new DESTINATION connector resource in VDP.
  //
  // `CreateDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. This method creates a new destination-connector resource in VDP. It takes in `CreateDestinationConnectorRequest` and returns `CreateDestinationConnectorResponse`.
  //
  // → See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for an introduction to Connectors in VDP.
  rpc CreateDestinationConnector(CreateDestinationConnectorRequest)
      returns (CreateDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/destination-connectors"
      body : "destination_connector"
    };
    option (google.api.method_signature) = "destination_connector";
  }

  // List all DESTINATION connector resources avaiable in VDP.
  //
  // `ListDestinationConnectors` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a list of destination-connector resources in VDP. It takes in `ListDestinationConnectorsRequest` and returns `ListDestinationConnectorsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 models. The maxumum number of destination-connector resources this method can return is set to 100.
  rpc ListDestinationConnectors(ListDestinationConnectorsRequest)
      returns (ListDestinationConnectorsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/destination-connectors"
    };
  }

  // Get a DESTINATION connector resource in VDP with it's name. 
  //
  // `GetDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. This method returns a destination-connector resource in VDP with the quried name. It takes in `GetDestinationConnectorRequest` and returns `GetDestinationConnectorResponse`.
  //
  // **NOTE**: The `destination_connector.name` field in `GetDestinationConnectorRequest` must has the format of `destination-connectors/{connector_name}`. For example: `models/postgres-db`.
  rpc GetDestinationConnector(GetDestinationConnectorRequest)
      returns (GetDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=destination-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Update a DESTINATION connector resource in VDP
  //
  // `UpdateDestinationConnector` is a call with the method(s) `PATCH` within the `ConnectorPublicService`. This method updates a destination-connector resource. It takes in `UpdateDestinationConnectorRequest` and returns `UpdateDestinationConnectorResponse`.
  //
  // **NOTE**: The `destination_connector.name` field in `UpdateDestinationConnectorRequest` is used to identify the destination-connector resource to update. Format: `destination-connectors/{connector_name}`.
  rpc UpdateDestinationConnector(UpdateDestinationConnectorRequest)
      returns (UpdateDestinationConnectorResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{destination_connector.name=destination-connectors/*}"
      body : "destination_connector"
    };
    option (google.api.method_signature) = "destination_connector,update_mask";
  }

  // Delete a DESTINATION connector resource in VDP with it's name.
  //
  // `DeleteDestinationConnector` is a call with the method(s) `DELETE` within the `ConnectorPublicService`. This method delete a model resource in VDP with the quried name. It takes in `DeleteDestinationConnectorRequest` and returns `DeleteDestinationConnectorResponse`.
  //
  // **NOTE**: The `destination_connector.name` field in `DeleteSourceConnectorRequest` must has the format of `destination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`.
  rpc DeleteDestinationConnector(DeleteDestinationConnectorRequest)
      returns (DeleteDestinationConnectorResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=destination-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a DESTINATION connector resource in VDP with a permalink consisting of unique ID.
  //
  // `LookUpDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPublicService`. This methods returns a destination-connector resource in VDP with it's permalink (i.e., `destinatin_connector.uid`). It takes in `LookUpDestinationConnectorRequest` and returns `LookUpDestinationConnectorResponse`.
  //
  // **NOTE**: permalink in `LookUpDestinationConnectorRequest` must has the format of `destination-connectors/{uid}`, where `{uid}` denotes the unique ID of the connector.
  rpc LookUpDestinationConnector(LookUpDestinationConnectorRequest)
      returns (LookUpDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=destination-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Connect a DESTINATION connector with it's name.
  //
  // `ConnectDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. This method connects a destination connector. The "state" of the connector after connecting is "STATE_CONNECTED". ConnectDestinationConnector can be called on DestinationConnector in the state `STATE_DISCONNECTED`; DestinationConnector in a different state (including `STATE_CONNECTED`) returns an error.  
  // It takes in `ConnectDestinationConnectorRequest` and returns `ConnectDestinationConnectorResponse`.
  //
  // → See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States.
  rpc ConnectDestinationConnector(ConnectDestinationConnectorRequest)
      returns (ConnectDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/connect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Disconnect a DESTINATION connector with it's name.
  //
  // `DisconnectDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService`. This method disconnects a destination connector. The "state" of the connector after disconnecting is "STATE_DISCONNECTED". ConnectDestinationConnector can be called on DestinationConnector in the state `STATE_CONNECTED`; DestinatinConnector in a different state (including `STATE_DISCONNECTED`) returns an error.  
  // It takes in `DisconnectDestinationConnectorRequest` and returns `DisconnectDestinationConnectorResponse`.
  //
  // → See [Core concept - Connector](https://www.instill.tech/docs/core-concepts/connector) for more information about Connectors and their States.
  rpc DisconnectDestinationConnector(DisconnectDestinationConnectorRequest)
      returns (DisconnectDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/disconnect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Rename a DESTINATION connector resource in VDP
  //
  // `RenameDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. This method changes the name of a destination-connector resource and returns the updated destination-connector resource. It takes in `RenameDestinationConnectorRequest` and returns `RenameDestinationConnectorResponse`.
  //
  // NOTE: `destination_connector.name` field in `RenameDestinationConnectorRequest` must has the format of `destination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`.
  rpc RenameDestinationConnector(RenameDestinationConnectorRequest)
      returns (RenameDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_destination_connector_id";
  }

  // Write model outputs via a DESTINATION connector
  //
  // `WriteDestinationConnector` is a call with the method(s) `POST` within the `ConnectorPublicService` service. This method performs a write operation with a destination-connector resource. It takes in `WriteDestinationConnectorRequest` and returns `WriteDestinationConnectorResponse`.
  //
  // NOTE: 
  // 1. `destination_connector.name` field in `WriteDestinationConnectorRequest` must has the format of `detsination-connectors/{connector_name}`. For example: `destination-connectors/postgres-db`.
  // 2. This method supports two differt modes: *sync* mode and *destination sync* mode. See [Understanding Airbyte Connections](https://docs.airbyte.com/understanding-airbyte/connections/#sync-modes) for further details.
  rpc WriteDestinationConnector(WriteDestinationConnectorRequest)
      returns (WriteDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/write"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_destination_connector_id";
  }

  // WatchDestinationConnector method receives a WatchDestinationConnectorRequest message
  // and returns a WatchDestinationConnectorResponse
  rpc WatchDestinationConnector(WatchDestinationConnectorRequest)
      returns (WatchDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=destination-connectors/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // *Longrunning operation methods

  // GetConnectorOperation method receives a
  // GetConnectorOperationRequest message and returns a
  // GetConnectorOperationResponse message.
  rpc GetConnectorOperation(GetConnectorOperationRequest)
      returns (GetConnectorOperationResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=operations/*}"
    };
    option (google.api.method_signature) = "name";
  }
}
