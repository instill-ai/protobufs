syntax = "proto3";

package vdp.connector.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/connector/v1alpha/healthcheck.proto";
import "vdp/connector/v1alpha/connector_definition.proto";
import "vdp/connector/v1alpha/connector.proto";

// Connector service responds to external access
service ConnectorPublicService {
  option (google.api.default_host) = "api.instill.tech";

  /////////////////////////////////
  // Connector definition methods
  /////////////////////////////////

  // Liveness method receives a LivenessRequest message and returns a
  // LivenessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/connector"} ]
    };
  }

  // Readiness method receives a ReadinessRequest message and returns a
  // ReadinessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
    };
  }

  // ListSourceConnectorDefinitions method receives a
  // ListSourceConnectorDefinitionsRequest message and returns a
  // ListSourceConnectorDefinitionsResponse message.
  rpc ListSourceConnectorDefinitions(ListSourceConnectorDefinitionsRequest)
      returns (ListSourceConnectorDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/source-connector-definitions"
    };
  }

  // GetSourceConnectorDefinition method receives a
  // GetSourceConnectorDefinitionRequest message and returns a
  // GetSourceConnectorDefinitionResponse message.
  rpc GetSourceConnectorDefinition(GetSourceConnectorDefinitionRequest)
      returns (GetSourceConnectorDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=source-connector-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // ListDestinationConnectorDefinitions method receives a
  // ListDestinationConnectorDefinitionsRequest message and returns a
  // ListDestinationConnectorDefinitionsResponse message.
  rpc ListDestinationConnectorDefinitions(
      ListDestinationConnectorDefinitionsRequest)
      returns (ListDestinationConnectorDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/destination-connector-definitions"
    };
  }

  // GetDestinationConnectorDefinition method receives a
  // GetDestinationConnectorDefinitionRequest message and returns a
  // GetDestinationConnectorDefinitionResponse message.
  rpc GetDestinationConnectorDefinition(
      GetDestinationConnectorDefinitionRequest)
      returns (GetDestinationConnectorDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=destination-connector-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // ListBlockchainConnectorDefinitions method receives a
  // ListBlockchainConnectorDefinitionsRequest message and returns a
  // ListBlockchainConnectorDefinitionsResponse message.
  rpc ListBlockchainConnectorDefinitions(
      ListBlockchainConnectorDefinitionsRequest)
      returns (ListBlockchainConnectorDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/blockchain-connector-definitions"
    };
  }

  // GetBlockchainConnectorDefinition method receives a
  // GetBlockchainConnectorDefinitionRequest message and returns a
  // GetBlockchainConnectorDefinitionResponse message.
  rpc GetBlockchainConnectorDefinition(
      GetBlockchainConnectorDefinitionRequest)
      returns (GetBlockchainConnectorDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=blockchain-connector-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  /////////////////////////////////
  // Connector methods
  /////////////////////////////////

  // *SourceConnector methods

  // CreateSourceConnector method receives a CreateSourceConnectorRequest
  // message and returns a CreateSourceConnectorResponse message.
  rpc CreateSourceConnector(CreateSourceConnectorRequest)
      returns (CreateSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/source-connectors"
      body : "source_connector"
    };
    option (google.api.method_signature) = "source_connector";
  }

  // ListSourceConnectors method receives a ListSourceConnectorsRequest message
  // and returns a ListSourceConnectorsResponse message.
  rpc ListSourceConnectors(ListSourceConnectorsRequest)
      returns (ListSourceConnectorsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/source-connectors"
    };
  }

  // GetSourceConnector method receives a GetSourceConnectorRequest message and
  // returns a GetSourceConnectorResponse message.
  rpc GetSourceConnector(GetSourceConnectorRequest)
      returns (GetSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=source-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // UpdateSourceConnector method receives a UpdateSourceConnectorRequest
  // message and returns a UpdateSourceConnectorResponse message.
  rpc UpdateSourceConnector(UpdateSourceConnectorRequest)
      returns (UpdateSourceConnectorResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{source_connector.name=source-connectors/*}"
      body : "source_connector"
    };
    option (google.api.method_signature) = "source_connector,update_mask";
  }

  // DeleteSourceConnector method receives a DeleteSourceConnectorRequest
  // message and returns a DeleteSourceConnectorResponse message.
  rpc DeleteSourceConnector(DeleteSourceConnectorRequest)
      returns (DeleteSourceConnectorResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=source-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // LookUpSourceConnector method receives a LookUpSourceConnectorRequest
  // message and returns a LookUpSourceConnectorResponse
  rpc LookUpSourceConnector(LookUpSourceConnectorRequest)
      returns (LookUpSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=source-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Connect a source connector.
  // The "state" of the connector after connecting is "CONNECTED".
  // ConnectSourceConnector can be called on SourceConnector in the state
  // `DISCONNECTED`; SourceConnector in a different state (including
  // `CONNECTED`) returns an error.
  rpc ConnectSourceConnector(ConnectSourceConnectorRequest)
      returns (ConnectSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/connect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Disconnect a source connector.
  // The "state" of the connector after disconnecting is "DISCONNECTED".
  // DisconnectSourceConnector can be called on SourceConnector in the state
  // `CONNECTED`; SourceConnector in a different state (including
  // `DISCONNECTED`) returns an error.
  rpc DisconnectSourceConnector(DisconnectSourceConnectorRequest)
      returns (DisconnectSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/disconnect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // RenameSourceConnector method receives a RenameSourceConnectorRequest
  // message and returns a RenameSourceConnectorResponse message.
  rpc RenameSourceConnector(RenameSourceConnectorRequest)
      returns (RenameSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_source_connector_id";
  }

  // ExecuteSourceConnector method receives a ExecuteSourceConnectorRequest 
  // message and returns a ExecuteSourceConnectorResponse message.
  rpc ExecuteSourceConnector(ExecuteSourceConnectorRequest)
      returns (ExecuteSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/execute"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  };

  // WatchSourceConnector method receives a WatchSourceConnectorRequest message
  // and returns a WatchSourceConnectorResponse
  rpc WatchSourceConnector(WatchSourceConnectorRequest)
      returns (WatchSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=source-connectors/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // TestSourceConnector method receives a TestSourceConnectorRequest message
  // and returns a TestSourceConnectorResponse
  rpc TestSourceConnector(TestSourceConnectorRequest)
      returns (TestSourceConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=source-connectors/*}/testConnection"
    };
    option (google.api.method_signature) = "name";
  }

  // *DestinationConnector methods

  // CreateDestinationConnector method receives a
  // CreateDestinationConnectorRequest message and returns a
  // CreateDestinationConnectorResponse message.
  rpc CreateDestinationConnector(CreateDestinationConnectorRequest)
      returns (CreateDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/destination-connectors"
      body : "destination_connector"
    };
    option (google.api.method_signature) = "destination_connector";
  }

  // ListDestinationConnectors method receives a ListDestinationConnectorsRequest
  // message and returns a ListDestinationConnectorsResponse message.
  rpc ListDestinationConnectors(ListDestinationConnectorsRequest)
      returns (ListDestinationConnectorsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/destination-connectors"
    };
  }

  // GetDestinationConnector method receives a GetDestinationConnectorRequest
  // message and returns a GetDestinationConnectorResponse message.
  rpc GetDestinationConnector(GetDestinationConnectorRequest)
      returns (GetDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=destination-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // UpdateDestinationConnector method receives a
  // UpdateDestinationConnectorRequest message and returns a
  // UpdateDestinationConnectorResponse message.
  rpc UpdateDestinationConnector(UpdateDestinationConnectorRequest)
      returns (UpdateDestinationConnectorResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{destination_connector.name=destination-connectors/*}"
      body : "destination_connector"
    };
    option (google.api.method_signature) = "destination_connector,update_mask";
  }

  // DeleteDestinationConnector method receives a
  // DeleteDestinationConnectorRequest message and returns a
  // DeleteDestinationConnectorResponse message.
  rpc DeleteDestinationConnector(DeleteDestinationConnectorRequest)
      returns (DeleteDestinationConnectorResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=destination-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // LookUpDestinationConnector method receives a
  // LookUpDestinationConnectorRequest message and returns a
  // LookUpDestinationConnectorResponse
  rpc LookUpDestinationConnector(LookUpDestinationConnectorRequest)
      returns (LookUpDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=destination-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Connect a destination connector.
  // The "state" of the connector after connecting is "CONNECTED".
  // ConnectDestinationConnector can be called on DestinationConnector in the
  // state `DISCONNECTED`; DestinationConnector in a different state (including
  // `CONNECTED`) returns an error.
  rpc ConnectDestinationConnector(ConnectDestinationConnectorRequest)
      returns (ConnectDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/connect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Disconnect a destination connector.
  // The "state" of the connector after disconnecting is "DISCONNECTED".
  // DisconnectDestinationConnector can be called on DestinationConnector in the
  // state `CONNECTED`; DestinationConnector in a different state (including
  // `DISCONNECTED`) returns an error.
  rpc DisconnectDestinationConnector(DisconnectDestinationConnectorRequest)
      returns (DisconnectDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/disconnect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // RenameDestinationConnector method receives a
  // RenameDestinationConnectorRequest message and returns a
  // RenameDestinationConnectorResponse message.
  rpc RenameDestinationConnector(RenameDestinationConnectorRequest)
      returns (RenameDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_destination_connector_id";
  }

  // ExecuteDestinationConnector method receives a
  // ExecuteDestinationConnectorRequest message and returns a
  // ExecuteDestinationConnectorResponse message.
  rpc ExecuteDestinationConnector(ExecuteDestinationConnectorRequest)
      returns (ExecuteDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/execute"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  };

  // WatchDestinationConnector method receives a WatchDestinationConnectorRequest message
  // and returns a WatchDestinationConnectorResponse
  rpc WatchDestinationConnector(WatchDestinationConnectorRequest)
      returns (WatchDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=destination-connectors/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // TestDestinationConnector method receives a TestDestinationConnectorRequest message
  // and returns a TestDestinationConnectorResponse
  rpc TestDestinationConnector(TestDestinationConnectorRequest)
      returns (TestDestinationConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=destination-connectors/*}/testConnection"
    };
    option (google.api.method_signature) = "name";
  }

  // *BlockchainConnector methods

  // CreateBlockchainConnector method receives a CreateBlockchainConnectorRequest
  // message and returns a CreateBlockchaineConnectorResponse message.
  rpc CreateBlockchainConnector(CreateBlockchainConnectorRequest)
      returns (CreateBlockchainConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/blockchain-connectors"
      body : "blockchain_connector"
    };
    option (google.api.method_signature) = "blockchain_connector";
  }

  // ListBlockchainConnectors method receives a ListBlockchainConnectorsRequest message
  // and returns a ListBlockchainConnectorsResponse message.
  rpc ListBlockchainConnectors(ListBlockchainConnectorsRequest)
      returns (ListBlockchainConnectorsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/blockchain-connectors"
    };
  }

  // GetBlockchainConnector method receives a GetBlockchainConnectorRequest message and
  // returns a GetBlockchainConnectorResponse message.
  rpc GetBlockchainConnector(GetBlockchainConnectorRequest)
      returns (GetBlockchainConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=blockchain-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // UpdateBlockchainConnector method receives a UpdateBlockchainConnectorRequest
  // message and returns a UpdateBlockchainConnectorResponse message.
  rpc UpdateBlockchainConnector(UpdateBlockchainConnectorRequest)
      returns (UpdateBlockchainConnectorResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{blockchain_connector.name=blockchain-connectors/*}"
      body : "blockchain_connector"
    };
    option (google.api.method_signature) = "blockchain_connector,update_mask";
  }

  // DeleteBlockchainConnector method receives a DeleteBlockchainConnectorRequest
  // message and returns a DeleteBlockchainConnectorResponse message.
  rpc DeleteBlockchainConnector(DeleteBlockchainConnectorRequest)
      returns (DeleteBlockchainConnectorResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=blockchain-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // LookUpBlockchainConnector method receives a LookUpBlockchainConnectorRequest
  // message and returns a LookUpBlockchainConnectorResponse
  rpc LookUpBlockchainConnector(LookUpBlockchainConnectorRequest)
      returns (LookUpBlockchainConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=blockchain-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Connect a blockchain connector.
  // The "state" of the connector after connecting is "CONNECTED".
  // ConnectBlockchainConnector can be called on BlockchainConnector in the state
  // `DISCONNECTED`; BlockchainConnector in a different state (including
  // `CONNECTED`) returns an error.
  rpc ConnectBlockchainConnector(ConnectBlockchainConnectorRequest)
      returns (ConnectBlockchainConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=blockchain-connectors/*}/connect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Disconnect a blockchain connector.
  // The "state" of the connector after disconnecting is "DISCONNECTED".
  // DisconnectBlockchainConnector can be called on BlockchainConnector in the state
  // `CONNECTED`; BlockchainConnector in a different state (including
  // `DISCONNECTED`) returns an error.
  rpc DisconnectBlockchainConnector(DisconnectBlockchainConnectorRequest)
      returns (DisconnectBlockchainConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=blockchain-connectors/*}/disconnect"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // RenameBlockchainConnector method receives a RenameBlockchainConnectorRequest
  // message and returns a RenameBlockchainConnectorResponse message.
  rpc RenameBlockchainConnector(RenameBlockchainConnectorRequest)
      returns (RenameBlockchainConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=blockchain-connectors/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_blockchain_connector_id";
  }

  // ExecuteBlockchainConnector method receives a ExecuteBlockchainConnectorRequest 
  // message and returns a ExecuteBlockchainConnectorResponse message.
  rpc ExecuteBlockchainConnector(ExecuteBlockchainConnectorRequest)
      returns (ExecuteBlockchainConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=blockchain-connectors/*}/execute"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  };

  // WatchBlockchainConnector method receives a WatchBlockchainConnectorRequest message
  // and returns a WatchBlockchainConnectorResponse
  rpc WatchBlockchainConnector(WatchBlockchainConnectorRequest)
      returns (WatchBlockchainConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=blockchain-connectors/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // TestBlockchainConnector method receives a TestBlockchainConnectorRequest message
  // and returns a TestBlockchainConnectorResponse
  rpc TestBlockchainConnector(TestBlockchainConnectorRequest)
      returns (TestBlockchainConnectorResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=blockchain-connectors/*}/testConnection"
    };
    option (google.api.method_signature) = "name";
  }

}