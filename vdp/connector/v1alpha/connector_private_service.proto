syntax = "proto3";

package vdp.connector.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/connector/v1alpha/connector.proto";

// Connector service responds to internal access
service ConnectorPrivateService {

  // List all SOURCE connector resources in VDP (admin only)
  //
  // `ListSourceConnectorsAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  // 
  // This is a *private* method only available for admins and internal backend services to get a list of *source-connector* resources available in VDP. 
  // 
  // It takes in `ListSourceConnectorsAdminRequest` and returns `ListSourceConnectorsAdminResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 connector resources. The maximum number of connector resources this method can return is set to 100.
  rpc ListSourceConnectorsAdmin(ListSourceConnectorsAdminRequest)
      returns (ListSourceConnectorsAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/source-connectors"
    };
  }

  // Get a SOURCE connector resource in VDP with its ID(admin only)
  //
  // `GetSourceConnectorAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  //
  // This is a *private* method only available for admins, and internal backend services get a *source-connector* resource in VDP with its ID.
  //
  // It takes in `GetSourceConnectorAdminRequest` and returns `GetSourceConnectorAdminResponse`.
  //
  // **NOTE**: The parameter `sourceConnectorName` is extracted from the endpoint path. It must have the format of `source-connectors/{id}`. For example: `source-connectors/http`.
  rpc GetSourceConnectorAdmin(GetSourceConnectorAdminRequest)
      returns (GetSourceConnectorAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{name=source-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a SOURCE connector in VDP with its unique ID (admin only).
  //
  // `LookUpSourceConnectorAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  //
  // This is a *private* method only available for admins and internal backend services to get a *source-connector* resource in VDP with its unique ID. 
  //
  // It takes in `LookUpSourceConnectorAdminRequest` and returns `LookUpSourceConnectorAdminResponse`.
  //
  // **NOTE**: The parameter `sourceConnectorPermalink` is extracted from the endpoint path. It must have the format of `source-connectors/{uid}`.
  rpc LookUpSourceConnectorAdmin(LookUpSourceConnectorAdminRequest)
      returns (LookUpSourceConnectorAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{permalink=source-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Trigger a longrunning operation checking the state of a Source Connector with its ID (admin only).
  //
  // `CheckSourceConnector` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  //
  // This is a *private* method only available for admins and other internal backend services to trigger a longrunning operation checking the state of a *source-connector* resource in VDP with its ID. It returns a `workflow_id` with which internal services can check the results after the operation completes. The Results will be used to update the state records in the state server.
  //
  // It takes in `CheckSourceConnectorRequest` and returns `CheckSourceConnectorResponse`. 
  //
  // **NOTE**: 
  // - This method triggers a longrunning operation. The state of the source connector is only available when the operation completes.
  // - The parameter `sourceConnectorName` is extracted from the endpoint path. It must have the format of `source-connectors/{id}`. For example: `source-connectors/http`.
  rpc CheckSourceConnector(CheckSourceConnectorRequest) returns (CheckSourceConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{name=source-connectors/*}/check"
    };
    option (google.api.method_signature) = "name";
  };

  // *DestinationConnector methods

  // List all DESTINATION connector resources in VDP (admin only)
  //
  // `ListDestinationConnectorsAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  //
  // This is a *private* method only available for admins and other internal backend services to get a list of *destination-connector* resources available in VDP.
  //
  // It takes in `ListDestinationConnectorsAdminRequest` and returns `ListDestinationConnectorsAdminResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 connector resources. The maximum number of connector resources this method can return is set to 100.
  rpc ListDestinationConnectorsAdmin(ListDestinationConnectorsAdminRequest)
      returns (ListDestinationConnectorsAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/destination-connectors"
    };
  }

  // Get a DESTINATION connector resource in VDP with its ID (admin only)
  //
  // `GetDestinationConnectorsAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`.
  //
  // This is a *private* method only available for admins and internal backend services to get a *destination-connector* resource in VDP with its ID.
  //
  // It takes in `GetDestinationConnectorAdminRequest` and returns `GetDestinationConnectorAdminResponse`.
  //
  // **NOTE**: The parameter `destinationConnectorName` is extracted from the endpoint path. It must have the format of `destination-connectors/{id}`. For example: `destination-connectors/postgres-db`.
  rpc GetDestinationConnectorAdmin(GetDestinationConnectorAdminRequest)
      returns (GetDestinationConnectorAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{name=destination-connectors/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a DESTINATION connector resource in VDP with its unique ID (admin only).
  //
  // `LookUpDestinationConnectorAdmin` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  //
  // This is a *private* method only available for admins and internal backend services to get a *destination-connector* resource in VDP with its unique ID.
  // 
  // It takes in `LookUpDestinationConnectorAdminRequest` and returns `LookUpDestinationConnectorAdminResponse`.
  //
  // **NOTE**: The parameter `destinationConnectorPermalink` is extracted from the endpoint path. It must have the format of `destination-connectors/{uid}`.
  rpc LookUpDestinationConnectorAdmin(LookUpDestinationConnectorAdminRequest)
      returns (LookUpDestinationConnectorAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{permalink=destination-connectors/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Trigger a longrunning operation checking the state of a Destination Connector with its ID (admin only).
  //
  // `CheckDestinationConnector` is a call with the method(s) `GET` within the `ConnectorPrivateService`. 
  //
  // This is a *private* method only available for admins and other internal backend services to trigger a longrunning operation checking the state of a *destination-connector* resource in VDP with its ID. It returns a `workflow_id` with which internal services can check the results after the operation completes. The Results will be used to update the state records in the state server.
  //
  // It takes in `CheckDestinationConnectorRequest` and returns `CheckDestinationConnectorResponse`. 
  //
  // **NOTE**: 
  // - This method triggers a longrunning operation. The state of the destination connector is only available when the operation completes.
  // - The parameter `destinationConnectorName` is extracted from the endpoint path. It must have the format of `destination-connectors/{id}`. For example: `destination-connectors/postgres-db`.
  rpc CheckDestinationConnector(CheckDestinationConnectorRequest) returns (CheckDestinationConnectorResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{name=destination-connectors/*}/check"
    };
    option (google.api.method_signature) = "name";
  };
}
