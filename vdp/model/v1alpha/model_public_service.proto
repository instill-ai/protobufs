syntax = "proto3";

package vdp.model.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/model/v1alpha/healthcheck.proto";
import "vdp/model/v1alpha/model_definition.proto";
import "vdp/model/v1alpha/model.proto";

// Model service responds to external access
service ModelPublicService {
  option (google.api.default_host) = "api.instill.tech";

  // Check if the Model service is alive or dead.
  // 
  // `Liveness` is a call with the method(s) `GET within the `ModelPublicService` service.
  //
  // This method returns the liveness (alive or dead) of the Model service. 
  //
  //It takes in `LivenessRequest` and returns a `LivenessResponse`.
  //
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/model"} ]
    };
  }

  // Check if the Model service is ready to serve traffics
  //
  // `Readiness` is a call with the method(s) `GET` within the `ModelPublicService` service. 
  //
  // This method returns the Readiness (ready or not ready) of the Model service.
  //
  // It takes in `ReadinessRequest` and returns a `ReadinessResponse`.
  // 
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
      additional_bindings : [ {get : "/v1alpha/ready/model"} ]
    };
  }

  // List the definition of all supported model resources
  //
  // `ListModelDefinitions` is a call with the method(s) `GET` within the `ModelPublicService`. 
  //
  // This method returns *all* model definitions supported. 
  //
  //It takes in `ListModelDefinitionsRequest` and returns `ListModelDefinitionsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 model definitions. The maxumum number of model definitions this method can return is set to 100.
  rpc ListModelDefinitions(ListModelDefinitionsRequest)
      returns (ListModelDefinitionsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/model-definitions"
    };
  }

  // Get the difinition of a model resource with it's name.
  //
  // `GetModelDefinition` is a call with the method(s) `GET` within the `ModelPublicService`. 
  //
  // This method returns a model definition of a model resource. 
  //
  // It takes in `GetModelDefinitionRequest` and returns `GetModelDefinitionResponse`.
  //
  // **NOTE**: `model_definition.name` field in `GetModelDefinitionRequest` must has the format of `model-definitions/{model_name}`. For example, `model-definitions/yolov7`.
  rpc GetModelDefinition(GetModelDefinitionRequest)
      returns (GetModelDefinitionResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=model-definitions/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // List all model resources avaiable in VDP.
  //
  // `ListModels` is a call with the method(s) `GET` within the `ModelPublicService`.
  //
  // This method returns a list of all existing model resources in VDP. 
  //
  // It takes in `ListModelsRequest` and returns `ListModelsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 models. The maxumum number of models this method can return is set to 100.
  rpc ListModels(ListModelsRequest) returns (ListModelsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/models"
    };
  }

  // Create a new model resource in VDP.
  //
  // `CreateModel` is a call with the method(s) `POST` within the `ModelPublicService`.
  //
  // This method creates a new model resource. 
  //
  // It takes in `CreateModelRequest` and returns `CreateModelResponse`.
  //
  // → See [Core concept - Model](https://www.instill.tech/docs/core-concepts/model) for an introduction to Model in VDP.
  rpc CreateModel(CreateModelRequest) returns (CreateModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/models"
      body : "model"
    };
    option (google.api.method_signature) = "model";
  }

  // Create a new model resource in VDP with a multipart request.
  //
  // `CreateModelBinaryFileUpload` is a call with the method(s) `POST` within the `ModelPublicService` service. This method create a new model resource of which model contents are uploaded as multipart binaries. It takes in `CreateModelBinaryFileUploadRequest` message and returns a `CreateModelBinaryFileUploadResponse`.
  //
  // Endpoint: "POST /v1alpha/models:multipart"
  rpc CreateModelBinaryFileUpload(stream CreateModelBinaryFileUploadRequest)
      returns (CreateModelBinaryFileUploadResponse) {
    option (google.api.method_signature) = "id,model_definition,content";
  }

  // Get a model resource with it's name. 
  //
  // `GetModel` is a call with the method(s) `GET` within the `ModelPublicService`.
  //
  // This method returns a model resource with the quried name. 
  //
  // It takes in `GetModelRequest` and returns `GetModelResponse`.
  //
  // **NOTE**: The `model.name` field in `GetModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc GetModel(GetModelRequest) returns (GetModelResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=models/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Update an existing model resource.
  //
  // `UpdateModel` is a call with the method(s) `PATCH` within the `ModelPublicService`.
  //
  // This method updates an existing model resource. 
  //
  // It takes in `UpdateModelRequest` and returns `UpdateModelResponse`.
  //
  // **NOTE**: The `model.name` field in `UpdateModelRequest` is used to identify the model resource to update. Format: `models/{model_name}`.
  rpc UpdateModel(UpdateModelRequest) returns (UpdateModelResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{model.name=models/*}"
      body : "model"
    };
    option (google.api.method_signature) = "model,update_mask";
  }

  // Delete a model reource in VDP with it's name.
  //
  // `DeleteModel` is a call with the method(s) `DELETE` within the `ModelPublicService`. 
  //
  // This method delete a model resource with the quried name. 
  //
  // It takes in `DeleteModelRequest` and returns `DeleteModelResponse`.
  //
  // **NOTE**: The `model.name` field in `DeleteModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc DeleteModel(DeleteModelRequest) returns (DeleteModelResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=models/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a model resource with it's permalink.
  //
  // `LookUpModel` is a call with the method(s) `GET` within the `ModelPublicService`.
  //
  // This method gets a model resource with a permalink (i.e., `model.uid`). 
  //
  // It takes in `LookUpModelRequest` and returns `LookUpModelResponse`.
  //
  // **NOTE**: `model.uid` (permalink) in `LookUpModelRequest` must have the format of `models/{uid}`, where `{uid}` denotes the unique ID of the model.
  rpc LookUpModel(LookUpModelRequest) returns (LookUpModelResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=models/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Rename a model resource in VDP
  //
  // `RenameModel` is a call with the method(s) `POST` within the `ModelPublicService` service.
  //
  // This method changes the name of a model resource and returns the updated model resource. 
  //
  //It takes in `RenameModelRequest` and returns `RenameModelResponse`.
  //
  // **NOTE**: `model.name` field in `RenameModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc RenameModel(RenameModelRequest) returns (RenameModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_model_id";
  }

  // Chanage the visibility of a model resource to *PUBLIC*.
  //
  // `PublishModel` is a call with the method(s) `POST` within the `ModelPublicService` service.
  //
  // This method changes the visibility of a model resource to *PUBLIC* allowing other users to access the model resource. It also returns the updated model resource. 
  //
  // It takes in `PublishModelRequest` and returns `PublishModelResponse`.
  //
  // **NOTE**: `model.name` field in `PublishModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc PublishModel(PublishModelRequest) returns (PublishModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/publish"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Change the visibility of a model resource to *PRIVATE*
  //
  // `UnpublishModel` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method changes the visibility of a model resource to *PRIVATE*, making it only visible to the authorsied user. It also returns the updated model resource. 
  //
  // It takes in `UnpublishModelRequest` and returns `UnpublishModelResponse`.
  //
  // **NOTE**: `model.name` field in `UnpublishModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc UnpublishModel(UnpublishModelRequest) returns (UnpublishModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/unpublish"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Deploy a model to ONLINE state.
  //
  // `DeployModel` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method deployes a model to ONLINE state and return a longrunning operation.
  //
  // It takes in `DeployModelRequest` and returns `DeployModelResponse`.
  //
  // **NOTE**: `model.name` field in `DeployModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  //
  // See [Core-Concepts - Model](https://www.instill.tech/docs/core-concepts/model) for further details.
  rpc DeployModel(DeployModelRequest)
      returns (DeployModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/deploy"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Undeploy a model to OFFLINE state.
  //
  // `UndeployModel` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method undeployes a model to UndeployModel state and return a longrunning operation.
  //
  // It takes in `UndeployModelRequest` and returns `UndeployModelResponse`.
  //
  // **NOTE**: `model.name` field in `UndeployModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  //
  // See [Core-Concepts - Model](https://www.instill.tech/docs/core-concepts/model) for further details.
  rpc UndeployModel(UndeployModelRequest)
      returns (UndeployModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/undeploy"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a model card (readme).
  //
  // `GetModelCard` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method get a model card (readme) of a existing model.
  //
  // It takes in `GetModelCardRequest` and returns `GetModelCardResponse`.
  //
  // **NOTE**: `model.name` field in `GetModelCardRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc GetModelCard(GetModelCardRequest)
      returns (GetModelCardResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=models/*}/readme"
    };
    option (google.api.method_signature) = "name";
  }

  // Query a model's current state and it's longrunning progress.
  //
  // `WatchModel` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method queries a model's current state and it's longrunning progress.
  //
  // It takes in `WatchModelRequest` and return `WatchModelResponse`.
  //
  // **NOTE**: `model.name` field in `WatchModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc WatchModel(WatchModelRequest)
      returns (WatchModelResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=models/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }

  // Trigger a deployed model.
  //
  // `TriggerModel` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method triggers a deployed model with task inputs.
  //
  // It takes in `TriggerModelRequest` and return `TriggerModelResponse`.
  //
  // **NOTE**: `model.name` field in `TriggerModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc TriggerModel(TriggerModelRequest)
      returns (TriggerModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/trigger"
      body : "*"
    };
    option (google.api.method_signature) = "name,inputs";
  }

  // Trigger a deployed model with multipart.
  //
  // `TriggerModelBinaryFileUpload` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method triggers a deployed model with a task input stream.
  //
  // It takes in `TriggerModelBinaryFileUploadRequest` and return `TriggerModelBinaryFileUploadResponse`.
  //
  // **NOTE**: `model.name` field in `TriggerModelBinaryFileUploadRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  //
  // Endpoint: "POST/v1alpha/{name=models/*}/trigger-multipart"
  rpc TriggerModelBinaryFileUpload(
      stream TriggerModelBinaryFileUploadRequest)
      returns (TriggerModelBinaryFileUploadResponse) {
    option (google.api.method_signature) = "name,file";
  }

  // Test a deployed model.
  //
  // `TestModel` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method tests a deployed model with task inputs.
  //
  // It takes in `TestModelRequest` and return `TestModelResponse`.
  //
  // **NOTE**: `model.name` field in `TestModelRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  rpc TestModel(TestModelRequest)
      returns (TestModelResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=models/*}/test"
      body : "*"
    };
    option (google.api.method_signature) = "name,inputs";
  }

  // Test a deployed model with multipart.
  //
  // `TestModelBinaryFileUpload` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method tests a deployed model with a task input stream.
  //
  // It takes in `TestModelBinaryFileUploadRequest` and return `TestModelBinaryFileUploadResponse`.
  //
  // **NOTE**: `model.name` field in `TestModelBinaryFileUploadRequest` must have the format of `models/{model_name}`. For example, `models/yolov7`.
  //
  // Endpoint: "POST/v1alpha/{name=models/*}/test-multipart"
  rpc TestModelBinaryFileUpload(
      stream TestModelBinaryFileUploadRequest)
      returns (TestModelBinaryFileUploadResponse) {
    option (google.api.method_signature) = "name,file";
  }

  // Get a longrunning operation with it's name.
  //
  // `GetModelOperation` is a call with the method(s) `GET` within the `ModelPublicService` service. 
  //
  // This method returns a longrunning operation with it's name (i.e., `operations/{unique_id}`). 
  //
  // It takes in `GetModelOperationRequest` and returns `GetModelOperationResponse`.
  //
  // **NOTE**: `operation.uid` field in `GetModelOperationRequest` must have the format of `operations/{unique_id}`, where `{unique_id}` denotes the unique ID of the longrunning operation. See [Google RPC reference](https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.longrunning#google.longrunning.Operations) for further details.
  rpc GetModelOperation(GetModelOperationRequest)
      returns (GetModelOperationResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=operations/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // List all longrunning operations.
  //
  // `ListModelOperations` is a call with the method(s) `GET` within the `ModelPublicService` service. 
  //
  // This method returns a list of longrunning operations. 
  //
  // It takes in `ListModelOperationsRequest` and returns `ListModelOperationsResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 models. The maxumum number of models this method can return is set to 100.
  rpc ListModelOperations(ListModelOperationsRequest) returns (ListModelOperationsResponse) {
    option (google.api.http) = {
      get : "/v1alpha/operations"
    };
  }

  // Cancel a longrunning operation with it's name.
  //
  // `CancelModelOperation` is a call with the method(s) `POST` within the `ModelPublicService` service. 
  //
  // This method cancels a longrunning operation with it's name (i.e., `operations/{unique_id}`). 
  //
  // It takes in `CancelModelOperationRequest` and returns `CancelModelOperationResponse`.
  //
  // **NOTE**: `operation.uid` field in `CancelModelOperationRequest` must have the format of `operations/{unique_id}`, where `{unique_id}` denotes the unique ID of the longrunning operation. See [Google RPC reference](https://cloud.google.com/service-infrastructure/docs/service-management/reference/rpc/google.longrunning#google.longrunning.Operations) for further details.
  rpc CancelModelOperation(CancelModelOperationRequest)
      returns (CancelModelOperationResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=operations/*}/cancel"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }
}
