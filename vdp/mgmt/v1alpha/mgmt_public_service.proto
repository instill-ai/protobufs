syntax = "proto3";

package vdp.mgmt.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/mgmt/v1alpha/healthcheck.proto";
import "vdp/mgmt/v1alpha/mgmt.proto";

// Mgmt service responds to external incoming requests.
service MgmtPublicService {
  option (google.api.default_host) = "api.instill.tech";

  // Liveness method receives a LivenessRequest message and returns a
  // LivenessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/mgmt"} ]
    };
  }

  // Readiness method receives a ReadinessRequest message and returns a
  // ReadinessResponse message.
  // See https://github.com/grpc/grpc/blob/master/doc/health-checking.md
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
      additional_bindings : [ {get : "/v1alpha/ready/mgmt"} ]
    };
  }

  // ========== Public API: endpoints exposed to public internet traffic

  // QueryAuthenticatedUser method receives a QueryAuthenticatedUserRequest message and returns
  // a QueryAuthenticatedUserResponse message.
  rpc QueryAuthenticatedUser(QueryAuthenticatedUserRequest) returns (QueryAuthenticatedUserResponse) {
    option (google.api.http) = {
      get : "/v1alpha/users/me"
    };
  }

  // PatchAuthenticatedUser method receives a PatchAuthenticatedUserRequest message and returns 
  // a PatchAuthenticatedUserResponse message.
  rpc PatchAuthenticatedUser(PatchAuthenticatedUserRequest) returns (PatchAuthenticatedUserResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/users/me"
      body : "user"
    };
    option (google.api.method_signature) = "user,update_mask";
  }

  // ExistUsername method receives a ExistUsernameRequest message and returns a
  // ExistUsernameResponse
  rpc ExistUsername(ExistUsernameRequest) returns (ExistUsernameResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=users/*}/exist"
    };
    option (google.api.method_signature) = "name";
  }
}