syntax = "proto3";

package vdp.mgmt.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/mgmt/v1alpha/healthcheck.proto";
import "vdp/mgmt/v1alpha/mgmt.proto";

// Mgmt service responds to external access
service MgmtPublicService {
  option (google.api.default_host) = "api.instill.tech";

  // Check if the Mgmt service is alive or dead.
  // 
  // `Liveness` is a call with the method(s) `GET` within the `MgmtPublicService` service. 
  //
  // This method returns the liveness (alive or dead) of the Mgmt service.
  //
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  //
  // It takes in `LivenessRequest` and returns a `LivenessResponse`.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/mgmt"} ]
    };
  }

  // Check if the Mgmt service is ready to serve traffics
  //
  // `Readiness` is a call with the method(s) `GET` within the `MgmtPublicService` service. 
  //
  // This method returns the Readiness (ready or not ready) of the Mgmt service.
  // 
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  //
  // It takes in `ReadinessRequest` and returns a `ReadinessResponse`.
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
      additional_bindings : [ {get : "/v1alpha/ready/mgmt"} ]
    };
  }

  // Get user's own user information
  //
  // `QueryAuthenticatedUser` is a call with the method(s) `GET` within the `MgmtPublicService`. 
  //
  // This method is for an authenticated user to query its *own* user information. 
  //
  // It takes in `QueryAuthenticatedUserRequest` and returns a `QueryAuthenticatedUserResponse`.
  rpc QueryAuthenticatedUser(QueryAuthenticatedUserRequest)
      returns (QueryAuthenticatedUserResponse) {
    option (google.api.http) = {
      get : "/v1alpha/users/me"
    };
  }

  // Update user information
  //
  // `PatchAuthenticatedUser` is a call with the method(s) `PATCH` within the `MgmtPublicService`. 
  //
  // This method allows authenticated users to update their user information.
  //
  // It takes in `PatchAuthenticatedUserRequest` and returns a `PatchAuthenticatedUserResponse`.
  rpc PatchAuthenticatedUser(PatchAuthenticatedUserRequest)
      returns (PatchAuthenticatedUserResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/users/me"
      body : "user"
    };
    option (google.api.method_signature) = "user,update_mask";
  }

  // Check if a user exists with its name.
  //
  // `ExistUsername` is a call with the method(s) `GET` within the `MgmtPublicService`.
  //
  // This method returns a boolean value indicating the existence of a user with its name. 
  //
  // It takes in `ExistUsernameRequest` and returns `ExistUsernameResponse`.
  //
  // **NOTE**: The parameter `userName` is extracted from the endpoint path. It must have the format of `users/{name}`. For example: `users/harry-potter`.
  rpc ExistUsername(ExistUsernameRequest) returns (ExistUsernameResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=users/*}/exist"
    };
    option (google.api.method_signature) = "name";
  }

  // Create a new API token
  //
  // `CreateToken` is a call with the method(s) `POST` within the `MgmtPublicService`.
  //
  // This method creates an API token for users securely access VDP resources and services.
  //
  // It takes in `CreateTokenRequest` and returns `CreateTokenResponse`.
  rpc CreateToken(CreateTokenRequest) returns (CreateTokenResponse) {
    option (google.api.http) = {
      post : "/v1alpha/tokens"
      body : "token"
    };
    option (google.api.method_signature) = "token";
  }

  // List all available tokens
  //
  // `ListTokens` is a call with the method(s) `GET` within the `MgmtPublicService`.
  //
  // This method returns a list of all the available API tokens.
  //
  // It takes in `ListTokensRequest` and returns `ListTokensResponse`.
  rpc ListTokens(ListTokensRequest) returns (ListTokensResponse) {
    option (google.api.http) = {
      get : "/v1alpha/tokens"
    };
  }

  // Get an API token with its ID.
  //
  // `GetToken` is a call with the method(s) `GET` within the `MgmtPublicService`.
  //
  // This method returns an API token with the ID specified. 
  //
  // It takes in `GetTokenRequest` and returns `GetTokenResponse`.
  //
  // **NOTE**: The parameter `tokenName` is extracted from the endpoint path. It must have the format of `tokens/{id}`. For example: `tokens/token-1`.
  rpc GetToken(GetTokenRequest) returns (GetTokenResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=tokens/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Delete an API token with its ID.
  //
  // `DeleteToken` is a call with the method(s) `GET` within the `MgmtPublicService`.
  //
  // This method deletes an API token with the ID specified. 
  //
  // It takes in `DeleteTokenRequest` and returns `DeleteTokenResponse`.
  //
  // **NOTE**: The parameter `tokenName` is extracted from the endpoint path. It must have the format of `tokens/{id}`. For example: `tokens/token-1`.
  rpc DeleteToken(DeleteTokenRequest) returns (DeleteTokenResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=tokens/*}"
    };
    option (google.api.method_signature) = "name";
  }
}
