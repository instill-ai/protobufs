syntax = "proto3";

package vdp.mgmt.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/mgmt/v1alpha/mgmt.proto";

// Mgmt service responds to internal access
service MgmtPrivateService {

  // List all users created in VDP (admin only).
  //
  // `ListUsersAdmin` is a call with the method(s) `GET` within the `MgmtPrivateService` service. This is a *private* method that is only avaible for admins and backend sercices to list *all* users created in VDP. Only admins with root permission can call this method. It takes in `ListUsersAdminRequest` and returns a `ListUsersAdminResponse`.
  //
  // **NOTE**: if unspecified, this method returns at most 10 pipelines. The maxumum number of pipelines this method can return is set to 100.
  rpc ListUsersAdmin(ListUsersAdminRequest) returns (ListUsersAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/users"
    };
  }

  // Create a new user (admin only).
  //
  // `CreateUserAdmin` is a call with the method(s) `POST` within the `MgmtPrivateService`. This is a *private* method that is only avaible for admins and backend sercices to create a new user in VDP. Only admins with root permission can call this method. It takes in `CreateUserAdminRequest` and returns a `CreateUserAdminResponse`.
  //
  // **NOTE**: The `user.name` field in `CreateUserAdminRequest` must has the format of `users/{username}`. For example: `users/local-user`.
  rpc CreateUserAdmin(CreateUserAdminRequest)
      returns (CreateUserAdminResponse) {
    option (google.api.http) = {
      post : "/v1alpha/admin/users"
      body : "user"
    };
    option (google.api.method_signature) = "user";
  }

  // Get a existing user with user's name (admin only).
  // 
  // `GetUserAdmin` is a call with the method(s) `GET` within the `MgmtPrivateService`. This is a *private* method that is only avaible for admins and backend sercices to get a new user created in VDP with user's name. Only admins with permission can call this method. It takes in `GetUserAdminRequest` and returns `GetUserAdminResponse`.
  //
  // **NOTE**: The `user.name` field in `GetUserAdminRequest` must has the format of `users/{username}`. For example: `users/local-user`.
  rpc GetUserAdmin(GetUserAdminRequest) returns (GetUserAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{name=users/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Update an existing user (admin only)
  // 
  // `UpdateUserAdmin` is a call with the method(s) `POST` within the `MgmtPrivateService`. This is a *private* method that is only avaible for admins and backend sercices to udpate existing users in VDP. Only admins with permission can call this method. It takes in `UpdateUserAdminRequest` and returns `UpdateUserAdminResponse`.
  //
  // **NOTE**: The `user.name` field in `UpdateUserAdminRequest` is used to identify the user to update. Format: `users/{username}`.  
  rpc UpdateUserAdmin(UpdateUserAdminRequest)
      returns (UpdateUserAdminResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/admin/{user.name=users/*}"
      body : "user"
    };
    option (google.api.method_signature) = "user,update_mask";
  }

  // Delete an existing user (admin only)
  //
  // `DeleteUserAdmin` is a call with the method(s) `DELETE` within the `MgmtPrivateService`. This is a *private* method that is only avaible for admins and backend sercices to delete existing users in VDP. Only admins with permission can call this method. It takes in `DeleteUserAdminRequest` and returns `DeleteUserAdminResponse`.
  //
  // **NOTE**: The `user.name` field in `DeleteUserAdminRequest` is used to identify the user to update. Format: `users/{username}`.  
  rpc DeleteUserAdmin(DeleteUserAdminRequest)
      returns (DeleteUserAdminResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/admin/{name=users/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get a existing user with a permalink consisting of unique ID (admin only).
  //
  // `LookUpUserAdmin` is a call with the method(s) `GET` within the `MgmtPrivateService`. This is a *private* method that is only avaible for admins and backend sercices to get existing users in VDP with user's unique ID (i.e., `user.uid`). Only admins with permission can call this method. It takes in `LookUpUserAdminRequest` and returns `LookUpUserAdminResponse`.
  //
  // **NOTE**: permalink in `GetUesrAdminRequest` must has the format of `users/{uid}`, where `{uid}` denotes the unique ID of the user.
  rpc LookUpUserAdmin(LookUpUserAdminRequest)
      returns (LookUpUserAdminResponse) {
    option (google.api.http) = {
      get : "/v1alpha/admin/{permalink=users/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // ValidateToken method receives a ValidateTokenRequest message and
  // returns a ValidateTokenResponse
  rpc ValidateToken(ValidateTokenRequest)
      returns (ValidateTokenResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=tokens/*}/validate"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }
}
