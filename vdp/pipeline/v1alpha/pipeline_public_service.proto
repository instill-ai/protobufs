syntax = "proto3";

package vdp.pipeline.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/pipeline/v1alpha/healthcheck.proto";
import "vdp/pipeline/v1alpha/pipeline.proto";

// Pipeline service responds to external access
service PipelinePublicService {
  option (google.api.default_host) = "api.instill.tech";

  // Check if the pipeline service is alive or dead.
  // 
  // `Liveness` is a call with the method(s) `GET within the `PipelinePublicService` service. This method returns the liveness (alive or dead) of the pipeilne service. It takes in `LivenessRequest` and returns a `LivenessResponse`.
  //
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  rpc Liveness(LivenessRequest) returns (LivenessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/pipeline"} ]
    };
  }

  // Check if the pipeline service is ready to serve traffics
  //
  // `Readiness` is a call with the method(s) `GET` within the `PipelinePublicService` service. This method returns the Readiness (ready or not ready) of the pipeilne service. It takes in `ReadinessRequest` and returns a `ReadinessResponse`.
  // 
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse) {
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
    };
  }

  // Create a new pipeline
  // 
  // `CreatePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. This method creates a new pipelines (given a recipie consisting of *source*, *model instance* and *destination*) on VDP. It takes in `CreatePipelineRequest` and returns `CreatePipelineResponse`.
  //
  // → See [Core concept](https://www.instill.tech/docs/core-concepts/overview) for an introduction to Pipeline in VDP.
  rpc CreatePipeline(CreatePipelineRequest) returns (CreatePipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/pipelines"
      body : "pipeline"
    };
    option (google.api.method_signature) = "pipeline";
  }

  // List all pipelines deployed on VDP
  //
  // `ListPipelines` is a call with the method(s) `GET` within the `PipelinePublicService` service. This method returns a list consisiting of all pipelines deployed on VDP. It takes in `ListPipelinesRequest` and returns `ListPipelinesResponse`.
  //
  // NOTE: if unspecified, this method returns at most 10 pipelines. The maxumum number of pipelines this method can return is set to 100. 
  rpc ListPipelines(ListPipelinesRequest) returns (ListPipelinesResponse) {
    option (google.api.http) = {
      get : "/v1alpha/pipelines"
    };
  }

  // Get the detail of a pipeline deployed on VDP given its name.
  //
  // `GetPipeline` is a call with the method(s) `GET` within the `PipelinePublicService` service. This method return a pipeline deployed on VDP given a pipeline name. It takes in `GetPipelineRequest` and returns `GetPipelineResponse`.
  //
  // NOTE: pipeline name must have the format of "pipelines/*".
  rpc GetPipeline(GetPipelineRequest) returns (GetPipelineResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=pipelines/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Update a pipeline deployed on VDP 
  //
  // `UpdatePipeline` is a call with the method(s) `PATCH` within the `PipelinePublicService` service. This methods update an existing pipeline deployed on VDP. It takes in `UpdatePipelineRequest` and returns `UpdatePipelineResponse`.
  rpc UpdatePipeline(UpdatePipelineRequest) returns (UpdatePipelineResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{pipeline.name=pipelines/*}"
      body : "pipeline"
    };
    option (google.api.method_signature) = "pipeline,update_mask";
  }

  // Delete a pipeline deployed on VDP
  //
  // `DeletePipeline`is a call with the method(s) `DELETE` within the `PipelinePublicService` service. This method deletes a pipeline deployed on VDP given a pipeline name. It takes in `DeletePipelineRequest` and returns `DeletePipelineResponse`.
  rpc DeletePipeline(DeletePipelineRequest) returns (DeletePipelineResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=pipelines/*}"
    };
    option (google.api.method_signature) = "name";
  }

  // Get the detail of a pipeline deployed on VDP given its permalink.
  //
  // `LookUpPipeline` is a call with the method(s) `GET` within the `PipelinePublicService` service. This method return a pipeline deployed on VDP given a pipeline permalink. It takes in `LookUpPipelineRequest` and returns `LookUpPipelineResponse`.
  //
  // NOTE: permalink must have to format of "pipelines/{uid}".
  rpc LookUpPipeline(LookUpPipelineRequest) returns (LookUpPipelineResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{permalink=pipelines/*}/lookUp"
    };
    option (google.api.method_signature) = "permalink";
  }

  // Activate a pipeline deployaed on VDP.
  // 
  // `ActivatePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. This method activates a pipeline deployed on VDP. The "state" of the pipeline after activating is "ACTIVE". It takes in `ActivatePipelineRequest` and returns `ActivatePipelineResponse`.
  //
  // NOTE: `ActivatePipeline` can be called on Pipelines in the state "INACTIVE"; Pipelines in a different state (including "ACTIVE") returns an error.
  rpc ActivatePipeline(ActivatePipelineRequest)
      returns (ActivatePipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=pipelines/*}/activate"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Deactivate a pipeline deployed on VDP.
  //
  // `DeactivatePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. This method deactivates a pipeline deployed on VDP. The "state" of the pipeline after inactivating is "INACTIVE". It takes in `DeactivatePipelineRequest` and returns `DeactivatePipelineResponse`.
  //
  // NOTE: `DeactivatePipeline` can be called on Pipelines in the state "ACTIVE"; Pipelines in a different state (including "INACTIVE") returns an error.
  rpc DeactivatePipeline(DeactivatePipelineRequest)
      returns (DeactivatePipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=pipelines/*}/deactivate"
      body : "*"
    };
    option (google.api.method_signature) = "name";
  }

  // Rename a pipeline deployed on VDP.
  //
  // `RenamePipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. This method changes the pipeline name and returns it's latest detals. It takes in `RenamePipelineRequest` and returns `RenamePipelineResponse`.
  rpc RenamePipeline(RenamePipelineRequest) returns (RenamePipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=pipelines/*}/rename"
      body : "*"
    };
    option (google.api.method_signature) = "name,new_pipeline_id";
  }

  // Trigger a pipeline deployed on VDP
  //
  // `TriggerPipeline` is a call with the method(s) `POST` within the `PipelinePublicService` service. This methods tiggers a pipeline and returns 1) UUID for each input and 2) model instance inference outputs. It takes in `TriggerPipelineRequest` and returns a `TriggerPipelineResponse`.
  //
  // NOTE: pipeline name must have the format of "pipelines/*".
  // → See [Core concept](https://www.instill.tech/docs/core-concepts/overview) for an introduction to Pipeline in VDP and [our tutorial](https://www.instill.tech/tutorials/vdp-101-4-how-to-trigger-a-sync-pipeline) for further details about triggering a pipeline.
  rpc TriggerPipeline(TriggerPipelineRequest)
      returns (TriggerPipelineResponse) {
    option (google.api.http) = {
      post : "/v1alpha/{name=pipelines/*}/trigger"
      body : "*"
    };
    option (google.api.method_signature) = "name,inputs";
  }

  // Trigger a pipeline with a multipart request
  // 
  // `TriggerPipelineBinaryFileUpload` is a call with the method(s) `POST` within the `PipelinePublicService` service. This method tiggers a pipeline and returns 1) UUID for each input and 2) model instance inference outputs. It takes in `TriggerPipelineBinaryFileUploadRequest` message and returns a `TriggerPipelineBinaryFileUploadResponse`.
  //
  // NOTE: pipeline name must have the format of "pipelines/*".
  // Endpoint: "POST /v1alpha/{name=pipelines/*}/trigger-multipart"
  // → See [Core concept](https://www.instill.tech/docs/core-concepts/overview) for an introduction to Pipeline in VDP and [our tutorial](https://www.instill.tech/tutorials/vdp-101-4-how-to-trigger-a-sync-pipeline) for further details about triggering a pipeline.
  rpc TriggerPipelineBinaryFileUpload(
      stream TriggerPipelineBinaryFileUploadRequest)
      returns (TriggerPipelineBinaryFileUploadResponse) {
    option (google.api.method_signature) = "name,file";
  }

  // WatchPipeline method receives a WatchPipelineRequest message
  // and returns a WatchPipelineResponse
  rpc WatchPipeline(WatchPipelineRequest)
      returns (WatchPipelineResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=pipelines/*}/watch"
    };
    option (google.api.method_signature) = "name";
  }
}
