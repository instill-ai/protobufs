syntax = "proto3";

package vdp.controller.v1alpha;

// Google API
import "google/api/annotations.proto";
import "google/api/client.proto";

import "vdp/controller/v1alpha/controller.proto";
import "vdp/controller/v1alpha/healthcheck.proto";

// Controller service responds to incoming controller requests
service ControllerPrivateService {
  
  // Check if the Controller service (private) is alive or dead.
  // 
  // `Liveness` is a call with the method(s) `GET within the `ControllerPrivateService` service.
  //
  // This is a *private* method only available for admins and internal backend services to check the Controller service's Liveness (alive or dead). 
  //
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  //
  // It takes in `LivenessRequest` and returns a `LivenessResponse`.
  //
  // **NOTE**: Controller Service is a private service not available to the public. This method is therefore implemented as a private method instead of a public. 
  rpc Liveness(LivenessRequest) returns (LivenessResponse){
    option (google.api.http) = {
      get : "/v1alpha/__liveness"
      additional_bindings : [ {get : "/v1alpha/health/controller"} ]
    };
  };

  // Check if the Controller service (private) is alive or dead.
  // 
  // `Readiness` is a call with the method(s) `GET within the `ControllerPrivateService` service.
  //
  // This is a *private* method only available for admins and internal backend services to check the Controller service's readiness (ready or not ready).
  //
  // → See [Kubernetes best practices](https://cloud.google.com/blog/products/containers-kubernetes/kubernetes-best-practices-setting-up-health-checks-with-readiness-and-liveness-probes) and [GRPC Health Checking](https://github.com/grpc/grpc/blob/master/doc/health-checking.md) for further details.
  //
  // It takes in `ReadinessRequest` and returns a `ReadinessResponse`.
  //
  // **NOTE**: Controller Service is a private service not available to the public. This method is therefore implemented as a private method instead of a public. 
  rpc Readiness(ReadinessRequest) returns (ReadinessResponse){
    option (google.api.http) = {
      get : "/v1alpha/__readiness"
      additional_bindings : [ {get : "/v1alpha/ready/controller"} ]
    };
  };

  // Get the resource state with its ID and type.
  //
  // `GetResource` is a call with the method(s) `GET` within the `ControllerPrivateService` service.
  //
  // This is a *private* method only available for admin and internal backend services to get the current state of the queried resource. 
  //
  // It takes in `GetResourceRequest` and returns a `GetResourceResponse`.
  //
  // **NOTE**: The parameter `resourceName` is extracted from the endpoint path. It must have the `resources/{id}/types/{type}` format. For example: `resources/pipeline-1/types/pipeline`.
  rpc GetResource(GetResourceRequest) returns (GetResourceResponse) {
    option (google.api.http) = {
      get : "/v1alpha/{name=resources/*/types/*}"
    };
    option (google.api.method_signature) = "name";
  };

  //  Update resource state with its ID and type.
  //
  // `UpdateResource` is a call with the method(s) `PATCH` within the `ControllerPrivateService` service.
  //
  // This is a *private* method only available for admin and internal backend services to update the current state of the queried resource. 
  //
  // It takes in `UpdateResourceRequest` and returns a `UpdateResourceResponse`.
  //
  // **NOTE**: The parameter `resourceName` is extracted from the endpoint path. It must have the `resources/{id}/types/{type}` format. For example: `resources/pipeline-1/types/pipeline`.
  rpc UpdateResource(UpdateResourceRequest) returns (UpdateResourceResponse) {
    option (google.api.http) = {
      patch : "/v1alpha/{resource.name=resources/*/types/*}"
      body : "resource"
    };
  };

  // Delete a resource with its ID and type.
  //
  // `DeleteResource` is a call with the method(s) `DELETE` within the `ControllerPrivateService` service.
  //
  // This is a *private* method only available for admin and internal backend services to delete a registered resource. 
  //
  // It takes in `DeleteResourceRequest` and returns a `DeleteResourceResponse`.
  //
  // **NOTE**: The parameter `resourceName` is extracted from the endpoint path. It must have the `resources/{id}/types/{type}` format. For example: `resources/pipeline-1/types/pipeline`.  
  rpc DeleteResource(DeleteResourceRequest) returns (DeleteResourceResponse) {
    option (google.api.http) = {
      delete : "/v1alpha/{name=resources/*/types/*}"
    };
    option (google.api.method_signature) = "name";
  };
}
