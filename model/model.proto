syntax = "proto3";
package instill.model;

option go_package = "github.com/instill-ai/protobufs/model";

// Protobuf standard
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
// Google api
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

service Model {
  rpc Liveness(google.protobuf.Empty) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/__liveness"
      additional_bindings: {
          get: "/health/model"
      }
    };
  }

  rpc Readiness(google.protobuf.Empty) returns (HealthCheckResponse){
    option (google.api.http) = {
      get: "/__readiness"
    };
  }

  rpc CreateModelByUpload (stream CreateModelRequest) returns (ModelInfo) {}

  rpc CreateModel (CreateModelRequest) returns (ModelInfo) {
    option (google.api.http) = {
      post: "/models"
      body: "*"
    };
  }

  rpc UpdateModel (UpdateModelRequest) returns (ModelInfo) {
    option (google.api.http) = {
      patch: "/models/{name}/versions/{version}"
      body: "model"
    };
  }

  // This method handle upload file request
  rpc PredictModelByUpload (stream PredictModelRequest) returns (google.protobuf.Struct) {}

  // This method handle request with file in body such as url/base64 encode
  rpc PredictModel (PredictModelImageRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/models/{name}/versions/{version}/outputs"
      body: "*"
    };
  }

  rpc ListModels (ListModelRequest) returns (ListModelResponse) {
    option (google.api.http) = {
      get: "/models"
    };
  }

  rpc GetModel (GetModelRequest) returns (ModelInfo) {
    option (google.api.http) = {
      get: "/models/{name}"
    };
  }

  rpc DeleteModel (DeleteModelRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/models/{name}"
    };
  }

  rpc DeleteModelVersion (DeleteModelVersionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/models/{name}/versions/{version}"
    };
  }
}

enum ModelStatus {
    OFFLINE            = 0;
    ONLINE             = 1;
    ERROR              = 2;
}

message DeleteModelRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message DeleteModelVersionRequest {
  string name   = 1 [(google.api.field_behavior) = REQUIRED];
  int32 version = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateModelRequest {
  string name                           = 1 [(google.api.field_behavior) = REQUIRED];
  int32 version                         = 2 [(google.api.field_behavior) = REQUIRED];
  UpdateModelInfo model                 = 3 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.FieldMask update_mask = 4 [(google.api.field_behavior) = REQUIRED];
}

message UpdateModelInfo {
  ModelStatus status             = 1;
  string description             = 2;
}

message GetModelRequest {
    string name    = 1 [(google.api.field_behavior) = REQUIRED];
}

message PredictModelRequest {
    // model name
    string name      = 1 [(google.api.field_behavior) = REQUIRED];
    // model version
    int32 version    = 2 [(google.api.field_behavior) = REQUIRED];
    // byte array of image content
    bytes content    = 3 [(google.api.field_behavior) = REQUIRED];
}

message ImageRequest {
    // image url
    string url       = 1;
    // base 64 byte array of image content
    string base64    = 2;
}

message PredictModelImageRequest {
    // model name
    string name                    = 1 [(google.api.field_behavior) = REQUIRED];
    // model version
    int32 version                  = 2 [(google.api.field_behavior) = REQUIRED];
    // image content request
    repeated ImageRequest contents = 3 [(google.api.field_behavior) = REQUIRED];
}

message ListModelRequest {}

message ListModelResponse {
    repeated ModelInfo models = 1;
}

enum CVTask {
  UNDEFINED      = 0;
  CLASSIFICATION = 1;
  DETECTION      = 2;
}

message CreateModelRequest {
  string name        = 1 [(google.api.field_behavior) = REQUIRED];
  bytes content      = 2 [(google.api.field_behavior) = REQUIRED];
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  // CV task type such as object detection, classification
  CVTask cv_task     = 4 [(google.api.field_behavior) = OPTIONAL];
}

message ModelVersion {
  int32 version                        = 1;
  int32 model_id                       = 2;
  string description                   = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  ModelStatus status                   = 6;
}

message ModelInfo {
  int32 id                       = 1;
  string name                    = 2;
  string full_Name               = 3 [(google.api.field_behavior) = OUTPUT_ONLY];
  CVTask cv_task                 = 4;
  repeated ModelVersion versions = 5;
}

message ClassificationOutput {
    string category = 1;
    float score     = 2;
}

message ClassificationOutputs {
    repeated ClassificationOutput contents = 1;
}

message Box {
    float top     = 1;
    float left    = 2;
    float width   = 3;
    float height  = 4;
}

message BoundingBoxPrediction {
    string category = 1;
    float score     = 2;
    Box box         = 3;
}

message DetectionOutput {
    repeated BoundingBoxPrediction contents = 1;
}

message DetectionOutputs {
    repeated DetectionOutput contents = 1;
}

message HealthCheckResponse {
    int32 status = 1;
}
