syntax = "proto3";
package instill.model;

option go_package = "github.com/instill-ai/protobufs/model";

// Protobuf standard
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
// Google api
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

service Model {
  rpc Liveness(google.protobuf.Empty) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/__liveness"
      additional_bindings: {
          get: "/health/model"
      }
    };
  }

  rpc Readiness(google.protobuf.Empty) returns (HealthCheckResponse){
    option (google.api.http) = {
      get: "/__readiness"
    };
  }

  rpc CreateModelByUpload (stream CreateModelRequest) returns (CreateModelsResponse) {}

  rpc CreateModel (CreateModelRequest) returns (CreateModelsResponse) {
    option (google.api.http) = {
      post: "/models"
      body: "*"
    };
  }

  rpc UpdateModel (UpdateModelRequest) returns (ModelInfo) {
    option (google.api.http) = {
      patch: "/models/{model.name}"
      body: "*"
    };
  }

  // This method handle upload file request
  rpc PredictModelByUpload (stream PredictModelRequest) returns (google.protobuf.Struct) {}

  // This method handle request with file in body such as url/base64 encode
  rpc PredictModel (PredictModelRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/models/{name}/outputs"
      body: "*"
    };
  }

  rpc ListModels (ListModelRequest) returns (ListModelResponse) {
    option (google.api.http) = {
      get: "/models"
    };
  }

  rpc GetModel (GetModelRequest) returns (ModelInfo) {
    option (google.api.http) = {
      get: "/models/{name}"
    };
  }
}

message UpdateModelRequest {
  UpdateModelInfo model                 = 1 [(google.api.field_behavior) = REQUIRED];
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateModelInfo {
  enum Status {
    OFFLINE            = 0;
    ONLINE             = 1;
    ERROR              = 2;
  }
  string name        = 1 [(google.api.field_behavior) = REQUIRED];
  string description = 2;
  Status status      = 3;
}

message GetModelRequest {
    string name    = 1 [(google.api.field_behavior) = REQUIRED];
}

message LoadModelRequest {
    string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message LoadModelResponse {
    // OPTIONAL - If nontrivial cost is involved in
    // determining the size, return 0 here and
    // do the sizing in the modelSize function
    uint64 sizeInBytes = 1;

    // EXPERIMENTAL - Applies only if limitModelConcurrency = true
    // was returned from runtimeStatus rpc.
    // See RuntimeStatusResponse.limitModelConcurrency for more detail
    uint32 maxConcurrency = 2;
}

message UnloadModelRequest {
    string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message UnloadModelResponse {}

message PredictModelRequest {
    enum CVTask {
        CLASSIFICATION = 0;
        DETECTION      = 1;
    }
    // model name
    string name      = 1 [(google.api.field_behavior) = REQUIRED];
    // model version
    int32 version    = 2 [(google.api.field_behavior) = REQUIRED];
    // byte array of image content
    bytes content    = 3 [(google.api.field_behavior) = REQUIRED];
    // CV task type such as object detection, classification
    CVTask type      = 4 [(google.api.field_behavior) = REQUIRED];
}

message ListModelRequest {}

message ListModelResponse {
    repeated ModelInfo models = 1;
}

message CreateModelsResponse {
    repeated ModelInfo models = 1;
}

message CreateModelRequest {
  bytes content      = 1 [(google.api.field_behavior) = REQUIRED];
  string type        = 2 [(google.api.field_behavior) = OPTIONAL];
  string framework   = 3 [(google.api.field_behavior) = OPTIONAL];
  string description = 4 [(google.api.field_behavior) = OPTIONAL];
  bool optimized     = 5 [(google.api.field_behavior) = OPTIONAL];
  string visibility  = 6 [(google.api.field_behavior) = OPTIONAL];
}

message ModelVersion {
  int32 version        = 1;
  int32 model_id       = 2;
  string description   = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
  string status        = 6;
}

message ModelInfo {
  int32 id                       = 1;
  string name                    = 2;
  bool optimized                 = 3;
  string description             = 4;
  string type                    = 5;
  string framework               = 6;
  google.protobuf.Timestamp created_at           = 7;
  google.protobuf.Timestamp updated_at           = 8;
  string organization            = 9;
  string visibility              = 10;
  repeated ModelVersion versions = 11;
  string icon                    = 12;
  string Author                  = 13;
  string fullName                = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message ClassificationOutput {
    string category = 1;
    float score     = 2;
}

message ClassificationOutputs {
    repeated ClassificationOutput contents = 1;
}

message Box {
    float top     = 1;
    float left    = 2;
    float width   = 3;
    float height  = 4;
}

message BoundingBoxPrediction {
    string category = 1;
    float score     = 2;
    Box box         = 3;
}

message DetectionOutput {
    repeated BoundingBoxPrediction contents = 1;
}

message DetectionOutputs {
    repeated DetectionOutput contents = 1;
}

message HealthCheckResponse {
    int32 status = 1;
}