syntax = "proto3";
package instill.pipeline;

option go_package = "github.com/instill-ai/protobufs/pipeline";

// Protobuf standard
import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
// Google api
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";

service Pipeline {
  rpc Liveness(google.protobuf.Empty) returns (HealthCheckResponse) {
    option (google.api.http) = {
      get: "/__liveness"
      additional_bindings: [
        {
          get: "/health/pipeline"
        }
      ]
    };
  }

  rpc Readiness(google.protobuf.Empty) returns (HealthCheckResponse){
    option (google.api.http) = {
      get: "/__readiness"
    };
  }

  rpc CreatePipeline (CreatePipelineRequest) returns (PipelineInfo) {
    option (google.api.http) = {
      post: "/pipelines"
      body: "*"
    };
  }
  rpc ListPipelines (ListPipelinesRequest) returns (ListPipelinesResponse) {
    option (google.api.http) = {
      get: "/pipelines"
    };
  }
  rpc GetPipeline (GetPipelineRequest) returns (PipelineInfo) {
    option (google.api.http) = {
      get: "/pipelines/{name}"
    };
  }
  rpc UpdatePipeline (UpdatePipelineRequest) returns (PipelineInfo) {
    option (google.api.http) = {
      patch: "/pipelines/{pipeline.name}"
      body: "pipeline"
    };
  }
  rpc DeletePipeline (DeletePipelineRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/pipelines/{name}"
    };
  }
  rpc TriggerPipeline (TriggerPipelineRequest) returns (google.protobuf.Struct) {
    option (google.api.http) = {
      post: "/pipelines/{name}/outputs"
      body: "*"
    };
  }
  rpc TriggerPipelineByUpload (stream TriggerPipelineImageRequest) returns (google.protobuf.Struct) {
  }
}

message PipelineInfo {
  uint64 id = 1 [(google.api.field_behavior) = OPTIONAL];
  string name = 2;
  string description = 3 [(google.api.field_behavior) = OPTIONAL];
  bool active = 4;
  google.protobuf.Timestamp created_at = 5 [(google.api.field_behavior) = OUTPUT_ONLY];
  google.protobuf.Timestamp updated_at = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
  instill.pipeline.Recipe recipe = 7;
  string full_name = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message CreatePipelineRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  string description = 2 [(google.api.field_behavior) = OPTIONAL];
  bool active = 3 [(google.api.field_behavior) = REQUIRED];
  instill.pipeline.Recipe recipe = 4 [(google.api.field_behavior) = REQUIRED];
}

message ListPipelinesRequest {
  int32 page_size = 1 [(google.api.field_behavior) = OPTIONAL];
  string page_token = 2 [(google.api.field_behavior) = OPTIONAL];
  View view = 3 [(google.api.field_behavior) = OPTIONAL];

  enum View {
    VIEW_UNSPECIFIED = 0;
    BASIC = 1;
    WITH_RECIPE = 2;
  }
}

message ListPipelinesResponse {
  repeated PipelineInfo contents = 1;
  string next_page_token = 2;
}

message GetPipelineRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdatePipelineRequest {
  PipelineInfo pipeline = 1 [(google.api.field_behavior) = REQUIRED];

  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeletePipelineRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message TriggerPipelineContent {
  string url = 1 [(google.api.field_behavior) = OPTIONAL];
  string base64 = 2 [(google.api.field_behavior) = OPTIONAL];
}

message TriggerPipelineRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  repeated TriggerPipelineContent contents = 2 [(google.api.field_behavior) = REQUIRED];
}

message TriggerPipelineImageContent {
  bytes chunk = 1 [(google.api.field_behavior) = REQUIRED];
}

message TriggerPipelineImageRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  repeated TriggerPipelineImageContent contents = 2 [(google.api.field_behavior) = REQUIRED];
}

message Scheduler {
  string crontab = 1 [(google.api.field_behavior) = REQUIRED];
}

message Source {
  string type = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
  Scheduler scheduler = 3 [(google.api.field_behavior) = OPTIONAL];
}

message Destination {
  string type = 1 [(google.api.field_behavior) = REQUIRED];
  string name = 2 [(google.api.field_behavior) = REQUIRED];
}

message Model {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
  int32 version = 2 [(google.api.field_behavior) = REQUIRED];
}

message Recipe {
  Source source = 1 [(google.api.field_behavior) = REQUIRED];
  Destination destination = 2 [(google.api.field_behavior) = REQUIRED];
  repeated Model model = 3 [(google.api.field_behavior) = REQUIRED];
}

message HealthCheckResponse {
  enum ServingStatusCode {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3;  // Used only by the Watch method.
  }
  ServingStatusCode code = 1;
  string status = 2;
}
